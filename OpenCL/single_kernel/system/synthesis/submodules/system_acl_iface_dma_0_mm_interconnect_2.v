// system_acl_iface_dma_0_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module system_acl_iface_dma_0_mm_interconnect_2 (
		input  wire         clk_clk_clk,                             //                         clk_clk.clk
		input  wire         csr_reset_reset_bridge_in_reset_reset,   // csr_reset_reset_bridge_in_reset.reset
		input  wire [9:0]   csr_m0_address,                          //                          csr_m0.address
		output wire         csr_m0_waitrequest,                      //                                .waitrequest
		input  wire [0:0]   csr_m0_burstcount,                       //                                .burstcount
		input  wire [7:0]   csr_m0_byteenable,                       //                                .byteenable
		input  wire         csr_m0_read,                             //                                .read
		output wire [63:0]  csr_m0_readdata,                         //                                .readdata
		output wire         csr_m0_readdatavalid,                    //                                .readdatavalid
		input  wire         csr_m0_write,                            //                                .write
		input  wire [63:0]  csr_m0_writedata,                        //                                .writedata
		input  wire         csr_m0_debugaccess,                      //                                .debugaccess
		output wire         address_span_extender_0_cntl_write,      //    address_span_extender_0_cntl.write
		output wire         address_span_extender_0_cntl_read,       //                                .read
		input  wire [63:0]  address_span_extender_0_cntl_readdata,   //                                .readdata
		output wire [63:0]  address_span_extender_0_cntl_writedata,  //                                .writedata
		output wire [7:0]   address_span_extender_0_cntl_byteenable, //                                .byteenable
		output wire [2:0]   dma_dma_csr_address,                     //                     dma_dma_csr.address
		output wire         dma_dma_csr_write,                       //                                .write
		output wire         dma_dma_csr_read,                        //                                .read
		input  wire [31:0]  dma_dma_csr_readdata,                    //                                .readdata
		output wire [31:0]  dma_dma_csr_writedata,                   //                                .writedata
		output wire [3:0]   dma_dma_csr_byteenable,                  //                                .byteenable
		output wire         dma_dma_descriptor_write,                //              dma_dma_descriptor.write
		output wire [255:0] dma_dma_descriptor_writedata,            //                                .writedata
		output wire [31:0]  dma_dma_descriptor_byteenable,           //                                .byteenable
		input  wire         dma_dma_descriptor_waitrequest           //                                .waitrequest
	);

	wire          csr_m0_translator_avalon_universal_master_0_waitrequest;       // csr_m0_agent:av_waitrequest -> csr_m0_translator:uav_waitrequest
	wire   [63:0] csr_m0_translator_avalon_universal_master_0_readdata;          // csr_m0_agent:av_readdata -> csr_m0_translator:uav_readdata
	wire          csr_m0_translator_avalon_universal_master_0_debugaccess;       // csr_m0_translator:uav_debugaccess -> csr_m0_agent:av_debugaccess
	wire    [9:0] csr_m0_translator_avalon_universal_master_0_address;           // csr_m0_translator:uav_address -> csr_m0_agent:av_address
	wire          csr_m0_translator_avalon_universal_master_0_read;              // csr_m0_translator:uav_read -> csr_m0_agent:av_read
	wire    [7:0] csr_m0_translator_avalon_universal_master_0_byteenable;        // csr_m0_translator:uav_byteenable -> csr_m0_agent:av_byteenable
	wire          csr_m0_translator_avalon_universal_master_0_readdatavalid;     // csr_m0_agent:av_readdatavalid -> csr_m0_translator:uav_readdatavalid
	wire          csr_m0_translator_avalon_universal_master_0_lock;              // csr_m0_translator:uav_lock -> csr_m0_agent:av_lock
	wire          csr_m0_translator_avalon_universal_master_0_write;             // csr_m0_translator:uav_write -> csr_m0_agent:av_write
	wire   [63:0] csr_m0_translator_avalon_universal_master_0_writedata;         // csr_m0_translator:uav_writedata -> csr_m0_agent:av_writedata
	wire    [3:0] csr_m0_translator_avalon_universal_master_0_burstcount;        // csr_m0_translator:uav_burstcount -> csr_m0_agent:av_burstcount
	wire   [63:0] address_span_extender_0_cntl_agent_m0_readdata;                // address_span_extender_0_cntl_translator:uav_readdata -> address_span_extender_0_cntl_agent:m0_readdata
	wire          address_span_extender_0_cntl_agent_m0_waitrequest;             // address_span_extender_0_cntl_translator:uav_waitrequest -> address_span_extender_0_cntl_agent:m0_waitrequest
	wire          address_span_extender_0_cntl_agent_m0_debugaccess;             // address_span_extender_0_cntl_agent:m0_debugaccess -> address_span_extender_0_cntl_translator:uav_debugaccess
	wire    [9:0] address_span_extender_0_cntl_agent_m0_address;                 // address_span_extender_0_cntl_agent:m0_address -> address_span_extender_0_cntl_translator:uav_address
	wire    [7:0] address_span_extender_0_cntl_agent_m0_byteenable;              // address_span_extender_0_cntl_agent:m0_byteenable -> address_span_extender_0_cntl_translator:uav_byteenable
	wire          address_span_extender_0_cntl_agent_m0_read;                    // address_span_extender_0_cntl_agent:m0_read -> address_span_extender_0_cntl_translator:uav_read
	wire          address_span_extender_0_cntl_agent_m0_readdatavalid;           // address_span_extender_0_cntl_translator:uav_readdatavalid -> address_span_extender_0_cntl_agent:m0_readdatavalid
	wire          address_span_extender_0_cntl_agent_m0_lock;                    // address_span_extender_0_cntl_agent:m0_lock -> address_span_extender_0_cntl_translator:uav_lock
	wire   [63:0] address_span_extender_0_cntl_agent_m0_writedata;               // address_span_extender_0_cntl_agent:m0_writedata -> address_span_extender_0_cntl_translator:uav_writedata
	wire          address_span_extender_0_cntl_agent_m0_write;                   // address_span_extender_0_cntl_agent:m0_write -> address_span_extender_0_cntl_translator:uav_write
	wire    [3:0] address_span_extender_0_cntl_agent_m0_burstcount;              // address_span_extender_0_cntl_agent:m0_burstcount -> address_span_extender_0_cntl_translator:uav_burstcount
	wire          address_span_extender_0_cntl_agent_rf_source_valid;            // address_span_extender_0_cntl_agent:rf_source_valid -> address_span_extender_0_cntl_agent_rsp_fifo:in_valid
	wire  [121:0] address_span_extender_0_cntl_agent_rf_source_data;             // address_span_extender_0_cntl_agent:rf_source_data -> address_span_extender_0_cntl_agent_rsp_fifo:in_data
	wire          address_span_extender_0_cntl_agent_rf_source_ready;            // address_span_extender_0_cntl_agent_rsp_fifo:in_ready -> address_span_extender_0_cntl_agent:rf_source_ready
	wire          address_span_extender_0_cntl_agent_rf_source_startofpacket;    // address_span_extender_0_cntl_agent:rf_source_startofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_cntl_agent_rf_source_endofpacket;      // address_span_extender_0_cntl_agent:rf_source_endofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_valid;         // address_span_extender_0_cntl_agent_rsp_fifo:out_valid -> address_span_extender_0_cntl_agent:rf_sink_valid
	wire  [121:0] address_span_extender_0_cntl_agent_rsp_fifo_out_data;          // address_span_extender_0_cntl_agent_rsp_fifo:out_data -> address_span_extender_0_cntl_agent:rf_sink_data
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_ready;         // address_span_extender_0_cntl_agent:rf_sink_ready -> address_span_extender_0_cntl_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket; // address_span_extender_0_cntl_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_cntl_agent:rf_sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket;   // address_span_extender_0_cntl_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_cntl_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> address_span_extender_0_cntl_agent:cp_valid
	wire  [120:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> address_span_extender_0_cntl_agent:cp_data
	wire          cmd_mux_src_ready;                                             // address_span_extender_0_cntl_agent:cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> address_span_extender_0_cntl_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> address_span_extender_0_cntl_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> address_span_extender_0_cntl_agent:cp_endofpacket
	wire  [255:0] dma_dma_descriptor_agent_m0_readdata;                          // dma_dma_descriptor_translator:uav_readdata -> dma_dma_descriptor_agent:m0_readdata
	wire          dma_dma_descriptor_agent_m0_waitrequest;                       // dma_dma_descriptor_translator:uav_waitrequest -> dma_dma_descriptor_agent:m0_waitrequest
	wire          dma_dma_descriptor_agent_m0_debugaccess;                       // dma_dma_descriptor_agent:m0_debugaccess -> dma_dma_descriptor_translator:uav_debugaccess
	wire    [9:0] dma_dma_descriptor_agent_m0_address;                           // dma_dma_descriptor_agent:m0_address -> dma_dma_descriptor_translator:uav_address
	wire   [31:0] dma_dma_descriptor_agent_m0_byteenable;                        // dma_dma_descriptor_agent:m0_byteenable -> dma_dma_descriptor_translator:uav_byteenable
	wire          dma_dma_descriptor_agent_m0_read;                              // dma_dma_descriptor_agent:m0_read -> dma_dma_descriptor_translator:uav_read
	wire          dma_dma_descriptor_agent_m0_readdatavalid;                     // dma_dma_descriptor_translator:uav_readdatavalid -> dma_dma_descriptor_agent:m0_readdatavalid
	wire          dma_dma_descriptor_agent_m0_lock;                              // dma_dma_descriptor_agent:m0_lock -> dma_dma_descriptor_translator:uav_lock
	wire  [255:0] dma_dma_descriptor_agent_m0_writedata;                         // dma_dma_descriptor_agent:m0_writedata -> dma_dma_descriptor_translator:uav_writedata
	wire          dma_dma_descriptor_agent_m0_write;                             // dma_dma_descriptor_agent:m0_write -> dma_dma_descriptor_translator:uav_write
	wire    [5:0] dma_dma_descriptor_agent_m0_burstcount;                        // dma_dma_descriptor_agent:m0_burstcount -> dma_dma_descriptor_translator:uav_burstcount
	wire          dma_dma_descriptor_agent_rf_source_valid;                      // dma_dma_descriptor_agent:rf_source_valid -> dma_dma_descriptor_agent_rsp_fifo:in_valid
	wire  [337:0] dma_dma_descriptor_agent_rf_source_data;                       // dma_dma_descriptor_agent:rf_source_data -> dma_dma_descriptor_agent_rsp_fifo:in_data
	wire          dma_dma_descriptor_agent_rf_source_ready;                      // dma_dma_descriptor_agent_rsp_fifo:in_ready -> dma_dma_descriptor_agent:rf_source_ready
	wire          dma_dma_descriptor_agent_rf_source_startofpacket;              // dma_dma_descriptor_agent:rf_source_startofpacket -> dma_dma_descriptor_agent_rsp_fifo:in_startofpacket
	wire          dma_dma_descriptor_agent_rf_source_endofpacket;                // dma_dma_descriptor_agent:rf_source_endofpacket -> dma_dma_descriptor_agent_rsp_fifo:in_endofpacket
	wire          dma_dma_descriptor_agent_rsp_fifo_out_valid;                   // dma_dma_descriptor_agent_rsp_fifo:out_valid -> dma_dma_descriptor_agent:rf_sink_valid
	wire  [337:0] dma_dma_descriptor_agent_rsp_fifo_out_data;                    // dma_dma_descriptor_agent_rsp_fifo:out_data -> dma_dma_descriptor_agent:rf_sink_data
	wire          dma_dma_descriptor_agent_rsp_fifo_out_ready;                   // dma_dma_descriptor_agent:rf_sink_ready -> dma_dma_descriptor_agent_rsp_fifo:out_ready
	wire          dma_dma_descriptor_agent_rsp_fifo_out_startofpacket;           // dma_dma_descriptor_agent_rsp_fifo:out_startofpacket -> dma_dma_descriptor_agent:rf_sink_startofpacket
	wire          dma_dma_descriptor_agent_rsp_fifo_out_endofpacket;             // dma_dma_descriptor_agent_rsp_fifo:out_endofpacket -> dma_dma_descriptor_agent:rf_sink_endofpacket
	wire   [31:0] dma_dma_csr_agent_m0_readdata;                                 // dma_dma_csr_translator:uav_readdata -> dma_dma_csr_agent:m0_readdata
	wire          dma_dma_csr_agent_m0_waitrequest;                              // dma_dma_csr_translator:uav_waitrequest -> dma_dma_csr_agent:m0_waitrequest
	wire          dma_dma_csr_agent_m0_debugaccess;                              // dma_dma_csr_agent:m0_debugaccess -> dma_dma_csr_translator:uav_debugaccess
	wire    [9:0] dma_dma_csr_agent_m0_address;                                  // dma_dma_csr_agent:m0_address -> dma_dma_csr_translator:uav_address
	wire    [3:0] dma_dma_csr_agent_m0_byteenable;                               // dma_dma_csr_agent:m0_byteenable -> dma_dma_csr_translator:uav_byteenable
	wire          dma_dma_csr_agent_m0_read;                                     // dma_dma_csr_agent:m0_read -> dma_dma_csr_translator:uav_read
	wire          dma_dma_csr_agent_m0_readdatavalid;                            // dma_dma_csr_translator:uav_readdatavalid -> dma_dma_csr_agent:m0_readdatavalid
	wire          dma_dma_csr_agent_m0_lock;                                     // dma_dma_csr_agent:m0_lock -> dma_dma_csr_translator:uav_lock
	wire   [31:0] dma_dma_csr_agent_m0_writedata;                                // dma_dma_csr_agent:m0_writedata -> dma_dma_csr_translator:uav_writedata
	wire          dma_dma_csr_agent_m0_write;                                    // dma_dma_csr_agent:m0_write -> dma_dma_csr_translator:uav_write
	wire    [2:0] dma_dma_csr_agent_m0_burstcount;                               // dma_dma_csr_agent:m0_burstcount -> dma_dma_csr_translator:uav_burstcount
	wire          dma_dma_csr_agent_rf_source_valid;                             // dma_dma_csr_agent:rf_source_valid -> dma_dma_csr_agent_rsp_fifo:in_valid
	wire   [85:0] dma_dma_csr_agent_rf_source_data;                              // dma_dma_csr_agent:rf_source_data -> dma_dma_csr_agent_rsp_fifo:in_data
	wire          dma_dma_csr_agent_rf_source_ready;                             // dma_dma_csr_agent_rsp_fifo:in_ready -> dma_dma_csr_agent:rf_source_ready
	wire          dma_dma_csr_agent_rf_source_startofpacket;                     // dma_dma_csr_agent:rf_source_startofpacket -> dma_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_dma_csr_agent_rf_source_endofpacket;                       // dma_dma_csr_agent:rf_source_endofpacket -> dma_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_dma_csr_agent_rsp_fifo_out_valid;                          // dma_dma_csr_agent_rsp_fifo:out_valid -> dma_dma_csr_agent:rf_sink_valid
	wire   [85:0] dma_dma_csr_agent_rsp_fifo_out_data;                           // dma_dma_csr_agent_rsp_fifo:out_data -> dma_dma_csr_agent:rf_sink_data
	wire          dma_dma_csr_agent_rsp_fifo_out_ready;                          // dma_dma_csr_agent:rf_sink_ready -> dma_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_dma_csr_agent_rsp_fifo_out_startofpacket;                  // dma_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_dma_csr_agent:rf_sink_startofpacket
	wire          dma_dma_csr_agent_rsp_fifo_out_endofpacket;                    // dma_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_dma_csr_agent:rf_sink_endofpacket
	wire          csr_m0_agent_cp_valid;                                         // csr_m0_agent:cp_valid -> router:sink_valid
	wire  [120:0] csr_m0_agent_cp_data;                                          // csr_m0_agent:cp_data -> router:sink_data
	wire          csr_m0_agent_cp_ready;                                         // router:sink_ready -> csr_m0_agent:cp_ready
	wire          csr_m0_agent_cp_startofpacket;                                 // csr_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          csr_m0_agent_cp_endofpacket;                                   // csr_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rp_valid;                   // address_span_extender_0_cntl_agent:rp_valid -> router_001:sink_valid
	wire  [120:0] address_span_extender_0_cntl_agent_rp_data;                    // address_span_extender_0_cntl_agent:rp_data -> router_001:sink_data
	wire          address_span_extender_0_cntl_agent_rp_ready;                   // router_001:sink_ready -> address_span_extender_0_cntl_agent:rp_ready
	wire          address_span_extender_0_cntl_agent_rp_startofpacket;           // address_span_extender_0_cntl_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rp_endofpacket;             // address_span_extender_0_cntl_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_001_src_data;                                           // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                          // rsp_demux:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                        // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dma_dma_descriptor_agent_rp_valid;                             // dma_dma_descriptor_agent:rp_valid -> router_002:sink_valid
	wire  [336:0] dma_dma_descriptor_agent_rp_data;                              // dma_dma_descriptor_agent:rp_data -> router_002:sink_data
	wire          dma_dma_descriptor_agent_rp_ready;                             // router_002:sink_ready -> dma_dma_descriptor_agent:rp_ready
	wire          dma_dma_descriptor_agent_rp_startofpacket;                     // dma_dma_descriptor_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          dma_dma_descriptor_agent_rp_endofpacket;                       // dma_dma_descriptor_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          dma_dma_csr_agent_rp_valid;                                    // dma_dma_csr_agent:rp_valid -> router_003:sink_valid
	wire   [84:0] dma_dma_csr_agent_rp_data;                                     // dma_dma_csr_agent:rp_data -> router_003:sink_data
	wire          dma_dma_csr_agent_rp_ready;                                    // router_003:sink_ready -> dma_dma_csr_agent:rp_ready
	wire          dma_dma_csr_agent_rp_startofpacket;                            // dma_dma_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          dma_dma_csr_agent_rp_endofpacket;                              // dma_dma_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> csr_m0_limiter:cmd_sink_valid
	wire  [120:0] router_src_data;                                               // router:src_data -> csr_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                              // csr_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                            // router:src_channel -> csr_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> csr_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> csr_m0_limiter:cmd_sink_endofpacket
	wire  [120:0] csr_m0_limiter_cmd_src_data;                                   // csr_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          csr_m0_limiter_cmd_src_ready;                                  // cmd_demux:sink_ready -> csr_m0_limiter:cmd_src_ready
	wire    [2:0] csr_m0_limiter_cmd_src_channel;                                // csr_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          csr_m0_limiter_cmd_src_startofpacket;                          // csr_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          csr_m0_limiter_cmd_src_endofpacket;                            // csr_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> csr_m0_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> csr_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                             // csr_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> csr_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> csr_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> csr_m0_limiter:rsp_sink_endofpacket
	wire          csr_m0_limiter_rsp_src_valid;                                  // csr_m0_limiter:rsp_src_valid -> csr_m0_agent:rp_valid
	wire  [120:0] csr_m0_limiter_rsp_src_data;                                   // csr_m0_limiter:rsp_src_data -> csr_m0_agent:rp_data
	wire          csr_m0_limiter_rsp_src_ready;                                  // csr_m0_agent:rp_ready -> csr_m0_limiter:rsp_src_ready
	wire    [2:0] csr_m0_limiter_rsp_src_channel;                                // csr_m0_limiter:rsp_src_channel -> csr_m0_agent:rp_channel
	wire          csr_m0_limiter_rsp_src_startofpacket;                          // csr_m0_limiter:rsp_src_startofpacket -> csr_m0_agent:rp_startofpacket
	wire          csr_m0_limiter_rsp_src_endofpacket;                            // csr_m0_limiter:rsp_src_endofpacket -> csr_m0_agent:rp_endofpacket
	wire          dma_dma_csr_burst_adapter_source0_valid;                       // dma_dma_csr_burst_adapter:source0_valid -> dma_dma_csr_agent:cp_valid
	wire   [84:0] dma_dma_csr_burst_adapter_source0_data;                        // dma_dma_csr_burst_adapter:source0_data -> dma_dma_csr_agent:cp_data
	wire          dma_dma_csr_burst_adapter_source0_ready;                       // dma_dma_csr_agent:cp_ready -> dma_dma_csr_burst_adapter:source0_ready
	wire    [2:0] dma_dma_csr_burst_adapter_source0_channel;                     // dma_dma_csr_burst_adapter:source0_channel -> dma_dma_csr_agent:cp_channel
	wire          dma_dma_csr_burst_adapter_source0_startofpacket;               // dma_dma_csr_burst_adapter:source0_startofpacket -> dma_dma_csr_agent:cp_startofpacket
	wire          dma_dma_csr_burst_adapter_source0_endofpacket;                 // dma_dma_csr_burst_adapter:source0_endofpacket -> dma_dma_csr_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [120:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [120:0] cmd_demux_src2_data;                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [120:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [120:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [120:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> dma_dma_descriptor_cmd_width_adapter:in_valid
	wire  [120:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> dma_dma_descriptor_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                         // dma_dma_descriptor_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> dma_dma_descriptor_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> dma_dma_descriptor_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> dma_dma_descriptor_cmd_width_adapter:in_endofpacket
	wire          dma_dma_descriptor_cmd_width_adapter_src_valid;                // dma_dma_descriptor_cmd_width_adapter:out_valid -> dma_dma_descriptor_agent:cp_valid
	wire  [336:0] dma_dma_descriptor_cmd_width_adapter_src_data;                 // dma_dma_descriptor_cmd_width_adapter:out_data -> dma_dma_descriptor_agent:cp_data
	wire          dma_dma_descriptor_cmd_width_adapter_src_ready;                // dma_dma_descriptor_agent:cp_ready -> dma_dma_descriptor_cmd_width_adapter:out_ready
	wire    [2:0] dma_dma_descriptor_cmd_width_adapter_src_channel;              // dma_dma_descriptor_cmd_width_adapter:out_channel -> dma_dma_descriptor_agent:cp_channel
	wire          dma_dma_descriptor_cmd_width_adapter_src_startofpacket;        // dma_dma_descriptor_cmd_width_adapter:out_startofpacket -> dma_dma_descriptor_agent:cp_startofpacket
	wire          dma_dma_descriptor_cmd_width_adapter_src_endofpacket;          // dma_dma_descriptor_cmd_width_adapter:out_endofpacket -> dma_dma_descriptor_agent:cp_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> dma_dma_descriptor_rsp_width_adapter:in_valid
	wire  [336:0] router_002_src_data;                                           // router_002:src_data -> dma_dma_descriptor_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                          // dma_dma_descriptor_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                        // router_002:src_channel -> dma_dma_descriptor_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> dma_dma_descriptor_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> dma_dma_descriptor_rsp_width_adapter:in_endofpacket
	wire          dma_dma_descriptor_rsp_width_adapter_src_valid;                // dma_dma_descriptor_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [120:0] dma_dma_descriptor_rsp_width_adapter_src_data;                 // dma_dma_descriptor_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          dma_dma_descriptor_rsp_width_adapter_src_ready;                // rsp_demux_001:sink_ready -> dma_dma_descriptor_rsp_width_adapter:out_ready
	wire    [2:0] dma_dma_descriptor_rsp_width_adapter_src_channel;              // dma_dma_descriptor_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          dma_dma_descriptor_rsp_width_adapter_src_startofpacket;        // dma_dma_descriptor_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          dma_dma_descriptor_rsp_width_adapter_src_endofpacket;          // dma_dma_descriptor_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> dma_dma_csr_rsp_width_adapter:in_valid
	wire   [84:0] router_003_src_data;                                           // router_003:src_data -> dma_dma_csr_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                          // dma_dma_csr_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                        // router_003:src_channel -> dma_dma_csr_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> dma_dma_csr_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> dma_dma_csr_rsp_width_adapter:in_endofpacket
	wire          dma_dma_csr_rsp_width_adapter_src_valid;                       // dma_dma_csr_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [120:0] dma_dma_csr_rsp_width_adapter_src_data;                        // dma_dma_csr_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          dma_dma_csr_rsp_width_adapter_src_ready;                       // rsp_demux_002:sink_ready -> dma_dma_csr_rsp_width_adapter:out_ready
	wire    [2:0] dma_dma_csr_rsp_width_adapter_src_channel;                     // dma_dma_csr_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          dma_dma_csr_rsp_width_adapter_src_startofpacket;               // dma_dma_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          dma_dma_csr_rsp_width_adapter_src_endofpacket;                 // dma_dma_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> dma_dma_csr_cmd_width_adapter:in_valid
	wire  [120:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> dma_dma_csr_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                         // dma_dma_csr_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> dma_dma_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> dma_dma_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> dma_dma_csr_cmd_width_adapter:in_endofpacket
	wire          dma_dma_csr_cmd_width_adapter_src_valid;                       // dma_dma_csr_cmd_width_adapter:out_valid -> dma_dma_csr_burst_adapter:sink0_valid
	wire   [84:0] dma_dma_csr_cmd_width_adapter_src_data;                        // dma_dma_csr_cmd_width_adapter:out_data -> dma_dma_csr_burst_adapter:sink0_data
	wire          dma_dma_csr_cmd_width_adapter_src_ready;                       // dma_dma_csr_burst_adapter:sink0_ready -> dma_dma_csr_cmd_width_adapter:out_ready
	wire    [2:0] dma_dma_csr_cmd_width_adapter_src_channel;                     // dma_dma_csr_cmd_width_adapter:out_channel -> dma_dma_csr_burst_adapter:sink0_channel
	wire          dma_dma_csr_cmd_width_adapter_src_startofpacket;               // dma_dma_csr_cmd_width_adapter:out_startofpacket -> dma_dma_csr_burst_adapter:sink0_startofpacket
	wire          dma_dma_csr_cmd_width_adapter_src_endofpacket;                 // dma_dma_csr_cmd_width_adapter:out_endofpacket -> dma_dma_csr_burst_adapter:sink0_endofpacket
	wire    [2:0] csr_m0_limiter_cmd_valid_data;                                 // csr_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_valid;       // address_span_extender_0_cntl_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] address_span_extender_0_cntl_agent_rdata_fifo_src_data;        // address_span_extender_0_cntl_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_ready;       // avalon_st_adapter:in_0_ready -> address_span_extender_0_cntl_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> address_span_extender_0_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> address_span_extender_0_cntl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // address_span_extender_0_cntl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> address_span_extender_0_cntl_agent:rdata_fifo_sink_error
	wire          dma_dma_descriptor_agent_rdata_fifo_src_valid;                 // dma_dma_descriptor_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [257:0] dma_dma_descriptor_agent_rdata_fifo_src_data;                  // dma_dma_descriptor_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          dma_dma_descriptor_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_001:in_0_ready -> dma_dma_descriptor_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> dma_dma_descriptor_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> dma_dma_descriptor_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // dma_dma_descriptor_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> dma_dma_descriptor_agent:rdata_fifo_sink_error
	wire          dma_dma_csr_agent_rdata_fifo_src_valid;                        // dma_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] dma_dma_csr_agent_rdata_fifo_src_data;                         // dma_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          dma_dma_csr_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_002:in_0_ready -> dma_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                             // avalon_st_adapter_002:out_0_valid -> dma_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                              // avalon_st_adapter_002:out_0_data -> dma_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                             // dma_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                             // avalon_st_adapter_002:out_0_error -> dma_dma_csr_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) csr_m0_translator (
		.clk                    (clk_clk_clk),                                               //                       clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (csr_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (csr_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (csr_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (csr_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (csr_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (csr_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (csr_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (csr_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (csr_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (csr_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (csr_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (csr_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (csr_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (csr_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (csr_m0_byteenable),                                         //                          .byteenable
		.av_read                (csr_m0_read),                                               //                          .read
		.av_readdata            (csr_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (csr_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (csr_m0_write),                                              //                          .write
		.av_writedata           (csr_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (csr_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                      //               (terminated)
		.av_lock                (1'b0),                                                      //               (terminated)
		.uav_clken              (),                                                          //               (terminated)
		.av_clken               (1'b1),                                                      //               (terminated)
		.uav_response           (2'b00),                                                     //               (terminated)
		.av_response            (),                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_span_extender_0_cntl_translator (
		.clk                    (clk_clk_clk),                                         //                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (address_span_extender_0_cntl_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_cntl_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (address_span_extender_0_cntl_agent_m0_read),          //                         .read
		.uav_write              (address_span_extender_0_cntl_agent_m0_write),         //                         .write
		.uav_waitrequest        (address_span_extender_0_cntl_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_cntl_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_cntl_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (address_span_extender_0_cntl_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (address_span_extender_0_cntl_agent_m0_writedata),     //                         .writedata
		.uav_lock               (address_span_extender_0_cntl_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (address_span_extender_0_cntl_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (address_span_extender_0_cntl_write),                  //      avalon_anti_slave_0.write
		.av_read                (address_span_extender_0_cntl_read),                   //                         .read
		.av_readdata            (address_span_extender_0_cntl_readdata),               //                         .readdata
		.av_writedata           (address_span_extender_0_cntl_writedata),              //                         .writedata
		.av_byteenable          (address_span_extender_0_cntl_byteenable),             //                         .byteenable
		.av_address             (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_dma_descriptor_translator (
		.clk                    (clk_clk_clk),                                                                                                                                                                                                                                                           //                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                                 //                    reset.reset
		.uav_address            (dma_dma_descriptor_agent_m0_address),                                                                                                                                                                                                                                   // avalon_universal_slave_0.address
		.uav_burstcount         (dma_dma_descriptor_agent_m0_burstcount),                                                                                                                                                                                                                                //                         .burstcount
		.uav_read               (dma_dma_descriptor_agent_m0_read),                                                                                                                                                                                                                                      //                         .read
		.uav_write              (dma_dma_descriptor_agent_m0_write),                                                                                                                                                                                                                                     //                         .write
		.uav_waitrequest        (dma_dma_descriptor_agent_m0_waitrequest),                                                                                                                                                                                                                               //                         .waitrequest
		.uav_readdatavalid      (dma_dma_descriptor_agent_m0_readdatavalid),                                                                                                                                                                                                                             //                         .readdatavalid
		.uav_byteenable         (dma_dma_descriptor_agent_m0_byteenable),                                                                                                                                                                                                                                //                         .byteenable
		.uav_readdata           (dma_dma_descriptor_agent_m0_readdata),                                                                                                                                                                                                                                  //                         .readdata
		.uav_writedata          (dma_dma_descriptor_agent_m0_writedata),                                                                                                                                                                                                                                 //                         .writedata
		.uav_lock               (dma_dma_descriptor_agent_m0_lock),                                                                                                                                                                                                                                      //                         .lock
		.uav_debugaccess        (dma_dma_descriptor_agent_m0_debugaccess),                                                                                                                                                                                                                               //                         .debugaccess
		.av_write               (dma_dma_descriptor_write),                                                                                                                                                                                                                                              //      avalon_anti_slave_0.write
		.av_writedata           (dma_dma_descriptor_writedata),                                                                                                                                                                                                                                          //                         .writedata
		.av_byteenable          (dma_dma_descriptor_byteenable),                                                                                                                                                                                                                                         //                         .byteenable
		.av_waitrequest         (dma_dma_descriptor_waitrequest),                                                                                                                                                                                                                                        //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_dma_csr_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_dma_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dma_dma_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dma_dma_csr_agent_m0_read),             //                         .read
		.uav_write              (dma_dma_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dma_dma_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dma_dma_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dma_dma_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dma_dma_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dma_dma_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dma_dma_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dma_dma_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dma_dma_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dma_dma_csr_write),                     //                         .write
		.av_read                (dma_dma_csr_read),                      //                         .read
		.av_readdata            (dma_dma_csr_readdata),                  //                         .readdata
		.av_writedata           (dma_dma_csr_writedata),                 //                         .writedata
		.av_byteenable          (dma_dma_csr_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (103),
		.PKT_QOS_L                 (103),
		.PKT_DATA_SIDEBAND_H       (101),
		.PKT_DATA_SIDEBAND_L       (101),
		.PKT_ADDR_SIDEBAND_H       (100),
		.PKT_ADDR_SIDEBAND_L       (100),
		.PKT_BURST_TYPE_H          (99),
		.PKT_BURST_TYPE_L          (98),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (97),
		.PKT_BURST_SIZE_L          (95),
		.PKT_TRANS_EXCLUSIVE       (87),
		.PKT_TRANS_LOCK            (86),
		.PKT_BEGIN_BURST           (102),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (94),
		.PKT_BURSTWRAP_L           (94),
		.PKT_BYTE_CNT_H            (93),
		.PKT_BYTE_CNT_L            (88),
		.PKT_ADDR_H                (81),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (82),
		.PKT_TRANS_POSTED          (83),
		.PKT_TRANS_WRITE           (84),
		.PKT_TRANS_READ            (85),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) csr_m0_agent (
		.clk                   (clk_clk_clk),                                               //       clk.clk
		.reset                 (csr_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (csr_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (csr_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (csr_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (csr_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (csr_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (csr_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (csr_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (csr_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (csr_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (csr_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (csr_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (csr_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (csr_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (csr_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (csr_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (csr_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (csr_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (csr_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (csr_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (csr_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (csr_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (csr_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                          // (terminated)
		.av_writeresponsevalid ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (97),
		.PKT_BURST_SIZE_L          (95),
		.PKT_TRANS_LOCK            (86),
		.PKT_BEGIN_BURST           (102),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (94),
		.PKT_BURSTWRAP_L           (94),
		.PKT_BYTE_CNT_H            (93),
		.PKT_BYTE_CNT_L            (88),
		.PKT_ADDR_H                (81),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (82),
		.PKT_TRANS_POSTED          (83),
		.PKT_TRANS_WRITE           (84),
		.PKT_TRANS_READ            (85),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) address_span_extender_0_cntl_agent (
		.clk                     (clk_clk_clk),                                                   //             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (address_span_extender_0_cntl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (address_span_extender_0_cntl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (address_span_extender_0_cntl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (address_span_extender_0_cntl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (address_span_extender_0_cntl_agent_m0_lock),                    //                .lock
		.m0_readdata             (address_span_extender_0_cntl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (address_span_extender_0_cntl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (address_span_extender_0_cntl_agent_m0_read),                    //                .read
		.m0_waitrequest          (address_span_extender_0_cntl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (address_span_extender_0_cntl_agent_m0_writedata),               //                .writedata
		.m0_write                (address_span_extender_0_cntl_agent_m0_write),                   //                .write
		.rp_endofpacket          (address_span_extender_0_cntl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (address_span_extender_0_cntl_agent_rp_ready),                   //                .ready
		.rp_valid                (address_span_extender_0_cntl_agent_rp_valid),                   //                .valid
		.rp_data                 (address_span_extender_0_cntl_agent_rp_data),                    //                .data
		.rp_startofpacket        (address_span_extender_0_cntl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                           //                .channel
		.rf_sink_ready           (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (address_span_extender_0_cntl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (address_span_extender_0_cntl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (address_span_extender_0_cntl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (address_span_extender_0_cntl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_0_cntl_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                   //       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (address_span_extender_0_cntl_agent_rf_source_data),             //        in.data
		.in_valid          (address_span_extender_0_cntl_agent_rf_source_valid),            //          .valid
		.in_ready          (address_span_extender_0_cntl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (336),
		.PKT_ORI_BURST_SIZE_L      (334),
		.PKT_RESPONSE_STATUS_H     (333),
		.PKT_RESPONSE_STATUS_L     (332),
		.PKT_BURST_SIZE_H          (313),
		.PKT_BURST_SIZE_L          (311),
		.PKT_TRANS_LOCK            (302),
		.PKT_BEGIN_BURST           (318),
		.PKT_PROTECTION_H          (327),
		.PKT_PROTECTION_L          (325),
		.PKT_BURSTWRAP_H           (310),
		.PKT_BURSTWRAP_L           (310),
		.PKT_BYTE_CNT_H            (309),
		.PKT_BYTE_CNT_L            (304),
		.PKT_ADDR_H                (297),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (298),
		.PKT_TRANS_POSTED          (299),
		.PKT_TRANS_WRITE           (300),
		.PKT_TRANS_READ            (301),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (321),
		.PKT_SRC_ID_L              (320),
		.PKT_DEST_ID_H             (323),
		.PKT_DEST_ID_L             (322),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (337),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_dma_descriptor_agent (
		.clk                     (clk_clk_clk),                                            //             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (dma_dma_descriptor_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_dma_descriptor_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_dma_descriptor_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_dma_descriptor_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_dma_descriptor_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_dma_descriptor_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_dma_descriptor_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_dma_descriptor_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_dma_descriptor_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_dma_descriptor_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_dma_descriptor_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_dma_descriptor_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_dma_descriptor_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_dma_descriptor_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_dma_descriptor_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_dma_descriptor_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_dma_descriptor_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_dma_descriptor_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_dma_descriptor_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_dma_descriptor_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_dma_descriptor_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_dma_descriptor_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_dma_descriptor_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_dma_descriptor_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_dma_descriptor_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_dma_descriptor_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_dma_descriptor_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_dma_descriptor_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_dma_descriptor_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_dma_descriptor_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_dma_descriptor_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_dma_descriptor_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (dma_dma_descriptor_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_dma_descriptor_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_dma_descriptor_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (338),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dma_descriptor_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_dma_descriptor_agent_rf_source_data),             //        in.data
		.in_valid          (dma_dma_descriptor_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_dma_descriptor_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_dma_descriptor_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_dma_descriptor_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_dma_descriptor_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_dma_descriptor_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_dma_descriptor_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_dma_descriptor_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_dma_descriptor_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_dma_csr_agent (
		.clk                     (clk_clk_clk),                                     //             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dma_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),               //                .error
		.rdata_fifo_src_ready    (dma_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dma_csr_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dma_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	system_acl_iface_dma_0_mm_interconnect_2_router router (
		.sink_ready         (csr_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (csr_m0_agent_cp_valid),                 //          .valid
		.sink_data          (csr_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (csr_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (csr_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                      //       src.ready
		.src_valid          (router_src_valid),                      //          .valid
		.src_data           (router_src_data),                       //          .data
		.src_channel        (router_src_channel),                    //          .channel
		.src_startofpacket  (router_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                 //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (address_span_extender_0_cntl_agent_rp_ready),         //      sink.ready
		.sink_valid         (address_span_extender_0_cntl_agent_rp_valid),         //          .valid
		.sink_data          (address_span_extender_0_cntl_agent_rp_data),          //          .data
		.sink_startofpacket (address_span_extender_0_cntl_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (dma_dma_descriptor_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_dma_descriptor_agent_rp_valid),         //          .valid
		.sink_data          (dma_dma_descriptor_agent_rp_data),          //          .data
		.sink_startofpacket (dma_dma_descriptor_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dma_descriptor_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_002_src_ready),                      //       src.ready
		.src_valid          (router_002_src_valid),                      //          .valid
		.src_data           (router_002_src_data),                       //          .data
		.src_channel        (router_002_src_channel),                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                 //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_router_003 router_003 (
		.sink_ready         (dma_dma_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dma_dma_csr_agent_rp_valid),            //          .valid
		.sink_data          (dma_dma_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dma_dma_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dma_dma_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                  //       src.ready
		.src_valid          (router_003_src_valid),                  //          .valid
		.src_data           (router_003_src_data),                   //          .data
		.src_channel        (router_003_src_channel),                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_BYTE_CNT_H            (93),
		.PKT_BYTE_CNT_L            (88),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (83),
		.PKT_TRANS_WRITE           (84),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) csr_m0_limiter (
		.clk                    (clk_clk_clk),                           //       clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                      //          .valid
		.cmd_sink_data          (router_src_data),                       //          .data
		.cmd_sink_channel       (router_src_channel),                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                //          .endofpacket
		.cmd_src_ready          (csr_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (csr_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (csr_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (csr_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (csr_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                     //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                   //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                      //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),               //          .endofpacket
		.rsp_src_ready          (csr_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (csr_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (csr_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (csr_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (csr_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (csr_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (csr_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (66),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (58),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) dma_dma_csr_burst_adapter (
		.clk                   (clk_clk_clk),                                     //       cr0.clk
		.reset                 (csr_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (dma_dma_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (dma_dma_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (dma_dma_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (dma_dma_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (dma_dma_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (dma_dma_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (dma_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	system_acl_iface_dma_0_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                           //        clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (csr_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (csr_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (csr_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (csr_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (csr_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (csr_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                  //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                  //           .valid
		.src0_data          (cmd_demux_src0_data),                   //           .data
		.src0_channel       (cmd_demux_src0_channel),                //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),          //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),            //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                  //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                  //           .valid
		.src1_data          (cmd_demux_src1_data),                   //           .data
		.src1_channel       (cmd_demux_src1_channel),                //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),          //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),            //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                  //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                  //           .valid
		.src2_data          (cmd_demux_src2_data),                   //           .data
		.src2_channel       (cmd_demux_src2_channel),                //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),          //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)             //           .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //          .channel
		.sink0_data          (cmd_demux_src1_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)             //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)             //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //      sink.ready
		.sink_channel       (router_001_src_channel),                //          .channel
		.sink_data          (router_001_src_data),                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_001_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)             //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                                            //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (dma_dma_descriptor_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_dma_descriptor_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_dma_descriptor_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_dma_descriptor_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dma_descriptor_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_dma_descriptor_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                                     //       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.sink_ready         (dma_dma_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_dma_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_dma_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_dma_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dma_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_dma_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                   //          .endofpacket
	);

	system_acl_iface_dma_0_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                     //          .valid
		.src_data            (rsp_mux_src_data),                      //          .data
		.src_channel         (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //          .channel
		.sink0_data          (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (81),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (93),
		.IN_PKT_BYTE_CNT_L             (88),
		.IN_PKT_TRANS_COMPRESSED_READ  (82),
		.IN_PKT_TRANS_WRITE            (84),
		.IN_PKT_BURSTWRAP_H            (94),
		.IN_PKT_BURSTWRAP_L            (94),
		.IN_PKT_BURST_SIZE_H           (97),
		.IN_PKT_BURST_SIZE_L           (95),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (87),
		.IN_PKT_BURST_TYPE_H           (99),
		.IN_PKT_BURST_TYPE_L           (98),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_ST_DATA_W                  (121),
		.OUT_PKT_ADDR_H                (297),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (309),
		.OUT_PKT_BYTE_CNT_L            (304),
		.OUT_PKT_TRANS_COMPRESSED_READ (298),
		.OUT_PKT_BURST_SIZE_H          (313),
		.OUT_PKT_BURST_SIZE_L          (311),
		.OUT_PKT_RESPONSE_STATUS_H     (333),
		.OUT_PKT_RESPONSE_STATUS_L     (332),
		.OUT_PKT_TRANS_EXCLUSIVE       (303),
		.OUT_PKT_BURST_TYPE_H          (315),
		.OUT_PKT_BURST_TYPE_L          (314),
		.OUT_PKT_ORI_BURST_SIZE_L      (334),
		.OUT_PKT_ORI_BURST_SIZE_H      (336),
		.OUT_ST_DATA_W                 (337),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_dma_descriptor_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                            //       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                  //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                            //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                  //          .ready
		.in_data              (cmd_mux_001_src_data),                                   //          .data
		.out_endofpacket      (dma_dma_descriptor_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dma_descriptor_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_dma_descriptor_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dma_descriptor_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dma_descriptor_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dma_descriptor_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (297),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (309),
		.IN_PKT_BYTE_CNT_L             (304),
		.IN_PKT_TRANS_COMPRESSED_READ  (298),
		.IN_PKT_TRANS_WRITE            (300),
		.IN_PKT_BURSTWRAP_H            (310),
		.IN_PKT_BURSTWRAP_L            (310),
		.IN_PKT_BURST_SIZE_H           (313),
		.IN_PKT_BURST_SIZE_L           (311),
		.IN_PKT_RESPONSE_STATUS_H      (333),
		.IN_PKT_RESPONSE_STATUS_L      (332),
		.IN_PKT_TRANS_EXCLUSIVE        (303),
		.IN_PKT_BURST_TYPE_H           (315),
		.IN_PKT_BURST_TYPE_L           (314),
		.IN_PKT_ORI_BURST_SIZE_L       (334),
		.IN_PKT_ORI_BURST_SIZE_H       (336),
		.IN_ST_DATA_W                  (337),
		.OUT_PKT_ADDR_H                (81),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (93),
		.OUT_PKT_BYTE_CNT_L            (88),
		.OUT_PKT_TRANS_COMPRESSED_READ (82),
		.OUT_PKT_BURST_SIZE_H          (97),
		.OUT_PKT_BURST_SIZE_L          (95),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (87),
		.OUT_PKT_BURST_TYPE_H          (99),
		.OUT_PKT_BURST_TYPE_L          (98),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_ST_DATA_W                 (121),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_dma_descriptor_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                            //       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_002_src_valid),                                   //      sink.valid
		.in_channel           (router_002_src_channel),                                 //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                             //          .endofpacket
		.in_ready             (router_002_src_ready),                                   //          .ready
		.in_data              (router_002_src_data),                                    //          .data
		.out_endofpacket      (dma_dma_descriptor_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dma_descriptor_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_dma_descriptor_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dma_descriptor_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dma_descriptor_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dma_descriptor_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (45),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (52),
		.IN_PKT_TRANS_COMPRESSED_READ  (46),
		.IN_PKT_TRANS_WRITE            (48),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (81),
		.IN_PKT_RESPONSE_STATUS_L      (80),
		.IN_PKT_TRANS_EXCLUSIVE        (51),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (82),
		.IN_PKT_ORI_BURST_SIZE_H       (84),
		.IN_ST_DATA_W                  (85),
		.OUT_PKT_ADDR_H                (81),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (93),
		.OUT_PKT_BYTE_CNT_L            (88),
		.OUT_PKT_TRANS_COMPRESSED_READ (82),
		.OUT_PKT_BURST_SIZE_H          (97),
		.OUT_PKT_BURST_SIZE_L          (95),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (87),
		.OUT_PKT_BURST_TYPE_H          (99),
		.OUT_PKT_BURST_TYPE_L          (98),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_ST_DATA_W                 (121),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_dma_csr_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                     //       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (router_003_src_valid),                            //      sink.valid
		.in_channel           (router_003_src_channel),                          //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                      //          .endofpacket
		.in_ready             (router_003_src_ready),                            //          .ready
		.in_data              (router_003_src_data),                             //          .data
		.out_endofpacket      (dma_dma_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dma_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_dma_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dma_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dma_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dma_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (81),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (93),
		.IN_PKT_BYTE_CNT_L             (88),
		.IN_PKT_TRANS_COMPRESSED_READ  (82),
		.IN_PKT_TRANS_WRITE            (84),
		.IN_PKT_BURSTWRAP_H            (94),
		.IN_PKT_BURSTWRAP_L            (94),
		.IN_PKT_BURST_SIZE_H           (97),
		.IN_PKT_BURST_SIZE_L           (95),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (87),
		.IN_PKT_BURST_TYPE_H           (99),
		.IN_PKT_BURST_TYPE_L           (98),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_ST_DATA_W                  (121),
		.OUT_PKT_ADDR_H                (45),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (52),
		.OUT_PKT_TRANS_COMPRESSED_READ (46),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (81),
		.OUT_PKT_RESPONSE_STATUS_L     (80),
		.OUT_PKT_TRANS_EXCLUSIVE       (51),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (82),
		.OUT_PKT_ORI_BURST_SIZE_H      (84),
		.OUT_ST_DATA_W                 (85),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_dma_csr_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                     //       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                           //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                         //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                     //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                           //          .ready
		.in_data              (cmd_mux_002_src_data),                            //          .data
		.out_endofpacket      (dma_dma_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dma_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_dma_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dma_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dma_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dma_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter_003 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (csr_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (address_span_extender_0_cntl_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (address_span_extender_0_cntl_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (address_span_extender_0_cntl_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //         .error
	);

	system_acl_iface_dma_0_mm_interconnect_2_avalon_st_adapter_001 #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (csr_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dma_dma_descriptor_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_dma_descriptor_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_dma_descriptor_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)              //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (csr_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dma_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)       //         .error
	);

endmodule
