// system_acl_iface_em_pc_0.v

// This file was auto-generated from altera_core_em_pc_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module system_acl_iface_em_pc_0 #(
		parameter EMPC_AV_BURSTCOUNT_WIDTH = 1,
		parameter EMPC_AV_DATA_WIDTH       = 512,
		parameter EMPC_AV_POW2_DATA_WIDTH  = 512,
		parameter EMPC_AV_ADDRESS_WIDTH    = 25,
		parameter EMPC_AV_SYMBOL_WIDTH     = 8,
		parameter EMPC_COUNT_WIDTH         = 32
	) (
		input  wire [24:0]  avl_in_address,             //      avl_in.address
		input  wire [63:0]  avl_in_byteenable,          //            .byteenable
		input  wire         avl_in_burstcount,          //            .burstcount
		input  wire         avl_in_beginbursttransfer,  //            .beginbursttransfer
		output wire         avl_in_waitrequest,         //            .waitrequest
		input  wire         avl_in_write,               //            .write
		input  wire         avl_in_read,                //            .read
		output wire         avl_in_readdatavalid,       //            .readdatavalid
		input  wire [511:0] avl_in_writedata,           //            .writedata
		output wire [511:0] avl_in_readdata,            //            .readdata
		output wire [30:0]  avl_out_address,            //     avl_out.address
		output wire [63:0]  avl_out_byteenable,         //            .byteenable
		output wire         avl_out_burstcount,         //            .burstcount
		output wire         avl_out_beginbursttransfer, //            .beginbursttransfer
		input  wire         avl_out_waitrequest,        //            .waitrequest
		output wire         avl_out_write,              //            .write
		output wire         avl_out_read,               //            .read
		input  wire         avl_out_readdatavalid,      //            .readdatavalid
		output wire [511:0] avl_out_writedata,          //            .writedata
		input  wire [511:0] avl_out_readdata,           //            .readdata
		input  wire         avl_clk,                    //     avl_clk.clk
		input  wire         avl_reset_n,                // avl_reset_n.reset_n
		output wire         em_csr_waitrequest,         //      em_csr.waitrequest
		output wire [31:0]  em_csr_readdata,            //            .readdata
		output wire         em_csr_readdatavalid,       //            .readdatavalid
		input  wire [0:0]   em_csr_burstcount,          //            .burstcount
		input  wire [31:0]  em_csr_writedata,           //            .writedata
		input  wire [13:0]  em_csr_address,             //            .address
		input  wire         em_csr_write,               //            .write
		input  wire         em_csr_read,                //            .read
		input  wire [3:0]   em_csr_byteenable,          //            .byteenable
		input  wire         em_csr_debugaccess          //            .debugaccess
	);

	wire         bridge_0_m0_waitrequest;                          // mm_interconnect_0:bridge_0_m0_waitrequest -> bridge_0:m0_waitrequest
	wire  [31:0] bridge_0_m0_readdata;                             // mm_interconnect_0:bridge_0_m0_readdata -> bridge_0:m0_readdata
	wire         bridge_0_m0_debugaccess;                          // bridge_0:m0_debugaccess -> mm_interconnect_0:bridge_0_m0_debugaccess
	wire  [13:0] bridge_0_m0_address;                              // bridge_0:m0_address -> mm_interconnect_0:bridge_0_m0_address
	wire         bridge_0_m0_read;                                 // bridge_0:m0_read -> mm_interconnect_0:bridge_0_m0_read
	wire   [3:0] bridge_0_m0_byteenable;                           // bridge_0:m0_byteenable -> mm_interconnect_0:bridge_0_m0_byteenable
	wire         bridge_0_m0_readdatavalid;                        // mm_interconnect_0:bridge_0_m0_readdatavalid -> bridge_0:m0_readdatavalid
	wire  [31:0] bridge_0_m0_writedata;                            // bridge_0:m0_writedata -> mm_interconnect_0:bridge_0_m0_writedata
	wire         bridge_0_m0_write;                                // bridge_0:m0_write -> mm_interconnect_0:bridge_0_m0_write
	wire   [0:0] bridge_0_m0_burstcount;                           // bridge_0:m0_burstcount -> mm_interconnect_0:bridge_0_m0_burstcount
	wire  [31:0] mm_interconnect_0_em_pc_core_0_csr_readdata;      // em_pc_core_0:csr_rdata_0 -> mm_interconnect_0:em_pc_core_0_csr_readdata
	wire         mm_interconnect_0_em_pc_core_0_csr_waitrequest;   // em_pc_core_0:csr_waitrequest_0 -> mm_interconnect_0:em_pc_core_0_csr_waitrequest
	wire  [11:0] mm_interconnect_0_em_pc_core_0_csr_address;       // mm_interconnect_0:em_pc_core_0_csr_address -> em_pc_core_0:csr_addr_0
	wire         mm_interconnect_0_em_pc_core_0_csr_read;          // mm_interconnect_0:em_pc_core_0_csr_read -> em_pc_core_0:csr_read_req_0
	wire   [3:0] mm_interconnect_0_em_pc_core_0_csr_byteenable;    // mm_interconnect_0:em_pc_core_0_csr_byteenable -> em_pc_core_0:csr_be_0
	wire         mm_interconnect_0_em_pc_core_0_csr_readdatavalid; // em_pc_core_0:csr_rdata_valid_0 -> mm_interconnect_0:em_pc_core_0_csr_readdatavalid
	wire         mm_interconnect_0_em_pc_core_0_csr_write;         // mm_interconnect_0:em_pc_core_0_csr_write -> em_pc_core_0:csr_write_req_0
	wire  [31:0] mm_interconnect_0_em_pc_core_0_csr_writedata;     // mm_interconnect_0:em_pc_core_0_csr_writedata -> em_pc_core_0:csr_wdata_0
	wire         rst_controller_reset_out_reset;                   // rst_controller:reset_out -> [bridge_0:reset, mm_interconnect_0:bridge_0_reset_reset_bridge_in_reset_reset, mm_interconnect_0:em_pc_core_0_reset_sink_reset_bridge_in_reset_reset]

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (EMPC_AV_BURSTCOUNT_WIDTH != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_av_burstcount_width_check ( .error(1'b1) );
		end
		if (EMPC_AV_DATA_WIDTH != 512)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_av_data_width_check ( .error(1'b1) );
		end
		if (EMPC_AV_POW2_DATA_WIDTH != 512)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_av_pow2_data_width_check ( .error(1'b1) );
		end
		if (EMPC_AV_ADDRESS_WIDTH != 25)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_av_address_width_check ( .error(1'b1) );
		end
		if (EMPC_AV_SYMBOL_WIDTH != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_av_symbol_width_check ( .error(1'b1) );
		end
		if (EMPC_COUNT_WIDTH != 32)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					empc_count_width_check ( .error(1'b1) );
		end
	endgenerate

	em_top_ms #(
		.EMPC_AV_BURSTCOUNT_WIDTH (1),
		.EMPC_AV_DATA_WIDTH       (512),
		.EMPC_AV_POW2_DATA_WIDTH  (512),
		.EMPC_AVM_ADDRESS_WIDTH   (25),
		.EMPC_AVS_ADDRESS_WIDTH   (31),
		.EMPC_AV_BE_WIDTH         (64),
		.EMPC_AV_POW2_BE_WIDTH    (64),
		.EMPC_COUNT_WIDTH         (32),
		.EMPC_CSR_ADDR_WIDTH      (12),
		.EMPC_CSR_DATA_WIDTH      (32),
		.EMPC_VERSION             (161),
		.EMPC_LEGACY_VERSION      (1)
	) em_pc_core_0 (
		.avm_clk                  (avl_clk),                                          //                   avalon_clk.clk
		.ctl_reset_n              (avl_reset_n),                                      //                   reset_sink.reset_n
		.avm_address_0            (avl_in_address),                                   //               avalon_slave_0.address
		.avm_be_0                 (avl_in_byteenable),                                //                             .byteenable
		.avm_burstcount_0         (avl_in_burstcount),                                //                             .burstcount
		.avm_beginbursttransfer_0 (avl_in_beginbursttransfer),                        //                             .beginbursttransfer
		.avm_waitrequest_0        (avl_in_waitrequest),                               //                             .waitrequest
		.avm_write_0              (avl_in_write),                                     //                             .write
		.avm_read_0               (avl_in_read),                                      //                             .read
		.avm_readvalid_0          (avl_in_readdatavalid),                             //                             .readdatavalid
		.avm_wdata_0              (avl_in_writedata),                                 //                             .writedata
		.avm_rdata_0              (avl_in_readdata),                                  //                             .readdata
		.avs_address_0            (avl_out_address),                                  //              avalon_master_0.address
		.avs_be_0                 (avl_out_byteenable),                               //                             .byteenable
		.avs_burstcount_0         (avl_out_burstcount),                               //                             .burstcount
		.avs_beginbursttransfer_0 (avl_out_beginbursttransfer),                       //                             .beginbursttransfer
		.avs_waitrequest_0        (avl_out_waitrequest),                              //                             .waitrequest
		.avs_write_0              (avl_out_write),                                    //                             .write
		.avs_read_0               (avl_out_read),                                     //                             .read
		.avs_readvalid_0          (avl_out_readdatavalid),                            //                             .readdatavalid
		.avs_wdata_0              (avl_out_writedata),                                //                             .writedata
		.avs_rdata_0              (avl_out_readdata),                                 //                             .readdata
		.csr_addr_0               (mm_interconnect_0_em_pc_core_0_csr_address),       //                          csr.address
		.csr_be_0                 (mm_interconnect_0_em_pc_core_0_csr_byteenable),    //                             .byteenable
		.csr_write_req_0          (mm_interconnect_0_em_pc_core_0_csr_write),         //                             .write
		.csr_wdata_0              (mm_interconnect_0_em_pc_core_0_csr_writedata),     //                             .writedata
		.csr_read_req_0           (mm_interconnect_0_em_pc_core_0_csr_read),          //                             .read
		.csr_rdata_0              (mm_interconnect_0_em_pc_core_0_csr_readdata),      //                             .readdata
		.csr_rdata_valid_0        (mm_interconnect_0_em_pc_core_0_csr_readdatavalid), //                             .readdatavalid
		.csr_waitrequest_0        (mm_interconnect_0_em_pc_core_0_csr_waitrequest),   //                             .waitrequest
		.local_cal_fail_in        (),                                                 // effmon_status_in_conduit_end.local_cal_fail
		.local_cal_success        (),                                                 //           status_conduit_end.local_cal_success
		.local_cal_fail           (),                                                 //                             .local_cal_fail
		.local_cal_success_in     (1'b1)                                              //                  (terminated)
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (14),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1)
	) bridge_0 (
		.clk              (avl_clk),                        //   clk.clk
		.reset            (rst_controller_reset_out_reset), // reset.reset
		.s0_waitrequest   (em_csr_waitrequest),             //    s0.waitrequest
		.s0_readdata      (em_csr_readdata),                //      .readdata
		.s0_readdatavalid (em_csr_readdatavalid),           //      .readdatavalid
		.s0_burstcount    (em_csr_burstcount),              //      .burstcount
		.s0_writedata     (em_csr_writedata),               //      .writedata
		.s0_address       (em_csr_address),                 //      .address
		.s0_write         (em_csr_write),                   //      .write
		.s0_read          (em_csr_read),                    //      .read
		.s0_byteenable    (em_csr_byteenable),              //      .byteenable
		.s0_debugaccess   (em_csr_debugaccess),             //      .debugaccess
		.m0_waitrequest   (bridge_0_m0_waitrequest),        //    m0.waitrequest
		.m0_readdata      (bridge_0_m0_readdata),           //      .readdata
		.m0_readdatavalid (bridge_0_m0_readdatavalid),      //      .readdatavalid
		.m0_burstcount    (bridge_0_m0_burstcount),         //      .burstcount
		.m0_writedata     (bridge_0_m0_writedata),          //      .writedata
		.m0_address       (bridge_0_m0_address),            //      .address
		.m0_write         (bridge_0_m0_write),              //      .write
		.m0_read          (bridge_0_m0_read),               //      .read
		.m0_byteenable    (bridge_0_m0_byteenable),         //      .byteenable
		.m0_debugaccess   (bridge_0_m0_debugaccess),        //      .debugaccess
		.s0_response      (),                               // (terminated)
		.m0_response      (2'b00)                           // (terminated)
	);

	system_acl_iface_em_pc_0_mm_interconnect_0 mm_interconnect_0 (
		.avl_clk_out_clk_clk                                 (avl_clk),                                          //                               avl_clk_out_clk.clk
		.bridge_0_reset_reset_bridge_in_reset_reset          (rst_controller_reset_out_reset),                   //          bridge_0_reset_reset_bridge_in_reset.reset
		.em_pc_core_0_reset_sink_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                   // em_pc_core_0_reset_sink_reset_bridge_in_reset.reset
		.bridge_0_m0_address                                 (bridge_0_m0_address),                              //                                   bridge_0_m0.address
		.bridge_0_m0_waitrequest                             (bridge_0_m0_waitrequest),                          //                                              .waitrequest
		.bridge_0_m0_burstcount                              (bridge_0_m0_burstcount),                           //                                              .burstcount
		.bridge_0_m0_byteenable                              (bridge_0_m0_byteenable),                           //                                              .byteenable
		.bridge_0_m0_read                                    (bridge_0_m0_read),                                 //                                              .read
		.bridge_0_m0_readdata                                (bridge_0_m0_readdata),                             //                                              .readdata
		.bridge_0_m0_readdatavalid                           (bridge_0_m0_readdatavalid),                        //                                              .readdatavalid
		.bridge_0_m0_write                                   (bridge_0_m0_write),                                //                                              .write
		.bridge_0_m0_writedata                               (bridge_0_m0_writedata),                            //                                              .writedata
		.bridge_0_m0_debugaccess                             (bridge_0_m0_debugaccess),                          //                                              .debugaccess
		.em_pc_core_0_csr_address                            (mm_interconnect_0_em_pc_core_0_csr_address),       //                              em_pc_core_0_csr.address
		.em_pc_core_0_csr_write                              (mm_interconnect_0_em_pc_core_0_csr_write),         //                                              .write
		.em_pc_core_0_csr_read                               (mm_interconnect_0_em_pc_core_0_csr_read),          //                                              .read
		.em_pc_core_0_csr_readdata                           (mm_interconnect_0_em_pc_core_0_csr_readdata),      //                                              .readdata
		.em_pc_core_0_csr_writedata                          (mm_interconnect_0_em_pc_core_0_csr_writedata),     //                                              .writedata
		.em_pc_core_0_csr_byteenable                         (mm_interconnect_0_em_pc_core_0_csr_byteenable),    //                                              .byteenable
		.em_pc_core_0_csr_readdatavalid                      (mm_interconnect_0_em_pc_core_0_csr_readdatavalid), //                                              .readdatavalid
		.em_pc_core_0_csr_waitrequest                        (mm_interconnect_0_em_pc_core_0_csr_waitrequest)    //                                              .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~avl_reset_n),                   // reset_in0.reset
		.clk            (avl_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
