// system_acl_iface_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module system_acl_iface_mm_interconnect_3 (
		input  wire         ddr3a_afi_clk_clk,                                            //                                          ddr3a_afi_clk.clk
		input  wire         clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset, // clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset.reset
		input  wire         dma_0_reset_reset_bridge_in_reset_reset,                      //                      dma_0_reset_reset_bridge_in_reset.reset
		input  wire [33:0]  dma_0_m_address,                                              //                                                dma_0_m.address
		output wire         dma_0_m_waitrequest,                                          //                                                       .waitrequest
		input  wire [4:0]   dma_0_m_burstcount,                                           //                                                       .burstcount
		input  wire [63:0]  dma_0_m_byteenable,                                           //                                                       .byteenable
		input  wire         dma_0_m_read,                                                 //                                                       .read
		output wire [511:0] dma_0_m_readdata,                                             //                                                       .readdata
		output wire         dma_0_m_readdatavalid,                                        //                                                       .readdatavalid
		input  wire         dma_0_m_write,                                                //                                                       .write
		input  wire [511:0] dma_0_m_writedata,                                            //                                                       .writedata
		input  wire         dma_0_m_debugaccess,                                          //                                                       .debugaccess
		output wire [25:0]  acl_memory_bank_divider_0_s_address,                          //                            acl_memory_bank_divider_0_s.address
		output wire         acl_memory_bank_divider_0_s_write,                            //                                                       .write
		output wire         acl_memory_bank_divider_0_s_read,                             //                                                       .read
		input  wire [511:0] acl_memory_bank_divider_0_s_readdata,                         //                                                       .readdata
		output wire [511:0] acl_memory_bank_divider_0_s_writedata,                        //                                                       .writedata
		output wire         acl_memory_bank_divider_0_s_beginbursttransfer,               //                                                       .beginbursttransfer
		output wire [4:0]   acl_memory_bank_divider_0_s_burstcount,                       //                                                       .burstcount
		output wire [63:0]  acl_memory_bank_divider_0_s_byteenable,                       //                                                       .byteenable
		input  wire         acl_memory_bank_divider_0_s_readdatavalid,                    //                                                       .readdatavalid
		input  wire         acl_memory_bank_divider_0_s_waitrequest,                      //                                                       .waitrequest
		output wire [19:0]  clock_cross_dma_to_pcie_s0_address,                           //                             clock_cross_dma_to_pcie_s0.address
		output wire         clock_cross_dma_to_pcie_s0_write,                             //                                                       .write
		output wire         clock_cross_dma_to_pcie_s0_read,                              //                                                       .read
		input  wire [511:0] clock_cross_dma_to_pcie_s0_readdata,                          //                                                       .readdata
		output wire [511:0] clock_cross_dma_to_pcie_s0_writedata,                         //                                                       .writedata
		output wire [4:0]   clock_cross_dma_to_pcie_s0_burstcount,                        //                                                       .burstcount
		output wire [63:0]  clock_cross_dma_to_pcie_s0_byteenable,                        //                                                       .byteenable
		input  wire         clock_cross_dma_to_pcie_s0_readdatavalid,                     //                                                       .readdatavalid
		input  wire         clock_cross_dma_to_pcie_s0_waitrequest,                       //                                                       .waitrequest
		output wire         clock_cross_dma_to_pcie_s0_debugaccess                        //                                                       .debugaccess
	);

	wire          dma_0_m_translator_avalon_universal_master_0_waitrequest;     // dma_0_m_agent:av_waitrequest -> dma_0_m_translator:uav_waitrequest
	wire  [511:0] dma_0_m_translator_avalon_universal_master_0_readdata;        // dma_0_m_agent:av_readdata -> dma_0_m_translator:uav_readdata
	wire          dma_0_m_translator_avalon_universal_master_0_debugaccess;     // dma_0_m_translator:uav_debugaccess -> dma_0_m_agent:av_debugaccess
	wire   [33:0] dma_0_m_translator_avalon_universal_master_0_address;         // dma_0_m_translator:uav_address -> dma_0_m_agent:av_address
	wire          dma_0_m_translator_avalon_universal_master_0_read;            // dma_0_m_translator:uav_read -> dma_0_m_agent:av_read
	wire   [63:0] dma_0_m_translator_avalon_universal_master_0_byteenable;      // dma_0_m_translator:uav_byteenable -> dma_0_m_agent:av_byteenable
	wire          dma_0_m_translator_avalon_universal_master_0_readdatavalid;   // dma_0_m_agent:av_readdatavalid -> dma_0_m_translator:uav_readdatavalid
	wire          dma_0_m_translator_avalon_universal_master_0_lock;            // dma_0_m_translator:uav_lock -> dma_0_m_agent:av_lock
	wire          dma_0_m_translator_avalon_universal_master_0_write;           // dma_0_m_translator:uav_write -> dma_0_m_agent:av_write
	wire  [511:0] dma_0_m_translator_avalon_universal_master_0_writedata;       // dma_0_m_translator:uav_writedata -> dma_0_m_agent:av_writedata
	wire   [10:0] dma_0_m_translator_avalon_universal_master_0_burstcount;      // dma_0_m_translator:uav_burstcount -> dma_0_m_agent:av_burstcount
	wire  [511:0] clock_cross_dma_to_pcie_s0_agent_m0_readdata;                 // clock_cross_dma_to_pcie_s0_translator:uav_readdata -> clock_cross_dma_to_pcie_s0_agent:m0_readdata
	wire          clock_cross_dma_to_pcie_s0_agent_m0_waitrequest;              // clock_cross_dma_to_pcie_s0_translator:uav_waitrequest -> clock_cross_dma_to_pcie_s0_agent:m0_waitrequest
	wire          clock_cross_dma_to_pcie_s0_agent_m0_debugaccess;              // clock_cross_dma_to_pcie_s0_agent:m0_debugaccess -> clock_cross_dma_to_pcie_s0_translator:uav_debugaccess
	wire   [33:0] clock_cross_dma_to_pcie_s0_agent_m0_address;                  // clock_cross_dma_to_pcie_s0_agent:m0_address -> clock_cross_dma_to_pcie_s0_translator:uav_address
	wire   [63:0] clock_cross_dma_to_pcie_s0_agent_m0_byteenable;               // clock_cross_dma_to_pcie_s0_agent:m0_byteenable -> clock_cross_dma_to_pcie_s0_translator:uav_byteenable
	wire          clock_cross_dma_to_pcie_s0_agent_m0_read;                     // clock_cross_dma_to_pcie_s0_agent:m0_read -> clock_cross_dma_to_pcie_s0_translator:uav_read
	wire          clock_cross_dma_to_pcie_s0_agent_m0_readdatavalid;            // clock_cross_dma_to_pcie_s0_translator:uav_readdatavalid -> clock_cross_dma_to_pcie_s0_agent:m0_readdatavalid
	wire          clock_cross_dma_to_pcie_s0_agent_m0_lock;                     // clock_cross_dma_to_pcie_s0_agent:m0_lock -> clock_cross_dma_to_pcie_s0_translator:uav_lock
	wire  [511:0] clock_cross_dma_to_pcie_s0_agent_m0_writedata;                // clock_cross_dma_to_pcie_s0_agent:m0_writedata -> clock_cross_dma_to_pcie_s0_translator:uav_writedata
	wire          clock_cross_dma_to_pcie_s0_agent_m0_write;                    // clock_cross_dma_to_pcie_s0_agent:m0_write -> clock_cross_dma_to_pcie_s0_translator:uav_write
	wire   [10:0] clock_cross_dma_to_pcie_s0_agent_m0_burstcount;               // clock_cross_dma_to_pcie_s0_agent:m0_burstcount -> clock_cross_dma_to_pcie_s0_translator:uav_burstcount
	wire          clock_cross_dma_to_pcie_s0_agent_rf_source_valid;             // clock_cross_dma_to_pcie_s0_agent:rf_source_valid -> clock_cross_dma_to_pcie_s0_agent_rsp_fifo:in_valid
	wire  [652:0] clock_cross_dma_to_pcie_s0_agent_rf_source_data;              // clock_cross_dma_to_pcie_s0_agent:rf_source_data -> clock_cross_dma_to_pcie_s0_agent_rsp_fifo:in_data
	wire          clock_cross_dma_to_pcie_s0_agent_rf_source_ready;             // clock_cross_dma_to_pcie_s0_agent_rsp_fifo:in_ready -> clock_cross_dma_to_pcie_s0_agent:rf_source_ready
	wire          clock_cross_dma_to_pcie_s0_agent_rf_source_startofpacket;     // clock_cross_dma_to_pcie_s0_agent:rf_source_startofpacket -> clock_cross_dma_to_pcie_s0_agent_rsp_fifo:in_startofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rf_source_endofpacket;       // clock_cross_dma_to_pcie_s0_agent:rf_source_endofpacket -> clock_cross_dma_to_pcie_s0_agent_rsp_fifo:in_endofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_valid;          // clock_cross_dma_to_pcie_s0_agent_rsp_fifo:out_valid -> clock_cross_dma_to_pcie_s0_agent:rf_sink_valid
	wire  [652:0] clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_data;           // clock_cross_dma_to_pcie_s0_agent_rsp_fifo:out_data -> clock_cross_dma_to_pcie_s0_agent:rf_sink_data
	wire          clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_ready;          // clock_cross_dma_to_pcie_s0_agent:rf_sink_ready -> clock_cross_dma_to_pcie_s0_agent_rsp_fifo:out_ready
	wire          clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_startofpacket;  // clock_cross_dma_to_pcie_s0_agent_rsp_fifo:out_startofpacket -> clock_cross_dma_to_pcie_s0_agent:rf_sink_startofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_endofpacket;    // clock_cross_dma_to_pcie_s0_agent_rsp_fifo:out_endofpacket -> clock_cross_dma_to_pcie_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                            // cmd_mux:src_valid -> clock_cross_dma_to_pcie_s0_agent:cp_valid
	wire  [651:0] cmd_mux_src_data;                                             // cmd_mux:src_data -> clock_cross_dma_to_pcie_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                            // clock_cross_dma_to_pcie_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                          // cmd_mux:src_channel -> clock_cross_dma_to_pcie_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                    // cmd_mux:src_startofpacket -> clock_cross_dma_to_pcie_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                      // cmd_mux:src_endofpacket -> clock_cross_dma_to_pcie_s0_agent:cp_endofpacket
	wire  [511:0] acl_memory_bank_divider_0_s_agent_m0_readdata;                // acl_memory_bank_divider_0_s_translator:uav_readdata -> acl_memory_bank_divider_0_s_agent:m0_readdata
	wire          acl_memory_bank_divider_0_s_agent_m0_waitrequest;             // acl_memory_bank_divider_0_s_translator:uav_waitrequest -> acl_memory_bank_divider_0_s_agent:m0_waitrequest
	wire          acl_memory_bank_divider_0_s_agent_m0_debugaccess;             // acl_memory_bank_divider_0_s_agent:m0_debugaccess -> acl_memory_bank_divider_0_s_translator:uav_debugaccess
	wire   [33:0] acl_memory_bank_divider_0_s_agent_m0_address;                 // acl_memory_bank_divider_0_s_agent:m0_address -> acl_memory_bank_divider_0_s_translator:uav_address
	wire   [63:0] acl_memory_bank_divider_0_s_agent_m0_byteenable;              // acl_memory_bank_divider_0_s_agent:m0_byteenable -> acl_memory_bank_divider_0_s_translator:uav_byteenable
	wire          acl_memory_bank_divider_0_s_agent_m0_read;                    // acl_memory_bank_divider_0_s_agent:m0_read -> acl_memory_bank_divider_0_s_translator:uav_read
	wire          acl_memory_bank_divider_0_s_agent_m0_readdatavalid;           // acl_memory_bank_divider_0_s_translator:uav_readdatavalid -> acl_memory_bank_divider_0_s_agent:m0_readdatavalid
	wire          acl_memory_bank_divider_0_s_agent_m0_lock;                    // acl_memory_bank_divider_0_s_agent:m0_lock -> acl_memory_bank_divider_0_s_translator:uav_lock
	wire  [511:0] acl_memory_bank_divider_0_s_agent_m0_writedata;               // acl_memory_bank_divider_0_s_agent:m0_writedata -> acl_memory_bank_divider_0_s_translator:uav_writedata
	wire          acl_memory_bank_divider_0_s_agent_m0_write;                   // acl_memory_bank_divider_0_s_agent:m0_write -> acl_memory_bank_divider_0_s_translator:uav_write
	wire   [10:0] acl_memory_bank_divider_0_s_agent_m0_burstcount;              // acl_memory_bank_divider_0_s_agent:m0_burstcount -> acl_memory_bank_divider_0_s_translator:uav_burstcount
	wire          acl_memory_bank_divider_0_s_agent_rf_source_valid;            // acl_memory_bank_divider_0_s_agent:rf_source_valid -> acl_memory_bank_divider_0_s_agent_rsp_fifo:in_valid
	wire  [652:0] acl_memory_bank_divider_0_s_agent_rf_source_data;             // acl_memory_bank_divider_0_s_agent:rf_source_data -> acl_memory_bank_divider_0_s_agent_rsp_fifo:in_data
	wire          acl_memory_bank_divider_0_s_agent_rf_source_ready;            // acl_memory_bank_divider_0_s_agent_rsp_fifo:in_ready -> acl_memory_bank_divider_0_s_agent:rf_source_ready
	wire          acl_memory_bank_divider_0_s_agent_rf_source_startofpacket;    // acl_memory_bank_divider_0_s_agent:rf_source_startofpacket -> acl_memory_bank_divider_0_s_agent_rsp_fifo:in_startofpacket
	wire          acl_memory_bank_divider_0_s_agent_rf_source_endofpacket;      // acl_memory_bank_divider_0_s_agent:rf_source_endofpacket -> acl_memory_bank_divider_0_s_agent_rsp_fifo:in_endofpacket
	wire          acl_memory_bank_divider_0_s_agent_rsp_fifo_out_valid;         // acl_memory_bank_divider_0_s_agent_rsp_fifo:out_valid -> acl_memory_bank_divider_0_s_agent:rf_sink_valid
	wire  [652:0] acl_memory_bank_divider_0_s_agent_rsp_fifo_out_data;          // acl_memory_bank_divider_0_s_agent_rsp_fifo:out_data -> acl_memory_bank_divider_0_s_agent:rf_sink_data
	wire          acl_memory_bank_divider_0_s_agent_rsp_fifo_out_ready;         // acl_memory_bank_divider_0_s_agent:rf_sink_ready -> acl_memory_bank_divider_0_s_agent_rsp_fifo:out_ready
	wire          acl_memory_bank_divider_0_s_agent_rsp_fifo_out_startofpacket; // acl_memory_bank_divider_0_s_agent_rsp_fifo:out_startofpacket -> acl_memory_bank_divider_0_s_agent:rf_sink_startofpacket
	wire          acl_memory_bank_divider_0_s_agent_rsp_fifo_out_endofpacket;   // acl_memory_bank_divider_0_s_agent_rsp_fifo:out_endofpacket -> acl_memory_bank_divider_0_s_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                        // cmd_mux_001:src_valid -> acl_memory_bank_divider_0_s_agent:cp_valid
	wire  [651:0] cmd_mux_001_src_data;                                         // cmd_mux_001:src_data -> acl_memory_bank_divider_0_s_agent:cp_data
	wire          cmd_mux_001_src_ready;                                        // acl_memory_bank_divider_0_s_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                      // cmd_mux_001:src_channel -> acl_memory_bank_divider_0_s_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                // cmd_mux_001:src_startofpacket -> acl_memory_bank_divider_0_s_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                  // cmd_mux_001:src_endofpacket -> acl_memory_bank_divider_0_s_agent:cp_endofpacket
	wire          dma_0_m_agent_cp_valid;                                       // dma_0_m_agent:cp_valid -> router:sink_valid
	wire  [651:0] dma_0_m_agent_cp_data;                                        // dma_0_m_agent:cp_data -> router:sink_data
	wire          dma_0_m_agent_cp_ready;                                       // router:sink_ready -> dma_0_m_agent:cp_ready
	wire          dma_0_m_agent_cp_startofpacket;                               // dma_0_m_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_0_m_agent_cp_endofpacket;                                 // dma_0_m_agent:cp_endofpacket -> router:sink_endofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rp_valid;                    // clock_cross_dma_to_pcie_s0_agent:rp_valid -> router_001:sink_valid
	wire  [651:0] clock_cross_dma_to_pcie_s0_agent_rp_data;                     // clock_cross_dma_to_pcie_s0_agent:rp_data -> router_001:sink_data
	wire          clock_cross_dma_to_pcie_s0_agent_rp_ready;                    // router_001:sink_ready -> clock_cross_dma_to_pcie_s0_agent:rp_ready
	wire          clock_cross_dma_to_pcie_s0_agent_rp_startofpacket;            // clock_cross_dma_to_pcie_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rp_endofpacket;              // clock_cross_dma_to_pcie_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                         // router_001:src_valid -> rsp_demux:sink_valid
	wire  [651:0] router_001_src_data;                                          // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                         // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                       // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                 // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                   // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          acl_memory_bank_divider_0_s_agent_rp_valid;                   // acl_memory_bank_divider_0_s_agent:rp_valid -> router_002:sink_valid
	wire  [651:0] acl_memory_bank_divider_0_s_agent_rp_data;                    // acl_memory_bank_divider_0_s_agent:rp_data -> router_002:sink_data
	wire          acl_memory_bank_divider_0_s_agent_rp_ready;                   // router_002:sink_ready -> acl_memory_bank_divider_0_s_agent:rp_ready
	wire          acl_memory_bank_divider_0_s_agent_rp_startofpacket;           // acl_memory_bank_divider_0_s_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          acl_memory_bank_divider_0_s_agent_rp_endofpacket;             // acl_memory_bank_divider_0_s_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                         // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [651:0] router_002_src_data;                                          // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                         // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                       // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                 // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                   // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                             // router:src_valid -> dma_0_m_limiter:cmd_sink_valid
	wire  [651:0] router_src_data;                                              // router:src_data -> dma_0_m_limiter:cmd_sink_data
	wire          router_src_ready;                                             // dma_0_m_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                           // router:src_channel -> dma_0_m_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                     // router:src_startofpacket -> dma_0_m_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                       // router:src_endofpacket -> dma_0_m_limiter:cmd_sink_endofpacket
	wire          dma_0_m_limiter_rsp_src_valid;                                // dma_0_m_limiter:rsp_src_valid -> dma_0_m_agent:rp_valid
	wire  [651:0] dma_0_m_limiter_rsp_src_data;                                 // dma_0_m_limiter:rsp_src_data -> dma_0_m_agent:rp_data
	wire          dma_0_m_limiter_rsp_src_ready;                                // dma_0_m_agent:rp_ready -> dma_0_m_limiter:rsp_src_ready
	wire    [1:0] dma_0_m_limiter_rsp_src_channel;                              // dma_0_m_limiter:rsp_src_channel -> dma_0_m_agent:rp_channel
	wire          dma_0_m_limiter_rsp_src_startofpacket;                        // dma_0_m_limiter:rsp_src_startofpacket -> dma_0_m_agent:rp_startofpacket
	wire          dma_0_m_limiter_rsp_src_endofpacket;                          // dma_0_m_limiter:rsp_src_endofpacket -> dma_0_m_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [651:0] cmd_demux_src0_data;                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [651:0] cmd_demux_src1_data;                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [651:0] rsp_demux_src0_data;                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [651:0] rsp_demux_001_src0_data;                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [0:0] dma_0_m_limiter_cmd_src_valid;                                // dma_0_m_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [651:0] dma_0_m_limiter_cmd_src_data;                                 // dma_0_m_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          dma_0_m_limiter_cmd_src_ready;                                // limiter_pipeline:in_ready -> dma_0_m_limiter:cmd_src_ready
	wire    [1:0] dma_0_m_limiter_cmd_src_channel;                              // dma_0_m_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          dma_0_m_limiter_cmd_src_startofpacket;                        // dma_0_m_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          dma_0_m_limiter_cmd_src_endofpacket;                          // dma_0_m_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                               // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [651:0] limiter_pipeline_source0_data;                                // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                               // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [1:0] limiter_pipeline_source0_channel;                             // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                       // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                         // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                            // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [651:0] rsp_mux_src_data;                                             // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                            // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                          // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                    // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                      // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                           // limiter_pipeline_001:out_valid -> dma_0_m_limiter:rsp_sink_valid
	wire  [651:0] limiter_pipeline_001_source0_data;                            // limiter_pipeline_001:out_data -> dma_0_m_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                           // dma_0_m_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [1:0] limiter_pipeline_001_source0_channel;                         // limiter_pipeline_001:out_channel -> dma_0_m_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                   // limiter_pipeline_001:out_startofpacket -> dma_0_m_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                     // limiter_pipeline_001:out_endofpacket -> dma_0_m_limiter:rsp_sink_endofpacket
	wire          clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_valid;        // clock_cross_dma_to_pcie_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [513:0] clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_data;         // clock_cross_dma_to_pcie_s0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_ready;        // avalon_st_adapter:in_0_ready -> clock_cross_dma_to_pcie_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                // avalon_st_adapter:out_0_valid -> clock_cross_dma_to_pcie_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_out_0_data;                                 // avalon_st_adapter:out_0_data -> clock_cross_dma_to_pcie_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                // clock_cross_dma_to_pcie_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                // avalon_st_adapter:out_0_error -> clock_cross_dma_to_pcie_s0_agent:rdata_fifo_sink_error
	wire          acl_memory_bank_divider_0_s_agent_rdata_fifo_src_valid;       // acl_memory_bank_divider_0_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [513:0] acl_memory_bank_divider_0_s_agent_rdata_fifo_src_data;        // acl_memory_bank_divider_0_s_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          acl_memory_bank_divider_0_s_agent_rdata_fifo_src_ready;       // avalon_st_adapter_001:in_0_ready -> acl_memory_bank_divider_0_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                            // avalon_st_adapter_001:out_0_valid -> acl_memory_bank_divider_0_s_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_001_out_0_data;                             // avalon_st_adapter_001:out_0_data -> acl_memory_bank_divider_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                            // acl_memory_bank_divider_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                            // avalon_st_adapter_001:out_0_error -> acl_memory_bank_divider_0_s_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (34),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (34),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_m_translator (
		.clk                    (ddr3a_afi_clk_clk),                                          //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (dma_0_m_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_m_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_m_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_m_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_m_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_m_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_m_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_m_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_m_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_m_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_m_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_m_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_m_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_0_m_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_0_m_byteenable),                                         //                          .byteenable
		.av_read                (dma_0_m_read),                                               //                          .read
		.av_readdata            (dma_0_m_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_0_m_readdatavalid),                                      //                          .readdatavalid
		.av_write               (dma_0_m_write),                                              //                          .write
		.av_writedata           (dma_0_m_writedata),                                          //                          .writedata
		.av_debugaccess         (dma_0_m_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                       //               (terminated)
		.av_lock                (1'b0),                                                       //               (terminated)
		.uav_clken              (),                                                           //               (terminated)
		.av_clken               (1'b1),                                                       //               (terminated)
		.uav_response           (2'b00),                                                      //               (terminated)
		.av_response            (),                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_cross_dma_to_pcie_s0_translator (
		.clk                    (ddr3a_afi_clk_clk),                                            //                      clk.clk
		.reset                  (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (clock_cross_dma_to_pcie_s0_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (clock_cross_dma_to_pcie_s0_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (clock_cross_dma_to_pcie_s0_agent_m0_read),                     //                         .read
		.uav_write              (clock_cross_dma_to_pcie_s0_agent_m0_write),                    //                         .write
		.uav_waitrequest        (clock_cross_dma_to_pcie_s0_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (clock_cross_dma_to_pcie_s0_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (clock_cross_dma_to_pcie_s0_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (clock_cross_dma_to_pcie_s0_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (clock_cross_dma_to_pcie_s0_agent_m0_writedata),                //                         .writedata
		.uav_lock               (clock_cross_dma_to_pcie_s0_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (clock_cross_dma_to_pcie_s0_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (clock_cross_dma_to_pcie_s0_address),                           //      avalon_anti_slave_0.address
		.av_write               (clock_cross_dma_to_pcie_s0_write),                             //                         .write
		.av_read                (clock_cross_dma_to_pcie_s0_read),                              //                         .read
		.av_readdata            (clock_cross_dma_to_pcie_s0_readdata),                          //                         .readdata
		.av_writedata           (clock_cross_dma_to_pcie_s0_writedata),                         //                         .writedata
		.av_burstcount          (clock_cross_dma_to_pcie_s0_burstcount),                        //                         .burstcount
		.av_byteenable          (clock_cross_dma_to_pcie_s0_byteenable),                        //                         .byteenable
		.av_readdatavalid       (clock_cross_dma_to_pcie_s0_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (clock_cross_dma_to_pcie_s0_waitrequest),                       //                         .waitrequest
		.av_debugaccess         (clock_cross_dma_to_pcie_s0_debugaccess),                       //                         .debugaccess
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) acl_memory_bank_divider_0_s_translator (
		.clk                    (ddr3a_afi_clk_clk),                                  //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (acl_memory_bank_divider_0_s_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (acl_memory_bank_divider_0_s_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (acl_memory_bank_divider_0_s_agent_m0_read),          //                         .read
		.uav_write              (acl_memory_bank_divider_0_s_agent_m0_write),         //                         .write
		.uav_waitrequest        (acl_memory_bank_divider_0_s_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (acl_memory_bank_divider_0_s_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (acl_memory_bank_divider_0_s_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (acl_memory_bank_divider_0_s_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (acl_memory_bank_divider_0_s_agent_m0_writedata),     //                         .writedata
		.uav_lock               (acl_memory_bank_divider_0_s_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (acl_memory_bank_divider_0_s_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (acl_memory_bank_divider_0_s_address),                //      avalon_anti_slave_0.address
		.av_write               (acl_memory_bank_divider_0_s_write),                  //                         .write
		.av_read                (acl_memory_bank_divider_0_s_read),                   //                         .read
		.av_readdata            (acl_memory_bank_divider_0_s_readdata),               //                         .readdata
		.av_writedata           (acl_memory_bank_divider_0_s_writedata),              //                         .writedata
		.av_beginbursttransfer  (acl_memory_bank_divider_0_s_beginbursttransfer),     //                         .beginbursttransfer
		.av_burstcount          (acl_memory_bank_divider_0_s_burstcount),             //                         .burstcount
		.av_byteenable          (acl_memory_bank_divider_0_s_byteenable),             //                         .byteenable
		.av_readdatavalid       (acl_memory_bank_divider_0_s_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (acl_memory_bank_divider_0_s_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (651),
		.PKT_ORI_BURST_SIZE_L      (649),
		.PKT_RESPONSE_STATUS_H     (648),
		.PKT_RESPONSE_STATUS_L     (647),
		.PKT_QOS_H                 (636),
		.PKT_QOS_L                 (636),
		.PKT_DATA_SIDEBAND_H       (634),
		.PKT_DATA_SIDEBAND_L       (634),
		.PKT_ADDR_SIDEBAND_H       (633),
		.PKT_ADDR_SIDEBAND_L       (633),
		.PKT_BURST_TYPE_H          (632),
		.PKT_BURST_TYPE_L          (631),
		.PKT_CACHE_H               (646),
		.PKT_CACHE_L               (643),
		.PKT_THREAD_ID_H           (639),
		.PKT_THREAD_ID_L           (639),
		.PKT_BURST_SIZE_H          (630),
		.PKT_BURST_SIZE_L          (628),
		.PKT_TRANS_EXCLUSIVE       (615),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (635),
		.PKT_PROTECTION_H          (642),
		.PKT_PROTECTION_L          (640),
		.PKT_BURSTWRAP_H           (627),
		.PKT_BURSTWRAP_L           (627),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (637),
		.PKT_SRC_ID_L              (637),
		.PKT_DEST_ID_H             (638),
		.PKT_DEST_ID_L             (638),
		.ST_DATA_W                 (652),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_m_agent (
		.clk                   (ddr3a_afi_clk_clk),                                          //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (dma_0_m_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_m_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_m_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_m_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_m_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_m_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_m_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_m_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_m_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_m_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_m_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_m_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_m_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_m_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_m_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_m_agent_cp_ready),                                     //          .ready
		.rp_valid              (dma_0_m_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dma_0_m_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dma_0_m_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dma_0_m_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dma_0_m_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dma_0_m_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                           // (terminated)
		.av_writeresponsevalid ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (651),
		.PKT_ORI_BURST_SIZE_L      (649),
		.PKT_RESPONSE_STATUS_H     (648),
		.PKT_RESPONSE_STATUS_L     (647),
		.PKT_BURST_SIZE_H          (630),
		.PKT_BURST_SIZE_L          (628),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (635),
		.PKT_PROTECTION_H          (642),
		.PKT_PROTECTION_L          (640),
		.PKT_BURSTWRAP_H           (627),
		.PKT_BURSTWRAP_L           (627),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (637),
		.PKT_SRC_ID_L              (637),
		.PKT_DEST_ID_H             (638),
		.PKT_DEST_ID_L             (638),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (652),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clock_cross_dma_to_pcie_s0_agent (
		.clk                     (ddr3a_afi_clk_clk),                                            //             clk.clk
		.reset                   (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (clock_cross_dma_to_pcie_s0_agent_m0_address),                  //              m0.address
		.m0_burstcount           (clock_cross_dma_to_pcie_s0_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (clock_cross_dma_to_pcie_s0_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (clock_cross_dma_to_pcie_s0_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (clock_cross_dma_to_pcie_s0_agent_m0_lock),                     //                .lock
		.m0_readdata             (clock_cross_dma_to_pcie_s0_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (clock_cross_dma_to_pcie_s0_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (clock_cross_dma_to_pcie_s0_agent_m0_read),                     //                .read
		.m0_waitrequest          (clock_cross_dma_to_pcie_s0_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (clock_cross_dma_to_pcie_s0_agent_m0_writedata),                //                .writedata
		.m0_write                (clock_cross_dma_to_pcie_s0_agent_m0_write),                    //                .write
		.rp_endofpacket          (clock_cross_dma_to_pcie_s0_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (clock_cross_dma_to_pcie_s0_agent_rp_ready),                    //                .ready
		.rp_valid                (clock_cross_dma_to_pcie_s0_agent_rp_valid),                    //                .valid
		.rp_data                 (clock_cross_dma_to_pcie_s0_agent_rp_data),                     //                .data
		.rp_startofpacket        (clock_cross_dma_to_pcie_s0_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (clock_cross_dma_to_pcie_s0_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (clock_cross_dma_to_pcie_s0_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (clock_cross_dma_to_pcie_s0_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (clock_cross_dma_to_pcie_s0_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (clock_cross_dma_to_pcie_s0_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (653),
		.FIFO_DEPTH          (81),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_cross_dma_to_pcie_s0_agent_rsp_fifo (
		.clk               (ddr3a_afi_clk_clk),                                            //       clk.clk
		.reset             (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (clock_cross_dma_to_pcie_s0_agent_rf_source_data),              //        in.data
		.in_valid          (clock_cross_dma_to_pcie_s0_agent_rf_source_valid),             //          .valid
		.in_ready          (clock_cross_dma_to_pcie_s0_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (clock_cross_dma_to_pcie_s0_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (clock_cross_dma_to_pcie_s0_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (clock_cross_dma_to_pcie_s0_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (651),
		.PKT_ORI_BURST_SIZE_L      (649),
		.PKT_RESPONSE_STATUS_H     (648),
		.PKT_RESPONSE_STATUS_L     (647),
		.PKT_BURST_SIZE_H          (630),
		.PKT_BURST_SIZE_L          (628),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (635),
		.PKT_PROTECTION_H          (642),
		.PKT_PROTECTION_L          (640),
		.PKT_BURSTWRAP_H           (627),
		.PKT_BURSTWRAP_L           (627),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (637),
		.PKT_SRC_ID_L              (637),
		.PKT_DEST_ID_H             (638),
		.PKT_DEST_ID_L             (638),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (652),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) acl_memory_bank_divider_0_s_agent (
		.clk                     (ddr3a_afi_clk_clk),                                            //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (acl_memory_bank_divider_0_s_agent_m0_address),                 //              m0.address
		.m0_burstcount           (acl_memory_bank_divider_0_s_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (acl_memory_bank_divider_0_s_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (acl_memory_bank_divider_0_s_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (acl_memory_bank_divider_0_s_agent_m0_lock),                    //                .lock
		.m0_readdata             (acl_memory_bank_divider_0_s_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (acl_memory_bank_divider_0_s_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (acl_memory_bank_divider_0_s_agent_m0_read),                    //                .read
		.m0_waitrequest          (acl_memory_bank_divider_0_s_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (acl_memory_bank_divider_0_s_agent_m0_writedata),               //                .writedata
		.m0_write                (acl_memory_bank_divider_0_s_agent_m0_write),                   //                .write
		.rp_endofpacket          (acl_memory_bank_divider_0_s_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (acl_memory_bank_divider_0_s_agent_rp_ready),                   //                .ready
		.rp_valid                (acl_memory_bank_divider_0_s_agent_rp_valid),                   //                .valid
		.rp_data                 (acl_memory_bank_divider_0_s_agent_rp_data),                    //                .data
		.rp_startofpacket        (acl_memory_bank_divider_0_s_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (acl_memory_bank_divider_0_s_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (acl_memory_bank_divider_0_s_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (acl_memory_bank_divider_0_s_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (acl_memory_bank_divider_0_s_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (acl_memory_bank_divider_0_s_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (653),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acl_memory_bank_divider_0_s_agent_rsp_fifo (
		.clk               (ddr3a_afi_clk_clk),                                            //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (acl_memory_bank_divider_0_s_agent_rf_source_data),             //        in.data
		.in_valid          (acl_memory_bank_divider_0_s_agent_rf_source_valid),            //          .valid
		.in_ready          (acl_memory_bank_divider_0_s_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (acl_memory_bank_divider_0_s_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (acl_memory_bank_divider_0_s_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (acl_memory_bank_divider_0_s_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	system_acl_iface_mm_interconnect_3_router router (
		.sink_ready         (dma_0_m_agent_cp_ready),                  //      sink.ready
		.sink_valid         (dma_0_m_agent_cp_valid),                  //          .valid
		.sink_data          (dma_0_m_agent_cp_data),                   //          .data
		.sink_startofpacket (dma_0_m_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (dma_0_m_agent_cp_endofpacket),            //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                        //       src.ready
		.src_valid          (router_src_valid),                        //          .valid
		.src_data           (router_src_data),                         //          .data
		.src_channel        (router_src_channel),                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                   //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (clock_cross_dma_to_pcie_s0_agent_rp_ready),                    //      sink.ready
		.sink_valid         (clock_cross_dma_to_pcie_s0_agent_rp_valid),                    //          .valid
		.sink_data          (clock_cross_dma_to_pcie_s0_agent_rp_data),                     //          .data
		.sink_startofpacket (clock_cross_dma_to_pcie_s0_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (clock_cross_dma_to_pcie_s0_agent_rp_endofpacket),              //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                                            //       clk.clk
		.reset              (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //       src.ready
		.src_valid          (router_001_src_valid),                                         //          .valid
		.src_data           (router_001_src_data),                                          //          .data
		.src_channel        (router_001_src_channel),                                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (acl_memory_bank_divider_0_s_agent_rp_ready),         //      sink.ready
		.sink_valid         (acl_memory_bank_divider_0_s_agent_rp_valid),         //          .valid
		.sink_data          (acl_memory_bank_divider_0_s_agent_rp_data),          //          .data
		.sink_startofpacket (acl_memory_bank_divider_0_s_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (acl_memory_bank_divider_0_s_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                                  //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (638),
		.PKT_DEST_ID_L             (638),
		.PKT_SRC_ID_H              (637),
		.PKT_SRC_ID_L              (637),
		.PKT_BYTE_CNT_H            (626),
		.PKT_BYTE_CNT_L            (616),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.MAX_OUTSTANDING_RESPONSES (84),
		.PIPELINED                 (0),
		.ST_DATA_W                 (652),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_0_m_limiter (
		.clk                    (ddr3a_afi_clk_clk),                          //       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                           //          .valid
		.cmd_sink_data          (router_src_data),                            //          .data
		.cmd_sink_channel       (router_src_channel),                         //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (dma_0_m_limiter_cmd_src_ready),              //   cmd_src.ready
		.cmd_src_data           (dma_0_m_limiter_cmd_src_data),               //          .data
		.cmd_src_channel        (dma_0_m_limiter_cmd_src_channel),            //          .channel
		.cmd_src_startofpacket  (dma_0_m_limiter_cmd_src_startofpacket),      //          .startofpacket
		.cmd_src_endofpacket    (dma_0_m_limiter_cmd_src_endofpacket),        //          .endofpacket
		.cmd_src_valid          (dma_0_m_limiter_cmd_src_valid),              //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),         //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),          //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.rsp_src_ready          (dma_0_m_limiter_rsp_src_ready),              //   rsp_src.ready
		.rsp_src_valid          (dma_0_m_limiter_rsp_src_valid),              //          .valid
		.rsp_src_data           (dma_0_m_limiter_rsp_src_data),               //          .data
		.rsp_src_channel        (dma_0_m_limiter_rsp_src_channel),            //          .channel
		.rsp_src_startofpacket  (dma_0_m_limiter_rsp_src_startofpacket),      //          .startofpacket
		.rsp_src_endofpacket    (dma_0_m_limiter_rsp_src_endofpacket)         //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),          //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),        //          .channel
		.sink_data          (limiter_pipeline_source0_data),           //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_src1_data),                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (ddr3a_afi_clk_clk),                                            //       clk.clk
		.reset               (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                                            //          .valid
		.src_data            (cmd_mux_src_data),                                             //          .data
		.src_channel         (cmd_mux_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (ddr3a_afi_clk_clk),                                            //       clk.clk
		.reset              (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                         //      sink.ready
		.sink_channel       (router_001_src_channel),                                       //          .channel
		.sink_data          (router_001_src_data),                                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux rsp_demux_001 (
		.clk                (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (652),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (ddr3a_afi_clk_clk),                       //       cr0.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (dma_0_m_limiter_cmd_src_ready),           //     sink0.ready
		.in_valid          (dma_0_m_limiter_cmd_src_valid),           //          .valid
		.in_startofpacket  (dma_0_m_limiter_cmd_src_startofpacket),   //          .startofpacket
		.in_endofpacket    (dma_0_m_limiter_cmd_src_endofpacket),     //          .endofpacket
		.in_data           (dma_0_m_limiter_cmd_src_data),            //          .data
		.in_channel        (dma_0_m_limiter_cmd_src_channel),         //          .channel
		.out_ready         (limiter_pipeline_source0_ready),          //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),          //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),           //          .data
		.out_channel       (limiter_pipeline_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (652),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (ddr3a_afi_clk_clk),                          //       cr0.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                           //          .data
		.in_channel        (rsp_mux_src_channel),                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter_007 #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ddr3a_afi_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (clock_cross_dma_to_pcie_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (clock_cross_dma_to_pcie_s0_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                 //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter_007 #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (ddr3a_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (acl_memory_bank_divider_0_s_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

endmodule
