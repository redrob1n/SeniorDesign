// system_acl_iface_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module system_acl_iface_mm_interconnect_2 (
		input  wire         config_clk_out_clk_clk,                                      //                                    config_clk_out_clk.clk
		input  wire         ddr3a_afi_clk_clk,                                           //                                         ddr3a_afi_clk.clk
		input  wire         ddr3b_afi_clk_clk,                                           //                                         ddr3b_afi_clk.clk
		input  wire         pcie_coreclkout_clk,                                         //                                       pcie_coreclkout.clk
		input  wire         temperature_pll_outclk0_clk,                                 //                               temperature_pll_outclk0.clk
		input  wire         acl_kernel_clk_reset_reset_bridge_in_reset_reset,            //            acl_kernel_clk_reset_reset_bridge_in_reset.reset
		input  wire         dma_0_reset_reset_bridge_in_reset_reset,                     //                     dma_0_reset_reset_bridge_in_reset.reset
		input  wire         em_pc_0_avl_reset_n_reset_bridge_in_reset_reset,             //             em_pc_0_avl_reset_n_reset_bridge_in_reset.reset
		input  wire         em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset, // em_pc_0_em_csr_translator_reset_reset_bridge_in_reset.reset
		input  wire         em_pc_1_avl_reset_n_reset_bridge_in_reset_reset,             //             em_pc_1_avl_reset_n_reset_bridge_in_reset.reset
		input  wire         em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset, // em_pc_1_em_csr_translator_reset_reset_bridge_in_reset.reset
		input  wire         pcie_Cra_translator_reset_reset_bridge_in_reset_reset,       //       pcie_Cra_translator_reset_reset_bridge_in_reset.reset
		input  wire         pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset,      //      pipe_stage_host_ctrl_reset_reset_bridge_in_reset.reset
		input  wire         temperature_0_clk_reset_reset_bridge_in_reset_reset,         //         temperature_0_clk_reset_reset_bridge_in_reset.reset
		input  wire         uniphy_status_0_clk_reset_reset_bridge_in_reset_reset,       //       uniphy_status_0_clk_reset_reset_bridge_in_reset.reset
		input  wire [17:0]  pipe_stage_host_ctrl_m0_address,                             //                               pipe_stage_host_ctrl_m0.address
		output wire         pipe_stage_host_ctrl_m0_waitrequest,                         //                                                      .waitrequest
		input  wire [0:0]   pipe_stage_host_ctrl_m0_burstcount,                          //                                                      .burstcount
		input  wire [3:0]   pipe_stage_host_ctrl_m0_byteenable,                          //                                                      .byteenable
		input  wire         pipe_stage_host_ctrl_m0_read,                                //                                                      .read
		output wire [31:0]  pipe_stage_host_ctrl_m0_readdata,                            //                                                      .readdata
		output wire         pipe_stage_host_ctrl_m0_readdatavalid,                       //                                                      .readdatavalid
		input  wire         pipe_stage_host_ctrl_m0_write,                               //                                                      .write
		input  wire [31:0]  pipe_stage_host_ctrl_m0_writedata,                           //                                                      .writedata
		input  wire         pipe_stage_host_ctrl_m0_debugaccess,                         //                                                      .debugaccess
		output wire [10:0]  acl_kernel_clk_ctrl_address,                                 //                                   acl_kernel_clk_ctrl.address
		output wire         acl_kernel_clk_ctrl_write,                                   //                                                      .write
		output wire         acl_kernel_clk_ctrl_read,                                    //                                                      .read
		input  wire [31:0]  acl_kernel_clk_ctrl_readdata,                                //                                                      .readdata
		output wire [31:0]  acl_kernel_clk_ctrl_writedata,                               //                                                      .writedata
		output wire [0:0]   acl_kernel_clk_ctrl_burstcount,                              //                                                      .burstcount
		output wire [3:0]   acl_kernel_clk_ctrl_byteenable,                              //                                                      .byteenable
		input  wire         acl_kernel_clk_ctrl_readdatavalid,                           //                                                      .readdatavalid
		input  wire         acl_kernel_clk_ctrl_waitrequest,                             //                                                      .waitrequest
		output wire         acl_kernel_clk_ctrl_debugaccess,                             //                                                      .debugaccess
		output wire [9:0]   dma_0_csr_address,                                           //                                             dma_0_csr.address
		output wire         dma_0_csr_write,                                             //                                                      .write
		output wire         dma_0_csr_read,                                              //                                                      .read
		input  wire [63:0]  dma_0_csr_readdata,                                          //                                                      .readdata
		output wire [63:0]  dma_0_csr_writedata,                                         //                                                      .writedata
		output wire [0:0]   dma_0_csr_burstcount,                                        //                                                      .burstcount
		output wire [7:0]   dma_0_csr_byteenable,                                        //                                                      .byteenable
		input  wire         dma_0_csr_readdatavalid,                                     //                                                      .readdatavalid
		input  wire         dma_0_csr_waitrequest,                                       //                                                      .waitrequest
		output wire         dma_0_csr_debugaccess,                                       //                                                      .debugaccess
		output wire [9:0]   dma_0_s_nondma_address,                                      //                                        dma_0_s_nondma.address
		output wire         dma_0_s_nondma_write,                                        //                                                      .write
		output wire         dma_0_s_nondma_read,                                         //                                                      .read
		input  wire [511:0] dma_0_s_nondma_readdata,                                     //                                                      .readdata
		output wire [511:0] dma_0_s_nondma_writedata,                                    //                                                      .writedata
		output wire [4:0]   dma_0_s_nondma_burstcount,                                   //                                                      .burstcount
		output wire [63:0]  dma_0_s_nondma_byteenable,                                   //                                                      .byteenable
		input  wire         dma_0_s_nondma_readdatavalid,                                //                                                      .readdatavalid
		input  wire         dma_0_s_nondma_waitrequest,                                  //                                                      .waitrequest
		output wire [13:0]  em_pc_0_em_csr_address,                                      //                                        em_pc_0_em_csr.address
		output wire         em_pc_0_em_csr_write,                                        //                                                      .write
		output wire         em_pc_0_em_csr_read,                                         //                                                      .read
		input  wire [31:0]  em_pc_0_em_csr_readdata,                                     //                                                      .readdata
		output wire [31:0]  em_pc_0_em_csr_writedata,                                    //                                                      .writedata
		output wire [0:0]   em_pc_0_em_csr_burstcount,                                   //                                                      .burstcount
		output wire [3:0]   em_pc_0_em_csr_byteenable,                                   //                                                      .byteenable
		input  wire         em_pc_0_em_csr_readdatavalid,                                //                                                      .readdatavalid
		input  wire         em_pc_0_em_csr_waitrequest,                                  //                                                      .waitrequest
		output wire         em_pc_0_em_csr_debugaccess,                                  //                                                      .debugaccess
		output wire [13:0]  em_pc_1_em_csr_address,                                      //                                        em_pc_1_em_csr.address
		output wire         em_pc_1_em_csr_write,                                        //                                                      .write
		output wire         em_pc_1_em_csr_read,                                         //                                                      .read
		input  wire [31:0]  em_pc_1_em_csr_readdata,                                     //                                                      .readdata
		output wire [31:0]  em_pc_1_em_csr_writedata,                                    //                                                      .writedata
		output wire [0:0]   em_pc_1_em_csr_burstcount,                                   //                                                      .burstcount
		output wire [3:0]   em_pc_1_em_csr_byteenable,                                   //                                                      .byteenable
		input  wire         em_pc_1_em_csr_readdatavalid,                                //                                                      .readdatavalid
		input  wire         em_pc_1_em_csr_waitrequest,                                  //                                                      .waitrequest
		output wire         em_pc_1_em_csr_debugaccess,                                  //                                                      .debugaccess
		output wire [13:0]  kernel_interface_kernel_cntrl_address,                       //                         kernel_interface_kernel_cntrl.address
		output wire         kernel_interface_kernel_cntrl_write,                         //                                                      .write
		output wire         kernel_interface_kernel_cntrl_read,                          //                                                      .read
		input  wire [31:0]  kernel_interface_kernel_cntrl_readdata,                      //                                                      .readdata
		output wire [31:0]  kernel_interface_kernel_cntrl_writedata,                     //                                                      .writedata
		output wire [0:0]   kernel_interface_kernel_cntrl_burstcount,                    //                                                      .burstcount
		output wire [3:0]   kernel_interface_kernel_cntrl_byteenable,                    //                                                      .byteenable
		input  wire         kernel_interface_kernel_cntrl_readdatavalid,                 //                                                      .readdatavalid
		input  wire         kernel_interface_kernel_cntrl_waitrequest,                   //                                                      .waitrequest
		output wire         kernel_interface_kernel_cntrl_debugaccess,                   //                                                      .debugaccess
		output wire [13:0]  pcie_Cra_address,                                            //                                              pcie_Cra.address
		output wire         pcie_Cra_write,                                              //                                                      .write
		output wire         pcie_Cra_read,                                               //                                                      .read
		input  wire [31:0]  pcie_Cra_readdata,                                           //                                                      .readdata
		output wire [31:0]  pcie_Cra_writedata,                                          //                                                      .writedata
		output wire [3:0]   pcie_Cra_byteenable,                                         //                                                      .byteenable
		input  wire         pcie_Cra_waitrequest,                                        //                                                      .waitrequest
		output wire         pcie_Cra_chipselect,                                         //                                                      .chipselect
		output wire [0:0]   temperature_0_s_address,                                     //                                       temperature_0_s.address
		output wire         temperature_0_s_write,                                       //                                                      .write
		output wire         temperature_0_s_read,                                        //                                                      .read
		input  wire [31:0]  temperature_0_s_readdata,                                    //                                                      .readdata
		output wire [31:0]  temperature_0_s_writedata,                                   //                                                      .writedata
		output wire [3:0]   temperature_0_s_byteenable,                                  //                                                      .byteenable
		input  wire         temperature_0_s_readdatavalid,                               //                                                      .readdatavalid
		input  wire         temperature_0_s_waitrequest,                                 //                                                      .waitrequest
		output wire         uniphy_status_0_s_read,                                      //                                     uniphy_status_0_s.read
		input  wire [31:0]  uniphy_status_0_s_readdata,                                  //                                                      .readdata
		output wire         version_id_0_s_read,                                         //                                        version_id_0_s.read
		input  wire [31:0]  version_id_0_s_readdata                                      //                                                      .readdata
	);

	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest;   // pipe_stage_host_ctrl_m0_agent:av_waitrequest -> pipe_stage_host_ctrl_m0_translator:uav_waitrequest
	wire   [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata;      // pipe_stage_host_ctrl_m0_agent:av_readdata -> pipe_stage_host_ctrl_m0_translator:uav_readdata
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess;   // pipe_stage_host_ctrl_m0_translator:uav_debugaccess -> pipe_stage_host_ctrl_m0_agent:av_debugaccess
	wire   [17:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address;       // pipe_stage_host_ctrl_m0_translator:uav_address -> pipe_stage_host_ctrl_m0_agent:av_address
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read;          // pipe_stage_host_ctrl_m0_translator:uav_read -> pipe_stage_host_ctrl_m0_agent:av_read
	wire    [3:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable;    // pipe_stage_host_ctrl_m0_translator:uav_byteenable -> pipe_stage_host_ctrl_m0_agent:av_byteenable
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid; // pipe_stage_host_ctrl_m0_agent:av_readdatavalid -> pipe_stage_host_ctrl_m0_translator:uav_readdatavalid
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock;          // pipe_stage_host_ctrl_m0_translator:uav_lock -> pipe_stage_host_ctrl_m0_agent:av_lock
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write;         // pipe_stage_host_ctrl_m0_translator:uav_write -> pipe_stage_host_ctrl_m0_agent:av_write
	wire   [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata;     // pipe_stage_host_ctrl_m0_translator:uav_writedata -> pipe_stage_host_ctrl_m0_agent:av_writedata
	wire    [2:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount;    // pipe_stage_host_ctrl_m0_translator:uav_burstcount -> pipe_stage_host_ctrl_m0_agent:av_burstcount
	wire   [31:0] temperature_0_s_agent_m0_readdata;                                          // temperature_0_s_translator:uav_readdata -> temperature_0_s_agent:m0_readdata
	wire          temperature_0_s_agent_m0_waitrequest;                                       // temperature_0_s_translator:uav_waitrequest -> temperature_0_s_agent:m0_waitrequest
	wire          temperature_0_s_agent_m0_debugaccess;                                       // temperature_0_s_agent:m0_debugaccess -> temperature_0_s_translator:uav_debugaccess
	wire   [17:0] temperature_0_s_agent_m0_address;                                           // temperature_0_s_agent:m0_address -> temperature_0_s_translator:uav_address
	wire    [3:0] temperature_0_s_agent_m0_byteenable;                                        // temperature_0_s_agent:m0_byteenable -> temperature_0_s_translator:uav_byteenable
	wire          temperature_0_s_agent_m0_read;                                              // temperature_0_s_agent:m0_read -> temperature_0_s_translator:uav_read
	wire          temperature_0_s_agent_m0_readdatavalid;                                     // temperature_0_s_translator:uav_readdatavalid -> temperature_0_s_agent:m0_readdatavalid
	wire          temperature_0_s_agent_m0_lock;                                              // temperature_0_s_agent:m0_lock -> temperature_0_s_translator:uav_lock
	wire   [31:0] temperature_0_s_agent_m0_writedata;                                         // temperature_0_s_agent:m0_writedata -> temperature_0_s_translator:uav_writedata
	wire          temperature_0_s_agent_m0_write;                                             // temperature_0_s_agent:m0_write -> temperature_0_s_translator:uav_write
	wire    [2:0] temperature_0_s_agent_m0_burstcount;                                        // temperature_0_s_agent:m0_burstcount -> temperature_0_s_translator:uav_burstcount
	wire          temperature_0_s_agent_rf_source_valid;                                      // temperature_0_s_agent:rf_source_valid -> temperature_0_s_agent_rsp_fifo:in_valid
	wire  [102:0] temperature_0_s_agent_rf_source_data;                                       // temperature_0_s_agent:rf_source_data -> temperature_0_s_agent_rsp_fifo:in_data
	wire          temperature_0_s_agent_rf_source_ready;                                      // temperature_0_s_agent_rsp_fifo:in_ready -> temperature_0_s_agent:rf_source_ready
	wire          temperature_0_s_agent_rf_source_startofpacket;                              // temperature_0_s_agent:rf_source_startofpacket -> temperature_0_s_agent_rsp_fifo:in_startofpacket
	wire          temperature_0_s_agent_rf_source_endofpacket;                                // temperature_0_s_agent:rf_source_endofpacket -> temperature_0_s_agent_rsp_fifo:in_endofpacket
	wire          temperature_0_s_agent_rsp_fifo_out_valid;                                   // temperature_0_s_agent_rsp_fifo:out_valid -> temperature_0_s_agent:rf_sink_valid
	wire  [102:0] temperature_0_s_agent_rsp_fifo_out_data;                                    // temperature_0_s_agent_rsp_fifo:out_data -> temperature_0_s_agent:rf_sink_data
	wire          temperature_0_s_agent_rsp_fifo_out_ready;                                   // temperature_0_s_agent:rf_sink_ready -> temperature_0_s_agent_rsp_fifo:out_ready
	wire          temperature_0_s_agent_rsp_fifo_out_startofpacket;                           // temperature_0_s_agent_rsp_fifo:out_startofpacket -> temperature_0_s_agent:rf_sink_startofpacket
	wire          temperature_0_s_agent_rsp_fifo_out_endofpacket;                             // temperature_0_s_agent_rsp_fifo:out_endofpacket -> temperature_0_s_agent:rf_sink_endofpacket
	wire          temperature_0_s_agent_rdata_fifo_src_valid;                                 // temperature_0_s_agent:rdata_fifo_src_valid -> temperature_0_s_agent_rdata_fifo:in_valid
	wire   [33:0] temperature_0_s_agent_rdata_fifo_src_data;                                  // temperature_0_s_agent:rdata_fifo_src_data -> temperature_0_s_agent_rdata_fifo:in_data
	wire          temperature_0_s_agent_rdata_fifo_src_ready;                                 // temperature_0_s_agent_rdata_fifo:in_ready -> temperature_0_s_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> temperature_0_s_agent:cp_valid
	wire  [101:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> temperature_0_s_agent:cp_data
	wire          cmd_mux_src_ready;                                                          // temperature_0_s_agent:cp_ready -> cmd_mux:src_ready
	wire    [9:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> temperature_0_s_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> temperature_0_s_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> temperature_0_s_agent:cp_endofpacket
	wire   [31:0] acl_kernel_clk_ctrl_agent_m0_readdata;                                      // acl_kernel_clk_ctrl_translator:uav_readdata -> acl_kernel_clk_ctrl_agent:m0_readdata
	wire          acl_kernel_clk_ctrl_agent_m0_waitrequest;                                   // acl_kernel_clk_ctrl_translator:uav_waitrequest -> acl_kernel_clk_ctrl_agent:m0_waitrequest
	wire          acl_kernel_clk_ctrl_agent_m0_debugaccess;                                   // acl_kernel_clk_ctrl_agent:m0_debugaccess -> acl_kernel_clk_ctrl_translator:uav_debugaccess
	wire   [17:0] acl_kernel_clk_ctrl_agent_m0_address;                                       // acl_kernel_clk_ctrl_agent:m0_address -> acl_kernel_clk_ctrl_translator:uav_address
	wire    [3:0] acl_kernel_clk_ctrl_agent_m0_byteenable;                                    // acl_kernel_clk_ctrl_agent:m0_byteenable -> acl_kernel_clk_ctrl_translator:uav_byteenable
	wire          acl_kernel_clk_ctrl_agent_m0_read;                                          // acl_kernel_clk_ctrl_agent:m0_read -> acl_kernel_clk_ctrl_translator:uav_read
	wire          acl_kernel_clk_ctrl_agent_m0_readdatavalid;                                 // acl_kernel_clk_ctrl_translator:uav_readdatavalid -> acl_kernel_clk_ctrl_agent:m0_readdatavalid
	wire          acl_kernel_clk_ctrl_agent_m0_lock;                                          // acl_kernel_clk_ctrl_agent:m0_lock -> acl_kernel_clk_ctrl_translator:uav_lock
	wire   [31:0] acl_kernel_clk_ctrl_agent_m0_writedata;                                     // acl_kernel_clk_ctrl_agent:m0_writedata -> acl_kernel_clk_ctrl_translator:uav_writedata
	wire          acl_kernel_clk_ctrl_agent_m0_write;                                         // acl_kernel_clk_ctrl_agent:m0_write -> acl_kernel_clk_ctrl_translator:uav_write
	wire    [2:0] acl_kernel_clk_ctrl_agent_m0_burstcount;                                    // acl_kernel_clk_ctrl_agent:m0_burstcount -> acl_kernel_clk_ctrl_translator:uav_burstcount
	wire          acl_kernel_clk_ctrl_agent_rf_source_valid;                                  // acl_kernel_clk_ctrl_agent:rf_source_valid -> acl_kernel_clk_ctrl_agent_rsp_fifo:in_valid
	wire  [102:0] acl_kernel_clk_ctrl_agent_rf_source_data;                                   // acl_kernel_clk_ctrl_agent:rf_source_data -> acl_kernel_clk_ctrl_agent_rsp_fifo:in_data
	wire          acl_kernel_clk_ctrl_agent_rf_source_ready;                                  // acl_kernel_clk_ctrl_agent_rsp_fifo:in_ready -> acl_kernel_clk_ctrl_agent:rf_source_ready
	wire          acl_kernel_clk_ctrl_agent_rf_source_startofpacket;                          // acl_kernel_clk_ctrl_agent:rf_source_startofpacket -> acl_kernel_clk_ctrl_agent_rsp_fifo:in_startofpacket
	wire          acl_kernel_clk_ctrl_agent_rf_source_endofpacket;                            // acl_kernel_clk_ctrl_agent:rf_source_endofpacket -> acl_kernel_clk_ctrl_agent_rsp_fifo:in_endofpacket
	wire          acl_kernel_clk_ctrl_agent_rsp_fifo_out_valid;                               // acl_kernel_clk_ctrl_agent_rsp_fifo:out_valid -> acl_kernel_clk_ctrl_agent:rf_sink_valid
	wire  [102:0] acl_kernel_clk_ctrl_agent_rsp_fifo_out_data;                                // acl_kernel_clk_ctrl_agent_rsp_fifo:out_data -> acl_kernel_clk_ctrl_agent:rf_sink_data
	wire          acl_kernel_clk_ctrl_agent_rsp_fifo_out_ready;                               // acl_kernel_clk_ctrl_agent:rf_sink_ready -> acl_kernel_clk_ctrl_agent_rsp_fifo:out_ready
	wire          acl_kernel_clk_ctrl_agent_rsp_fifo_out_startofpacket;                       // acl_kernel_clk_ctrl_agent_rsp_fifo:out_startofpacket -> acl_kernel_clk_ctrl_agent:rf_sink_startofpacket
	wire          acl_kernel_clk_ctrl_agent_rsp_fifo_out_endofpacket;                         // acl_kernel_clk_ctrl_agent_rsp_fifo:out_endofpacket -> acl_kernel_clk_ctrl_agent:rf_sink_endofpacket
	wire          acl_kernel_clk_ctrl_agent_rdata_fifo_src_valid;                             // acl_kernel_clk_ctrl_agent:rdata_fifo_src_valid -> acl_kernel_clk_ctrl_agent_rdata_fifo:in_valid
	wire   [33:0] acl_kernel_clk_ctrl_agent_rdata_fifo_src_data;                              // acl_kernel_clk_ctrl_agent:rdata_fifo_src_data -> acl_kernel_clk_ctrl_agent_rdata_fifo:in_data
	wire          acl_kernel_clk_ctrl_agent_rdata_fifo_src_ready;                             // acl_kernel_clk_ctrl_agent_rdata_fifo:in_ready -> acl_kernel_clk_ctrl_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> acl_kernel_clk_ctrl_agent:cp_valid
	wire  [101:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> acl_kernel_clk_ctrl_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                      // acl_kernel_clk_ctrl_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [9:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> acl_kernel_clk_ctrl_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> acl_kernel_clk_ctrl_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> acl_kernel_clk_ctrl_agent:cp_endofpacket
	wire   [31:0] kernel_interface_kernel_cntrl_agent_m0_readdata;                            // kernel_interface_kernel_cntrl_translator:uav_readdata -> kernel_interface_kernel_cntrl_agent:m0_readdata
	wire          kernel_interface_kernel_cntrl_agent_m0_waitrequest;                         // kernel_interface_kernel_cntrl_translator:uav_waitrequest -> kernel_interface_kernel_cntrl_agent:m0_waitrequest
	wire          kernel_interface_kernel_cntrl_agent_m0_debugaccess;                         // kernel_interface_kernel_cntrl_agent:m0_debugaccess -> kernel_interface_kernel_cntrl_translator:uav_debugaccess
	wire   [17:0] kernel_interface_kernel_cntrl_agent_m0_address;                             // kernel_interface_kernel_cntrl_agent:m0_address -> kernel_interface_kernel_cntrl_translator:uav_address
	wire    [3:0] kernel_interface_kernel_cntrl_agent_m0_byteenable;                          // kernel_interface_kernel_cntrl_agent:m0_byteenable -> kernel_interface_kernel_cntrl_translator:uav_byteenable
	wire          kernel_interface_kernel_cntrl_agent_m0_read;                                // kernel_interface_kernel_cntrl_agent:m0_read -> kernel_interface_kernel_cntrl_translator:uav_read
	wire          kernel_interface_kernel_cntrl_agent_m0_readdatavalid;                       // kernel_interface_kernel_cntrl_translator:uav_readdatavalid -> kernel_interface_kernel_cntrl_agent:m0_readdatavalid
	wire          kernel_interface_kernel_cntrl_agent_m0_lock;                                // kernel_interface_kernel_cntrl_agent:m0_lock -> kernel_interface_kernel_cntrl_translator:uav_lock
	wire   [31:0] kernel_interface_kernel_cntrl_agent_m0_writedata;                           // kernel_interface_kernel_cntrl_agent:m0_writedata -> kernel_interface_kernel_cntrl_translator:uav_writedata
	wire          kernel_interface_kernel_cntrl_agent_m0_write;                               // kernel_interface_kernel_cntrl_agent:m0_write -> kernel_interface_kernel_cntrl_translator:uav_write
	wire    [2:0] kernel_interface_kernel_cntrl_agent_m0_burstcount;                          // kernel_interface_kernel_cntrl_agent:m0_burstcount -> kernel_interface_kernel_cntrl_translator:uav_burstcount
	wire          kernel_interface_kernel_cntrl_agent_rf_source_valid;                        // kernel_interface_kernel_cntrl_agent:rf_source_valid -> kernel_interface_kernel_cntrl_agent_rsp_fifo:in_valid
	wire  [102:0] kernel_interface_kernel_cntrl_agent_rf_source_data;                         // kernel_interface_kernel_cntrl_agent:rf_source_data -> kernel_interface_kernel_cntrl_agent_rsp_fifo:in_data
	wire          kernel_interface_kernel_cntrl_agent_rf_source_ready;                        // kernel_interface_kernel_cntrl_agent_rsp_fifo:in_ready -> kernel_interface_kernel_cntrl_agent:rf_source_ready
	wire          kernel_interface_kernel_cntrl_agent_rf_source_startofpacket;                // kernel_interface_kernel_cntrl_agent:rf_source_startofpacket -> kernel_interface_kernel_cntrl_agent_rsp_fifo:in_startofpacket
	wire          kernel_interface_kernel_cntrl_agent_rf_source_endofpacket;                  // kernel_interface_kernel_cntrl_agent:rf_source_endofpacket -> kernel_interface_kernel_cntrl_agent_rsp_fifo:in_endofpacket
	wire          kernel_interface_kernel_cntrl_agent_rsp_fifo_out_valid;                     // kernel_interface_kernel_cntrl_agent_rsp_fifo:out_valid -> kernel_interface_kernel_cntrl_agent:rf_sink_valid
	wire  [102:0] kernel_interface_kernel_cntrl_agent_rsp_fifo_out_data;                      // kernel_interface_kernel_cntrl_agent_rsp_fifo:out_data -> kernel_interface_kernel_cntrl_agent:rf_sink_data
	wire          kernel_interface_kernel_cntrl_agent_rsp_fifo_out_ready;                     // kernel_interface_kernel_cntrl_agent:rf_sink_ready -> kernel_interface_kernel_cntrl_agent_rsp_fifo:out_ready
	wire          kernel_interface_kernel_cntrl_agent_rsp_fifo_out_startofpacket;             // kernel_interface_kernel_cntrl_agent_rsp_fifo:out_startofpacket -> kernel_interface_kernel_cntrl_agent:rf_sink_startofpacket
	wire          kernel_interface_kernel_cntrl_agent_rsp_fifo_out_endofpacket;               // kernel_interface_kernel_cntrl_agent_rsp_fifo:out_endofpacket -> kernel_interface_kernel_cntrl_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> kernel_interface_kernel_cntrl_agent:cp_valid
	wire  [101:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> kernel_interface_kernel_cntrl_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                      // kernel_interface_kernel_cntrl_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [9:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> kernel_interface_kernel_cntrl_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> kernel_interface_kernel_cntrl_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> kernel_interface_kernel_cntrl_agent:cp_endofpacket
	wire   [63:0] dma_0_csr_agent_m0_readdata;                                                // dma_0_csr_translator:uav_readdata -> dma_0_csr_agent:m0_readdata
	wire          dma_0_csr_agent_m0_waitrequest;                                             // dma_0_csr_translator:uav_waitrequest -> dma_0_csr_agent:m0_waitrequest
	wire          dma_0_csr_agent_m0_debugaccess;                                             // dma_0_csr_agent:m0_debugaccess -> dma_0_csr_translator:uav_debugaccess
	wire   [17:0] dma_0_csr_agent_m0_address;                                                 // dma_0_csr_agent:m0_address -> dma_0_csr_translator:uav_address
	wire    [7:0] dma_0_csr_agent_m0_byteenable;                                              // dma_0_csr_agent:m0_byteenable -> dma_0_csr_translator:uav_byteenable
	wire          dma_0_csr_agent_m0_read;                                                    // dma_0_csr_agent:m0_read -> dma_0_csr_translator:uav_read
	wire          dma_0_csr_agent_m0_readdatavalid;                                           // dma_0_csr_translator:uav_readdatavalid -> dma_0_csr_agent:m0_readdatavalid
	wire          dma_0_csr_agent_m0_lock;                                                    // dma_0_csr_agent:m0_lock -> dma_0_csr_translator:uav_lock
	wire   [63:0] dma_0_csr_agent_m0_writedata;                                               // dma_0_csr_agent:m0_writedata -> dma_0_csr_translator:uav_writedata
	wire          dma_0_csr_agent_m0_write;                                                   // dma_0_csr_agent:m0_write -> dma_0_csr_translator:uav_write
	wire    [3:0] dma_0_csr_agent_m0_burstcount;                                              // dma_0_csr_agent:m0_burstcount -> dma_0_csr_translator:uav_burstcount
	wire          dma_0_csr_agent_rf_source_valid;                                            // dma_0_csr_agent:rf_source_valid -> dma_0_csr_agent_rsp_fifo:in_valid
	wire  [138:0] dma_0_csr_agent_rf_source_data;                                             // dma_0_csr_agent:rf_source_data -> dma_0_csr_agent_rsp_fifo:in_data
	wire          dma_0_csr_agent_rf_source_ready;                                            // dma_0_csr_agent_rsp_fifo:in_ready -> dma_0_csr_agent:rf_source_ready
	wire          dma_0_csr_agent_rf_source_startofpacket;                                    // dma_0_csr_agent:rf_source_startofpacket -> dma_0_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_0_csr_agent_rf_source_endofpacket;                                      // dma_0_csr_agent:rf_source_endofpacket -> dma_0_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_0_csr_agent_rsp_fifo_out_valid;                                         // dma_0_csr_agent_rsp_fifo:out_valid -> dma_0_csr_agent:rf_sink_valid
	wire  [138:0] dma_0_csr_agent_rsp_fifo_out_data;                                          // dma_0_csr_agent_rsp_fifo:out_data -> dma_0_csr_agent:rf_sink_data
	wire          dma_0_csr_agent_rsp_fifo_out_ready;                                         // dma_0_csr_agent:rf_sink_ready -> dma_0_csr_agent_rsp_fifo:out_ready
	wire          dma_0_csr_agent_rsp_fifo_out_startofpacket;                                 // dma_0_csr_agent_rsp_fifo:out_startofpacket -> dma_0_csr_agent:rf_sink_startofpacket
	wire          dma_0_csr_agent_rsp_fifo_out_endofpacket;                                   // dma_0_csr_agent_rsp_fifo:out_endofpacket -> dma_0_csr_agent:rf_sink_endofpacket
	wire          dma_0_csr_agent_rdata_fifo_src_valid;                                       // dma_0_csr_agent:rdata_fifo_src_valid -> dma_0_csr_agent_rdata_fifo:in_valid
	wire   [65:0] dma_0_csr_agent_rdata_fifo_src_data;                                        // dma_0_csr_agent:rdata_fifo_src_data -> dma_0_csr_agent_rdata_fifo:in_data
	wire          dma_0_csr_agent_rdata_fifo_src_ready;                                       // dma_0_csr_agent_rdata_fifo:in_ready -> dma_0_csr_agent:rdata_fifo_src_ready
	wire   [31:0] pcie_cra_agent_m0_readdata;                                                 // pcie_Cra_translator:uav_readdata -> pcie_Cra_agent:m0_readdata
	wire          pcie_cra_agent_m0_waitrequest;                                              // pcie_Cra_translator:uav_waitrequest -> pcie_Cra_agent:m0_waitrequest
	wire          pcie_cra_agent_m0_debugaccess;                                              // pcie_Cra_agent:m0_debugaccess -> pcie_Cra_translator:uav_debugaccess
	wire   [17:0] pcie_cra_agent_m0_address;                                                  // pcie_Cra_agent:m0_address -> pcie_Cra_translator:uav_address
	wire    [3:0] pcie_cra_agent_m0_byteenable;                                               // pcie_Cra_agent:m0_byteenable -> pcie_Cra_translator:uav_byteenable
	wire          pcie_cra_agent_m0_read;                                                     // pcie_Cra_agent:m0_read -> pcie_Cra_translator:uav_read
	wire          pcie_cra_agent_m0_readdatavalid;                                            // pcie_Cra_translator:uav_readdatavalid -> pcie_Cra_agent:m0_readdatavalid
	wire          pcie_cra_agent_m0_lock;                                                     // pcie_Cra_agent:m0_lock -> pcie_Cra_translator:uav_lock
	wire   [31:0] pcie_cra_agent_m0_writedata;                                                // pcie_Cra_agent:m0_writedata -> pcie_Cra_translator:uav_writedata
	wire          pcie_cra_agent_m0_write;                                                    // pcie_Cra_agent:m0_write -> pcie_Cra_translator:uav_write
	wire    [2:0] pcie_cra_agent_m0_burstcount;                                               // pcie_Cra_agent:m0_burstcount -> pcie_Cra_translator:uav_burstcount
	wire          pcie_cra_agent_rf_source_valid;                                             // pcie_Cra_agent:rf_source_valid -> pcie_Cra_agent_rsp_fifo:in_valid
	wire  [102:0] pcie_cra_agent_rf_source_data;                                              // pcie_Cra_agent:rf_source_data -> pcie_Cra_agent_rsp_fifo:in_data
	wire          pcie_cra_agent_rf_source_ready;                                             // pcie_Cra_agent_rsp_fifo:in_ready -> pcie_Cra_agent:rf_source_ready
	wire          pcie_cra_agent_rf_source_startofpacket;                                     // pcie_Cra_agent:rf_source_startofpacket -> pcie_Cra_agent_rsp_fifo:in_startofpacket
	wire          pcie_cra_agent_rf_source_endofpacket;                                       // pcie_Cra_agent:rf_source_endofpacket -> pcie_Cra_agent_rsp_fifo:in_endofpacket
	wire          pcie_cra_agent_rsp_fifo_out_valid;                                          // pcie_Cra_agent_rsp_fifo:out_valid -> pcie_Cra_agent:rf_sink_valid
	wire  [102:0] pcie_cra_agent_rsp_fifo_out_data;                                           // pcie_Cra_agent_rsp_fifo:out_data -> pcie_Cra_agent:rf_sink_data
	wire          pcie_cra_agent_rsp_fifo_out_ready;                                          // pcie_Cra_agent:rf_sink_ready -> pcie_Cra_agent_rsp_fifo:out_ready
	wire          pcie_cra_agent_rsp_fifo_out_startofpacket;                                  // pcie_Cra_agent_rsp_fifo:out_startofpacket -> pcie_Cra_agent:rf_sink_startofpacket
	wire          pcie_cra_agent_rsp_fifo_out_endofpacket;                                    // pcie_Cra_agent_rsp_fifo:out_endofpacket -> pcie_Cra_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> pcie_Cra_agent:cp_valid
	wire  [101:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> pcie_Cra_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                      // pcie_Cra_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [9:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> pcie_Cra_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> pcie_Cra_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> pcie_Cra_agent:cp_endofpacket
	wire   [31:0] em_pc_0_em_csr_agent_m0_readdata;                                           // em_pc_0_em_csr_translator:uav_readdata -> em_pc_0_em_csr_agent:m0_readdata
	wire          em_pc_0_em_csr_agent_m0_waitrequest;                                        // em_pc_0_em_csr_translator:uav_waitrequest -> em_pc_0_em_csr_agent:m0_waitrequest
	wire          em_pc_0_em_csr_agent_m0_debugaccess;                                        // em_pc_0_em_csr_agent:m0_debugaccess -> em_pc_0_em_csr_translator:uav_debugaccess
	wire   [17:0] em_pc_0_em_csr_agent_m0_address;                                            // em_pc_0_em_csr_agent:m0_address -> em_pc_0_em_csr_translator:uav_address
	wire    [3:0] em_pc_0_em_csr_agent_m0_byteenable;                                         // em_pc_0_em_csr_agent:m0_byteenable -> em_pc_0_em_csr_translator:uav_byteenable
	wire          em_pc_0_em_csr_agent_m0_read;                                               // em_pc_0_em_csr_agent:m0_read -> em_pc_0_em_csr_translator:uav_read
	wire          em_pc_0_em_csr_agent_m0_readdatavalid;                                      // em_pc_0_em_csr_translator:uav_readdatavalid -> em_pc_0_em_csr_agent:m0_readdatavalid
	wire          em_pc_0_em_csr_agent_m0_lock;                                               // em_pc_0_em_csr_agent:m0_lock -> em_pc_0_em_csr_translator:uav_lock
	wire   [31:0] em_pc_0_em_csr_agent_m0_writedata;                                          // em_pc_0_em_csr_agent:m0_writedata -> em_pc_0_em_csr_translator:uav_writedata
	wire          em_pc_0_em_csr_agent_m0_write;                                              // em_pc_0_em_csr_agent:m0_write -> em_pc_0_em_csr_translator:uav_write
	wire    [2:0] em_pc_0_em_csr_agent_m0_burstcount;                                         // em_pc_0_em_csr_agent:m0_burstcount -> em_pc_0_em_csr_translator:uav_burstcount
	wire          em_pc_0_em_csr_agent_rf_source_valid;                                       // em_pc_0_em_csr_agent:rf_source_valid -> em_pc_0_em_csr_agent_rsp_fifo:in_valid
	wire  [102:0] em_pc_0_em_csr_agent_rf_source_data;                                        // em_pc_0_em_csr_agent:rf_source_data -> em_pc_0_em_csr_agent_rsp_fifo:in_data
	wire          em_pc_0_em_csr_agent_rf_source_ready;                                       // em_pc_0_em_csr_agent_rsp_fifo:in_ready -> em_pc_0_em_csr_agent:rf_source_ready
	wire          em_pc_0_em_csr_agent_rf_source_startofpacket;                               // em_pc_0_em_csr_agent:rf_source_startofpacket -> em_pc_0_em_csr_agent_rsp_fifo:in_startofpacket
	wire          em_pc_0_em_csr_agent_rf_source_endofpacket;                                 // em_pc_0_em_csr_agent:rf_source_endofpacket -> em_pc_0_em_csr_agent_rsp_fifo:in_endofpacket
	wire          em_pc_0_em_csr_agent_rsp_fifo_out_valid;                                    // em_pc_0_em_csr_agent_rsp_fifo:out_valid -> em_pc_0_em_csr_agent:rf_sink_valid
	wire  [102:0] em_pc_0_em_csr_agent_rsp_fifo_out_data;                                     // em_pc_0_em_csr_agent_rsp_fifo:out_data -> em_pc_0_em_csr_agent:rf_sink_data
	wire          em_pc_0_em_csr_agent_rsp_fifo_out_ready;                                    // em_pc_0_em_csr_agent:rf_sink_ready -> em_pc_0_em_csr_agent_rsp_fifo:out_ready
	wire          em_pc_0_em_csr_agent_rsp_fifo_out_startofpacket;                            // em_pc_0_em_csr_agent_rsp_fifo:out_startofpacket -> em_pc_0_em_csr_agent:rf_sink_startofpacket
	wire          em_pc_0_em_csr_agent_rsp_fifo_out_endofpacket;                              // em_pc_0_em_csr_agent_rsp_fifo:out_endofpacket -> em_pc_0_em_csr_agent:rf_sink_endofpacket
	wire          em_pc_0_em_csr_agent_rdata_fifo_src_valid;                                  // em_pc_0_em_csr_agent:rdata_fifo_src_valid -> em_pc_0_em_csr_agent_rdata_fifo:in_valid
	wire   [33:0] em_pc_0_em_csr_agent_rdata_fifo_src_data;                                   // em_pc_0_em_csr_agent:rdata_fifo_src_data -> em_pc_0_em_csr_agent_rdata_fifo:in_data
	wire          em_pc_0_em_csr_agent_rdata_fifo_src_ready;                                  // em_pc_0_em_csr_agent_rdata_fifo:in_ready -> em_pc_0_em_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                      // cmd_mux_005:src_valid -> em_pc_0_em_csr_agent:cp_valid
	wire  [101:0] cmd_mux_005_src_data;                                                       // cmd_mux_005:src_data -> em_pc_0_em_csr_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                      // em_pc_0_em_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [9:0] cmd_mux_005_src_channel;                                                    // cmd_mux_005:src_channel -> em_pc_0_em_csr_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                              // cmd_mux_005:src_startofpacket -> em_pc_0_em_csr_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                // cmd_mux_005:src_endofpacket -> em_pc_0_em_csr_agent:cp_endofpacket
	wire   [31:0] em_pc_1_em_csr_agent_m0_readdata;                                           // em_pc_1_em_csr_translator:uav_readdata -> em_pc_1_em_csr_agent:m0_readdata
	wire          em_pc_1_em_csr_agent_m0_waitrequest;                                        // em_pc_1_em_csr_translator:uav_waitrequest -> em_pc_1_em_csr_agent:m0_waitrequest
	wire          em_pc_1_em_csr_agent_m0_debugaccess;                                        // em_pc_1_em_csr_agent:m0_debugaccess -> em_pc_1_em_csr_translator:uav_debugaccess
	wire   [17:0] em_pc_1_em_csr_agent_m0_address;                                            // em_pc_1_em_csr_agent:m0_address -> em_pc_1_em_csr_translator:uav_address
	wire    [3:0] em_pc_1_em_csr_agent_m0_byteenable;                                         // em_pc_1_em_csr_agent:m0_byteenable -> em_pc_1_em_csr_translator:uav_byteenable
	wire          em_pc_1_em_csr_agent_m0_read;                                               // em_pc_1_em_csr_agent:m0_read -> em_pc_1_em_csr_translator:uav_read
	wire          em_pc_1_em_csr_agent_m0_readdatavalid;                                      // em_pc_1_em_csr_translator:uav_readdatavalid -> em_pc_1_em_csr_agent:m0_readdatavalid
	wire          em_pc_1_em_csr_agent_m0_lock;                                               // em_pc_1_em_csr_agent:m0_lock -> em_pc_1_em_csr_translator:uav_lock
	wire   [31:0] em_pc_1_em_csr_agent_m0_writedata;                                          // em_pc_1_em_csr_agent:m0_writedata -> em_pc_1_em_csr_translator:uav_writedata
	wire          em_pc_1_em_csr_agent_m0_write;                                              // em_pc_1_em_csr_agent:m0_write -> em_pc_1_em_csr_translator:uav_write
	wire    [2:0] em_pc_1_em_csr_agent_m0_burstcount;                                         // em_pc_1_em_csr_agent:m0_burstcount -> em_pc_1_em_csr_translator:uav_burstcount
	wire          em_pc_1_em_csr_agent_rf_source_valid;                                       // em_pc_1_em_csr_agent:rf_source_valid -> em_pc_1_em_csr_agent_rsp_fifo:in_valid
	wire  [102:0] em_pc_1_em_csr_agent_rf_source_data;                                        // em_pc_1_em_csr_agent:rf_source_data -> em_pc_1_em_csr_agent_rsp_fifo:in_data
	wire          em_pc_1_em_csr_agent_rf_source_ready;                                       // em_pc_1_em_csr_agent_rsp_fifo:in_ready -> em_pc_1_em_csr_agent:rf_source_ready
	wire          em_pc_1_em_csr_agent_rf_source_startofpacket;                               // em_pc_1_em_csr_agent:rf_source_startofpacket -> em_pc_1_em_csr_agent_rsp_fifo:in_startofpacket
	wire          em_pc_1_em_csr_agent_rf_source_endofpacket;                                 // em_pc_1_em_csr_agent:rf_source_endofpacket -> em_pc_1_em_csr_agent_rsp_fifo:in_endofpacket
	wire          em_pc_1_em_csr_agent_rsp_fifo_out_valid;                                    // em_pc_1_em_csr_agent_rsp_fifo:out_valid -> em_pc_1_em_csr_agent:rf_sink_valid
	wire  [102:0] em_pc_1_em_csr_agent_rsp_fifo_out_data;                                     // em_pc_1_em_csr_agent_rsp_fifo:out_data -> em_pc_1_em_csr_agent:rf_sink_data
	wire          em_pc_1_em_csr_agent_rsp_fifo_out_ready;                                    // em_pc_1_em_csr_agent:rf_sink_ready -> em_pc_1_em_csr_agent_rsp_fifo:out_ready
	wire          em_pc_1_em_csr_agent_rsp_fifo_out_startofpacket;                            // em_pc_1_em_csr_agent_rsp_fifo:out_startofpacket -> em_pc_1_em_csr_agent:rf_sink_startofpacket
	wire          em_pc_1_em_csr_agent_rsp_fifo_out_endofpacket;                              // em_pc_1_em_csr_agent_rsp_fifo:out_endofpacket -> em_pc_1_em_csr_agent:rf_sink_endofpacket
	wire          em_pc_1_em_csr_agent_rdata_fifo_src_valid;                                  // em_pc_1_em_csr_agent:rdata_fifo_src_valid -> em_pc_1_em_csr_agent_rdata_fifo:in_valid
	wire   [33:0] em_pc_1_em_csr_agent_rdata_fifo_src_data;                                   // em_pc_1_em_csr_agent:rdata_fifo_src_data -> em_pc_1_em_csr_agent_rdata_fifo:in_data
	wire          em_pc_1_em_csr_agent_rdata_fifo_src_ready;                                  // em_pc_1_em_csr_agent_rdata_fifo:in_ready -> em_pc_1_em_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                      // cmd_mux_006:src_valid -> em_pc_1_em_csr_agent:cp_valid
	wire  [101:0] cmd_mux_006_src_data;                                                       // cmd_mux_006:src_data -> em_pc_1_em_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                      // em_pc_1_em_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [9:0] cmd_mux_006_src_channel;                                                    // cmd_mux_006:src_channel -> em_pc_1_em_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                              // cmd_mux_006:src_startofpacket -> em_pc_1_em_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                // cmd_mux_006:src_endofpacket -> em_pc_1_em_csr_agent:cp_endofpacket
	wire  [511:0] dma_0_s_nondma_agent_m0_readdata;                                           // dma_0_s_nondma_translator:uav_readdata -> dma_0_s_nondma_agent:m0_readdata
	wire          dma_0_s_nondma_agent_m0_waitrequest;                                        // dma_0_s_nondma_translator:uav_waitrequest -> dma_0_s_nondma_agent:m0_waitrequest
	wire          dma_0_s_nondma_agent_m0_debugaccess;                                        // dma_0_s_nondma_agent:m0_debugaccess -> dma_0_s_nondma_translator:uav_debugaccess
	wire   [17:0] dma_0_s_nondma_agent_m0_address;                                            // dma_0_s_nondma_agent:m0_address -> dma_0_s_nondma_translator:uav_address
	wire   [63:0] dma_0_s_nondma_agent_m0_byteenable;                                         // dma_0_s_nondma_agent:m0_byteenable -> dma_0_s_nondma_translator:uav_byteenable
	wire          dma_0_s_nondma_agent_m0_read;                                               // dma_0_s_nondma_agent:m0_read -> dma_0_s_nondma_translator:uav_read
	wire          dma_0_s_nondma_agent_m0_readdatavalid;                                      // dma_0_s_nondma_translator:uav_readdatavalid -> dma_0_s_nondma_agent:m0_readdatavalid
	wire          dma_0_s_nondma_agent_m0_lock;                                               // dma_0_s_nondma_agent:m0_lock -> dma_0_s_nondma_translator:uav_lock
	wire  [511:0] dma_0_s_nondma_agent_m0_writedata;                                          // dma_0_s_nondma_agent:m0_writedata -> dma_0_s_nondma_translator:uav_writedata
	wire          dma_0_s_nondma_agent_m0_write;                                              // dma_0_s_nondma_agent:m0_write -> dma_0_s_nondma_translator:uav_write
	wire   [10:0] dma_0_s_nondma_agent_m0_burstcount;                                         // dma_0_s_nondma_agent:m0_burstcount -> dma_0_s_nondma_translator:uav_burstcount
	wire          dma_0_s_nondma_agent_rf_source_valid;                                       // dma_0_s_nondma_agent:rf_source_valid -> dma_0_s_nondma_agent_rsp_fifo:in_valid
	wire  [642:0] dma_0_s_nondma_agent_rf_source_data;                                        // dma_0_s_nondma_agent:rf_source_data -> dma_0_s_nondma_agent_rsp_fifo:in_data
	wire          dma_0_s_nondma_agent_rf_source_ready;                                       // dma_0_s_nondma_agent_rsp_fifo:in_ready -> dma_0_s_nondma_agent:rf_source_ready
	wire          dma_0_s_nondma_agent_rf_source_startofpacket;                               // dma_0_s_nondma_agent:rf_source_startofpacket -> dma_0_s_nondma_agent_rsp_fifo:in_startofpacket
	wire          dma_0_s_nondma_agent_rf_source_endofpacket;                                 // dma_0_s_nondma_agent:rf_source_endofpacket -> dma_0_s_nondma_agent_rsp_fifo:in_endofpacket
	wire          dma_0_s_nondma_agent_rsp_fifo_out_valid;                                    // dma_0_s_nondma_agent_rsp_fifo:out_valid -> dma_0_s_nondma_agent:rf_sink_valid
	wire  [642:0] dma_0_s_nondma_agent_rsp_fifo_out_data;                                     // dma_0_s_nondma_agent_rsp_fifo:out_data -> dma_0_s_nondma_agent:rf_sink_data
	wire          dma_0_s_nondma_agent_rsp_fifo_out_ready;                                    // dma_0_s_nondma_agent:rf_sink_ready -> dma_0_s_nondma_agent_rsp_fifo:out_ready
	wire          dma_0_s_nondma_agent_rsp_fifo_out_startofpacket;                            // dma_0_s_nondma_agent_rsp_fifo:out_startofpacket -> dma_0_s_nondma_agent:rf_sink_startofpacket
	wire          dma_0_s_nondma_agent_rsp_fifo_out_endofpacket;                              // dma_0_s_nondma_agent_rsp_fifo:out_endofpacket -> dma_0_s_nondma_agent:rf_sink_endofpacket
	wire          dma_0_s_nondma_agent_rdata_fifo_src_valid;                                  // dma_0_s_nondma_agent:rdata_fifo_src_valid -> dma_0_s_nondma_agent_rdata_fifo:in_valid
	wire  [513:0] dma_0_s_nondma_agent_rdata_fifo_src_data;                                   // dma_0_s_nondma_agent:rdata_fifo_src_data -> dma_0_s_nondma_agent_rdata_fifo:in_data
	wire          dma_0_s_nondma_agent_rdata_fifo_src_ready;                                  // dma_0_s_nondma_agent_rdata_fifo:in_ready -> dma_0_s_nondma_agent:rdata_fifo_src_ready
	wire   [31:0] uniphy_status_0_s_agent_m0_readdata;                                        // uniphy_status_0_s_translator:uav_readdata -> uniphy_status_0_s_agent:m0_readdata
	wire          uniphy_status_0_s_agent_m0_waitrequest;                                     // uniphy_status_0_s_translator:uav_waitrequest -> uniphy_status_0_s_agent:m0_waitrequest
	wire          uniphy_status_0_s_agent_m0_debugaccess;                                     // uniphy_status_0_s_agent:m0_debugaccess -> uniphy_status_0_s_translator:uav_debugaccess
	wire   [17:0] uniphy_status_0_s_agent_m0_address;                                         // uniphy_status_0_s_agent:m0_address -> uniphy_status_0_s_translator:uav_address
	wire    [3:0] uniphy_status_0_s_agent_m0_byteenable;                                      // uniphy_status_0_s_agent:m0_byteenable -> uniphy_status_0_s_translator:uav_byteenable
	wire          uniphy_status_0_s_agent_m0_read;                                            // uniphy_status_0_s_agent:m0_read -> uniphy_status_0_s_translator:uav_read
	wire          uniphy_status_0_s_agent_m0_readdatavalid;                                   // uniphy_status_0_s_translator:uav_readdatavalid -> uniphy_status_0_s_agent:m0_readdatavalid
	wire          uniphy_status_0_s_agent_m0_lock;                                            // uniphy_status_0_s_agent:m0_lock -> uniphy_status_0_s_translator:uav_lock
	wire   [31:0] uniphy_status_0_s_agent_m0_writedata;                                       // uniphy_status_0_s_agent:m0_writedata -> uniphy_status_0_s_translator:uav_writedata
	wire          uniphy_status_0_s_agent_m0_write;                                           // uniphy_status_0_s_agent:m0_write -> uniphy_status_0_s_translator:uav_write
	wire    [2:0] uniphy_status_0_s_agent_m0_burstcount;                                      // uniphy_status_0_s_agent:m0_burstcount -> uniphy_status_0_s_translator:uav_burstcount
	wire          uniphy_status_0_s_agent_rf_source_valid;                                    // uniphy_status_0_s_agent:rf_source_valid -> uniphy_status_0_s_agent_rsp_fifo:in_valid
	wire  [102:0] uniphy_status_0_s_agent_rf_source_data;                                     // uniphy_status_0_s_agent:rf_source_data -> uniphy_status_0_s_agent_rsp_fifo:in_data
	wire          uniphy_status_0_s_agent_rf_source_ready;                                    // uniphy_status_0_s_agent_rsp_fifo:in_ready -> uniphy_status_0_s_agent:rf_source_ready
	wire          uniphy_status_0_s_agent_rf_source_startofpacket;                            // uniphy_status_0_s_agent:rf_source_startofpacket -> uniphy_status_0_s_agent_rsp_fifo:in_startofpacket
	wire          uniphy_status_0_s_agent_rf_source_endofpacket;                              // uniphy_status_0_s_agent:rf_source_endofpacket -> uniphy_status_0_s_agent_rsp_fifo:in_endofpacket
	wire          uniphy_status_0_s_agent_rsp_fifo_out_valid;                                 // uniphy_status_0_s_agent_rsp_fifo:out_valid -> uniphy_status_0_s_agent:rf_sink_valid
	wire  [102:0] uniphy_status_0_s_agent_rsp_fifo_out_data;                                  // uniphy_status_0_s_agent_rsp_fifo:out_data -> uniphy_status_0_s_agent:rf_sink_data
	wire          uniphy_status_0_s_agent_rsp_fifo_out_ready;                                 // uniphy_status_0_s_agent:rf_sink_ready -> uniphy_status_0_s_agent_rsp_fifo:out_ready
	wire          uniphy_status_0_s_agent_rsp_fifo_out_startofpacket;                         // uniphy_status_0_s_agent_rsp_fifo:out_startofpacket -> uniphy_status_0_s_agent:rf_sink_startofpacket
	wire          uniphy_status_0_s_agent_rsp_fifo_out_endofpacket;                           // uniphy_status_0_s_agent_rsp_fifo:out_endofpacket -> uniphy_status_0_s_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                      // cmd_mux_008:src_valid -> uniphy_status_0_s_agent:cp_valid
	wire  [101:0] cmd_mux_008_src_data;                                                       // cmd_mux_008:src_data -> uniphy_status_0_s_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                      // uniphy_status_0_s_agent:cp_ready -> cmd_mux_008:src_ready
	wire    [9:0] cmd_mux_008_src_channel;                                                    // cmd_mux_008:src_channel -> uniphy_status_0_s_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                              // cmd_mux_008:src_startofpacket -> uniphy_status_0_s_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                // cmd_mux_008:src_endofpacket -> uniphy_status_0_s_agent:cp_endofpacket
	wire   [31:0] version_id_0_s_agent_m0_readdata;                                           // version_id_0_s_translator:uav_readdata -> version_id_0_s_agent:m0_readdata
	wire          version_id_0_s_agent_m0_waitrequest;                                        // version_id_0_s_translator:uav_waitrequest -> version_id_0_s_agent:m0_waitrequest
	wire          version_id_0_s_agent_m0_debugaccess;                                        // version_id_0_s_agent:m0_debugaccess -> version_id_0_s_translator:uav_debugaccess
	wire   [17:0] version_id_0_s_agent_m0_address;                                            // version_id_0_s_agent:m0_address -> version_id_0_s_translator:uav_address
	wire    [3:0] version_id_0_s_agent_m0_byteenable;                                         // version_id_0_s_agent:m0_byteenable -> version_id_0_s_translator:uav_byteenable
	wire          version_id_0_s_agent_m0_read;                                               // version_id_0_s_agent:m0_read -> version_id_0_s_translator:uav_read
	wire          version_id_0_s_agent_m0_readdatavalid;                                      // version_id_0_s_translator:uav_readdatavalid -> version_id_0_s_agent:m0_readdatavalid
	wire          version_id_0_s_agent_m0_lock;                                               // version_id_0_s_agent:m0_lock -> version_id_0_s_translator:uav_lock
	wire   [31:0] version_id_0_s_agent_m0_writedata;                                          // version_id_0_s_agent:m0_writedata -> version_id_0_s_translator:uav_writedata
	wire          version_id_0_s_agent_m0_write;                                              // version_id_0_s_agent:m0_write -> version_id_0_s_translator:uav_write
	wire    [2:0] version_id_0_s_agent_m0_burstcount;                                         // version_id_0_s_agent:m0_burstcount -> version_id_0_s_translator:uav_burstcount
	wire          version_id_0_s_agent_rf_source_valid;                                       // version_id_0_s_agent:rf_source_valid -> version_id_0_s_agent_rsp_fifo:in_valid
	wire  [102:0] version_id_0_s_agent_rf_source_data;                                        // version_id_0_s_agent:rf_source_data -> version_id_0_s_agent_rsp_fifo:in_data
	wire          version_id_0_s_agent_rf_source_ready;                                       // version_id_0_s_agent_rsp_fifo:in_ready -> version_id_0_s_agent:rf_source_ready
	wire          version_id_0_s_agent_rf_source_startofpacket;                               // version_id_0_s_agent:rf_source_startofpacket -> version_id_0_s_agent_rsp_fifo:in_startofpacket
	wire          version_id_0_s_agent_rf_source_endofpacket;                                 // version_id_0_s_agent:rf_source_endofpacket -> version_id_0_s_agent_rsp_fifo:in_endofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_valid;                                    // version_id_0_s_agent_rsp_fifo:out_valid -> version_id_0_s_agent:rf_sink_valid
	wire  [102:0] version_id_0_s_agent_rsp_fifo_out_data;                                     // version_id_0_s_agent_rsp_fifo:out_data -> version_id_0_s_agent:rf_sink_data
	wire          version_id_0_s_agent_rsp_fifo_out_ready;                                    // version_id_0_s_agent:rf_sink_ready -> version_id_0_s_agent_rsp_fifo:out_ready
	wire          version_id_0_s_agent_rsp_fifo_out_startofpacket;                            // version_id_0_s_agent_rsp_fifo:out_startofpacket -> version_id_0_s_agent:rf_sink_startofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_endofpacket;                              // version_id_0_s_agent_rsp_fifo:out_endofpacket -> version_id_0_s_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                      // cmd_mux_009:src_valid -> version_id_0_s_agent:cp_valid
	wire  [101:0] cmd_mux_009_src_data;                                                       // cmd_mux_009:src_data -> version_id_0_s_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                      // version_id_0_s_agent:cp_ready -> cmd_mux_009:src_ready
	wire    [9:0] cmd_mux_009_src_channel;                                                    // cmd_mux_009:src_channel -> version_id_0_s_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                              // cmd_mux_009:src_startofpacket -> version_id_0_s_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                // cmd_mux_009:src_endofpacket -> version_id_0_s_agent:cp_endofpacket
	wire          pipe_stage_host_ctrl_m0_agent_cp_valid;                                     // pipe_stage_host_ctrl_m0_agent:cp_valid -> router:sink_valid
	wire  [101:0] pipe_stage_host_ctrl_m0_agent_cp_data;                                      // pipe_stage_host_ctrl_m0_agent:cp_data -> router:sink_data
	wire          pipe_stage_host_ctrl_m0_agent_cp_ready;                                     // router:sink_ready -> pipe_stage_host_ctrl_m0_agent:cp_ready
	wire          pipe_stage_host_ctrl_m0_agent_cp_startofpacket;                             // pipe_stage_host_ctrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pipe_stage_host_ctrl_m0_agent_cp_endofpacket;                               // pipe_stage_host_ctrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          temperature_0_s_agent_rp_valid;                                             // temperature_0_s_agent:rp_valid -> router_001:sink_valid
	wire  [101:0] temperature_0_s_agent_rp_data;                                              // temperature_0_s_agent:rp_data -> router_001:sink_data
	wire          temperature_0_s_agent_rp_ready;                                             // router_001:sink_ready -> temperature_0_s_agent:rp_ready
	wire          temperature_0_s_agent_rp_startofpacket;                                     // temperature_0_s_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          temperature_0_s_agent_rp_endofpacket;                                       // temperature_0_s_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> rsp_demux:sink_valid
	wire  [101:0] router_001_src_data;                                                        // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                       // rsp_demux:sink_ready -> router_001:src_ready
	wire    [9:0] router_001_src_channel;                                                     // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          acl_kernel_clk_ctrl_agent_rp_valid;                                         // acl_kernel_clk_ctrl_agent:rp_valid -> router_002:sink_valid
	wire  [101:0] acl_kernel_clk_ctrl_agent_rp_data;                                          // acl_kernel_clk_ctrl_agent:rp_data -> router_002:sink_data
	wire          acl_kernel_clk_ctrl_agent_rp_ready;                                         // router_002:sink_ready -> acl_kernel_clk_ctrl_agent:rp_ready
	wire          acl_kernel_clk_ctrl_agent_rp_startofpacket;                                 // acl_kernel_clk_ctrl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          acl_kernel_clk_ctrl_agent_rp_endofpacket;                                   // acl_kernel_clk_ctrl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [101:0] router_002_src_data;                                                        // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                       // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [9:0] router_002_src_channel;                                                     // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          kernel_interface_kernel_cntrl_agent_rp_valid;                               // kernel_interface_kernel_cntrl_agent:rp_valid -> router_003:sink_valid
	wire  [101:0] kernel_interface_kernel_cntrl_agent_rp_data;                                // kernel_interface_kernel_cntrl_agent:rp_data -> router_003:sink_data
	wire          kernel_interface_kernel_cntrl_agent_rp_ready;                               // router_003:sink_ready -> kernel_interface_kernel_cntrl_agent:rp_ready
	wire          kernel_interface_kernel_cntrl_agent_rp_startofpacket;                       // kernel_interface_kernel_cntrl_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          kernel_interface_kernel_cntrl_agent_rp_endofpacket;                         // kernel_interface_kernel_cntrl_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [101:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [9:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          dma_0_csr_agent_rp_valid;                                                   // dma_0_csr_agent:rp_valid -> router_004:sink_valid
	wire  [137:0] dma_0_csr_agent_rp_data;                                                    // dma_0_csr_agent:rp_data -> router_004:sink_data
	wire          dma_0_csr_agent_rp_ready;                                                   // router_004:sink_ready -> dma_0_csr_agent:rp_ready
	wire          dma_0_csr_agent_rp_startofpacket;                                           // dma_0_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dma_0_csr_agent_rp_endofpacket;                                             // dma_0_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          pcie_cra_agent_rp_valid;                                                    // pcie_Cra_agent:rp_valid -> router_005:sink_valid
	wire  [101:0] pcie_cra_agent_rp_data;                                                     // pcie_Cra_agent:rp_data -> router_005:sink_data
	wire          pcie_cra_agent_rp_ready;                                                    // router_005:sink_ready -> pcie_Cra_agent:rp_ready
	wire          pcie_cra_agent_rp_startofpacket;                                            // pcie_Cra_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pcie_cra_agent_rp_endofpacket;                                              // pcie_Cra_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [101:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                       // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [9:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          em_pc_0_em_csr_agent_rp_valid;                                              // em_pc_0_em_csr_agent:rp_valid -> router_006:sink_valid
	wire  [101:0] em_pc_0_em_csr_agent_rp_data;                                               // em_pc_0_em_csr_agent:rp_data -> router_006:sink_data
	wire          em_pc_0_em_csr_agent_rp_ready;                                              // router_006:sink_ready -> em_pc_0_em_csr_agent:rp_ready
	wire          em_pc_0_em_csr_agent_rp_startofpacket;                                      // em_pc_0_em_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          em_pc_0_em_csr_agent_rp_endofpacket;                                        // em_pc_0_em_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [101:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                       // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [9:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          em_pc_1_em_csr_agent_rp_valid;                                              // em_pc_1_em_csr_agent:rp_valid -> router_007:sink_valid
	wire  [101:0] em_pc_1_em_csr_agent_rp_data;                                               // em_pc_1_em_csr_agent:rp_data -> router_007:sink_data
	wire          em_pc_1_em_csr_agent_rp_ready;                                              // router_007:sink_ready -> em_pc_1_em_csr_agent:rp_ready
	wire          em_pc_1_em_csr_agent_rp_startofpacket;                                      // em_pc_1_em_csr_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          em_pc_1_em_csr_agent_rp_endofpacket;                                        // em_pc_1_em_csr_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                       // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [101:0] router_007_src_data;                                                        // router_007:src_data -> rsp_demux_006:sink_data
	wire          router_007_src_ready;                                                       // rsp_demux_006:sink_ready -> router_007:src_ready
	wire    [9:0] router_007_src_channel;                                                     // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_startofpacket;                                               // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_007_src_endofpacket;                                                 // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          dma_0_s_nondma_agent_rp_valid;                                              // dma_0_s_nondma_agent:rp_valid -> router_008:sink_valid
	wire  [641:0] dma_0_s_nondma_agent_rp_data;                                               // dma_0_s_nondma_agent:rp_data -> router_008:sink_data
	wire          dma_0_s_nondma_agent_rp_ready;                                              // router_008:sink_ready -> dma_0_s_nondma_agent:rp_ready
	wire          dma_0_s_nondma_agent_rp_startofpacket;                                      // dma_0_s_nondma_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          dma_0_s_nondma_agent_rp_endofpacket;                                        // dma_0_s_nondma_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          uniphy_status_0_s_agent_rp_valid;                                           // uniphy_status_0_s_agent:rp_valid -> router_009:sink_valid
	wire  [101:0] uniphy_status_0_s_agent_rp_data;                                            // uniphy_status_0_s_agent:rp_data -> router_009:sink_data
	wire          uniphy_status_0_s_agent_rp_ready;                                           // router_009:sink_ready -> uniphy_status_0_s_agent:rp_ready
	wire          uniphy_status_0_s_agent_rp_startofpacket;                                   // uniphy_status_0_s_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          uniphy_status_0_s_agent_rp_endofpacket;                                     // uniphy_status_0_s_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                       // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [101:0] router_009_src_data;                                                        // router_009:src_data -> rsp_demux_008:sink_data
	wire          router_009_src_ready;                                                       // rsp_demux_008:sink_ready -> router_009:src_ready
	wire    [9:0] router_009_src_channel;                                                     // router_009:src_channel -> rsp_demux_008:sink_channel
	wire          router_009_src_startofpacket;                                               // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_009_src_endofpacket;                                                 // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          version_id_0_s_agent_rp_valid;                                              // version_id_0_s_agent:rp_valid -> router_010:sink_valid
	wire  [101:0] version_id_0_s_agent_rp_data;                                               // version_id_0_s_agent:rp_data -> router_010:sink_data
	wire          version_id_0_s_agent_rp_ready;                                              // router_010:sink_ready -> version_id_0_s_agent:rp_ready
	wire          version_id_0_s_agent_rp_startofpacket;                                      // version_id_0_s_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          version_id_0_s_agent_rp_endofpacket;                                        // version_id_0_s_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                       // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [101:0] router_010_src_data;                                                        // router_010:src_data -> rsp_demux_009:sink_data
	wire          router_010_src_ready;                                                       // rsp_demux_009:sink_ready -> router_010:src_ready
	wire    [9:0] router_010_src_channel;                                                     // router_010:src_channel -> rsp_demux_009:sink_channel
	wire          router_010_src_startofpacket;                                               // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_010_src_endofpacket;                                                 // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_valid
	wire  [101:0] router_src_data;                                                            // router:src_data -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // pipe_stage_host_ctrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [9:0] router_src_channel;                                                         // router:src_channel -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_endofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_valid;                              // pipe_stage_host_ctrl_m0_limiter:rsp_src_valid -> pipe_stage_host_ctrl_m0_agent:rp_valid
	wire  [101:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_data;                               // pipe_stage_host_ctrl_m0_limiter:rsp_src_data -> pipe_stage_host_ctrl_m0_agent:rp_data
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_ready;                              // pipe_stage_host_ctrl_m0_agent:rp_ready -> pipe_stage_host_ctrl_m0_limiter:rsp_src_ready
	wire    [9:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:rsp_src_channel -> pipe_stage_host_ctrl_m0_agent:rp_channel
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:rsp_src_startofpacket -> pipe_stage_host_ctrl_m0_agent:rp_startofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:rsp_src_endofpacket -> pipe_stage_host_ctrl_m0_agent:rp_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [101:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [9:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [101:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                       // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [9:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                       // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [101:0] cmd_demux_src8_data;                                                        // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                       // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [9:0] cmd_demux_src8_channel;                                                     // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                               // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                 // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                       // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [101:0] cmd_demux_src9_data;                                                        // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                       // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire    [9:0] cmd_demux_src9_channel;                                                     // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                               // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                 // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [101:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [9:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [101:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                   // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [9:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_008_src0_valid;                                                   // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [101:0] rsp_demux_008_src0_data;                                                    // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                   // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [9:0] rsp_demux_008_src0_channel;                                                 // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                           // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                             // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                   // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [101:0] rsp_demux_009_src0_data;                                                    // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                   // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire    [9:0] rsp_demux_009_src0_channel;                                                 // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                           // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                             // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> dma_0_csr_cmd_width_adapter:in_valid
	wire  [101:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> dma_0_csr_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                      // dma_0_csr_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [9:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> dma_0_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> dma_0_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> dma_0_csr_cmd_width_adapter:in_endofpacket
	wire          dma_0_csr_cmd_width_adapter_src_valid;                                      // dma_0_csr_cmd_width_adapter:out_valid -> dma_0_csr_agent:cp_valid
	wire  [137:0] dma_0_csr_cmd_width_adapter_src_data;                                       // dma_0_csr_cmd_width_adapter:out_data -> dma_0_csr_agent:cp_data
	wire          dma_0_csr_cmd_width_adapter_src_ready;                                      // dma_0_csr_agent:cp_ready -> dma_0_csr_cmd_width_adapter:out_ready
	wire    [9:0] dma_0_csr_cmd_width_adapter_src_channel;                                    // dma_0_csr_cmd_width_adapter:out_channel -> dma_0_csr_agent:cp_channel
	wire          dma_0_csr_cmd_width_adapter_src_startofpacket;                              // dma_0_csr_cmd_width_adapter:out_startofpacket -> dma_0_csr_agent:cp_startofpacket
	wire          dma_0_csr_cmd_width_adapter_src_endofpacket;                                // dma_0_csr_cmd_width_adapter:out_endofpacket -> dma_0_csr_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                      // cmd_mux_007:src_valid -> dma_0_s_nondma_cmd_width_adapter:in_valid
	wire  [101:0] cmd_mux_007_src_data;                                                       // cmd_mux_007:src_data -> dma_0_s_nondma_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                                      // dma_0_s_nondma_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire    [9:0] cmd_mux_007_src_channel;                                                    // cmd_mux_007:src_channel -> dma_0_s_nondma_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                                              // cmd_mux_007:src_startofpacket -> dma_0_s_nondma_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                // cmd_mux_007:src_endofpacket -> dma_0_s_nondma_cmd_width_adapter:in_endofpacket
	wire          dma_0_s_nondma_cmd_width_adapter_src_valid;                                 // dma_0_s_nondma_cmd_width_adapter:out_valid -> dma_0_s_nondma_agent:cp_valid
	wire  [641:0] dma_0_s_nondma_cmd_width_adapter_src_data;                                  // dma_0_s_nondma_cmd_width_adapter:out_data -> dma_0_s_nondma_agent:cp_data
	wire          dma_0_s_nondma_cmd_width_adapter_src_ready;                                 // dma_0_s_nondma_agent:cp_ready -> dma_0_s_nondma_cmd_width_adapter:out_ready
	wire    [9:0] dma_0_s_nondma_cmd_width_adapter_src_channel;                               // dma_0_s_nondma_cmd_width_adapter:out_channel -> dma_0_s_nondma_agent:cp_channel
	wire          dma_0_s_nondma_cmd_width_adapter_src_startofpacket;                         // dma_0_s_nondma_cmd_width_adapter:out_startofpacket -> dma_0_s_nondma_agent:cp_startofpacket
	wire          dma_0_s_nondma_cmd_width_adapter_src_endofpacket;                           // dma_0_s_nondma_cmd_width_adapter:out_endofpacket -> dma_0_s_nondma_agent:cp_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> dma_0_csr_rsp_width_adapter:in_valid
	wire  [137:0] router_004_src_data;                                                        // router_004:src_data -> dma_0_csr_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                       // dma_0_csr_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [9:0] router_004_src_channel;                                                     // router_004:src_channel -> dma_0_csr_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> dma_0_csr_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> dma_0_csr_rsp_width_adapter:in_endofpacket
	wire          dma_0_csr_rsp_width_adapter_src_valid;                                      // dma_0_csr_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [101:0] dma_0_csr_rsp_width_adapter_src_data;                                       // dma_0_csr_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          dma_0_csr_rsp_width_adapter_src_ready;                                      // rsp_demux_003:sink_ready -> dma_0_csr_rsp_width_adapter:out_ready
	wire    [9:0] dma_0_csr_rsp_width_adapter_src_channel;                                    // dma_0_csr_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          dma_0_csr_rsp_width_adapter_src_startofpacket;                              // dma_0_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          dma_0_csr_rsp_width_adapter_src_endofpacket;                                // dma_0_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_008_src_valid;                                                       // router_008:src_valid -> dma_0_s_nondma_rsp_width_adapter:in_valid
	wire  [641:0] router_008_src_data;                                                        // router_008:src_data -> dma_0_s_nondma_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                       // dma_0_s_nondma_rsp_width_adapter:in_ready -> router_008:src_ready
	wire    [9:0] router_008_src_channel;                                                     // router_008:src_channel -> dma_0_s_nondma_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                               // router_008:src_startofpacket -> dma_0_s_nondma_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                 // router_008:src_endofpacket -> dma_0_s_nondma_rsp_width_adapter:in_endofpacket
	wire          dma_0_s_nondma_rsp_width_adapter_src_valid;                                 // dma_0_s_nondma_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [101:0] dma_0_s_nondma_rsp_width_adapter_src_data;                                  // dma_0_s_nondma_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          dma_0_s_nondma_rsp_width_adapter_src_ready;                                 // rsp_demux_007:sink_ready -> dma_0_s_nondma_rsp_width_adapter:out_ready
	wire    [9:0] dma_0_s_nondma_rsp_width_adapter_src_channel;                               // dma_0_s_nondma_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          dma_0_s_nondma_rsp_width_adapter_src_startofpacket;                         // dma_0_s_nondma_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          dma_0_s_nondma_rsp_width_adapter_src_endofpacket;                           // dma_0_s_nondma_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> crosser:in_valid
	wire  [101:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                       // crosser:in_ready -> cmd_demux:src0_ready
	wire    [9:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                          // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [101:0] crosser_out_data;                                                           // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                          // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [9:0] crosser_out_channel;                                                        // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                  // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                    // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [101:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                       // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [9:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                      // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [101:0] crosser_001_out_data;                                                       // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                      // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [9:0] crosser_001_out_channel;                                                    // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                              // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> crosser_002:in_valid
	wire  [101:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> crosser_002:in_data
	wire          cmd_demux_src3_ready;                                                       // crosser_002:in_ready -> cmd_demux:src3_ready
	wire    [9:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> crosser_002:in_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                      // crosser_002:out_valid -> cmd_mux_003:sink0_valid
	wire  [101:0] crosser_002_out_data;                                                       // crosser_002:out_data -> cmd_mux_003:sink0_data
	wire          crosser_002_out_ready;                                                      // cmd_mux_003:sink0_ready -> crosser_002:out_ready
	wire    [9:0] crosser_002_out_channel;                                                    // crosser_002:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_002_out_startofpacket;                                              // crosser_002:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                // crosser_002:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                       // cmd_demux:src5_valid -> crosser_003:in_valid
	wire  [101:0] cmd_demux_src5_data;                                                        // cmd_demux:src5_data -> crosser_003:in_data
	wire          cmd_demux_src5_ready;                                                       // crosser_003:in_ready -> cmd_demux:src5_ready
	wire    [9:0] cmd_demux_src5_channel;                                                     // cmd_demux:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_src5_startofpacket;                                               // cmd_demux:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                 // cmd_demux:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                      // crosser_003:out_valid -> cmd_mux_005:sink0_valid
	wire  [101:0] crosser_003_out_data;                                                       // crosser_003:out_data -> cmd_mux_005:sink0_data
	wire          crosser_003_out_ready;                                                      // cmd_mux_005:sink0_ready -> crosser_003:out_ready
	wire    [9:0] crosser_003_out_channel;                                                    // crosser_003:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_003_out_startofpacket;                                              // crosser_003:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                // crosser_003:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                       // cmd_demux:src6_valid -> crosser_004:in_valid
	wire  [101:0] cmd_demux_src6_data;                                                        // cmd_demux:src6_data -> crosser_004:in_data
	wire          cmd_demux_src6_ready;                                                       // crosser_004:in_ready -> cmd_demux:src6_ready
	wire    [9:0] cmd_demux_src6_channel;                                                     // cmd_demux:src6_channel -> crosser_004:in_channel
	wire          cmd_demux_src6_startofpacket;                                               // cmd_demux:src6_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                 // cmd_demux:src6_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                      // crosser_004:out_valid -> cmd_mux_006:sink0_valid
	wire  [101:0] crosser_004_out_data;                                                       // crosser_004:out_data -> cmd_mux_006:sink0_data
	wire          crosser_004_out_ready;                                                      // cmd_mux_006:sink0_ready -> crosser_004:out_ready
	wire    [9:0] crosser_004_out_channel;                                                    // crosser_004:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_004_out_startofpacket;                                              // crosser_004:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                // crosser_004:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                       // cmd_demux:src7_valid -> crosser_005:in_valid
	wire  [101:0] cmd_demux_src7_data;                                                        // cmd_demux:src7_data -> crosser_005:in_data
	wire          cmd_demux_src7_ready;                                                       // crosser_005:in_ready -> cmd_demux:src7_ready
	wire    [9:0] cmd_demux_src7_channel;                                                     // cmd_demux:src7_channel -> crosser_005:in_channel
	wire          cmd_demux_src7_startofpacket;                                               // cmd_demux:src7_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                 // cmd_demux:src7_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                      // crosser_005:out_valid -> cmd_mux_007:sink0_valid
	wire  [101:0] crosser_005_out_data;                                                       // crosser_005:out_data -> cmd_mux_007:sink0_data
	wire          crosser_005_out_ready;                                                      // cmd_mux_007:sink0_ready -> crosser_005:out_ready
	wire    [9:0] crosser_005_out_channel;                                                    // crosser_005:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_005_out_startofpacket;                                              // crosser_005:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                // crosser_005:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> crosser_006:in_valid
	wire  [101:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> crosser_006:in_data
	wire          rsp_demux_src0_ready;                                                       // crosser_006:in_ready -> rsp_demux:src0_ready
	wire    [9:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                      // crosser_006:out_valid -> rsp_mux:sink0_valid
	wire  [101:0] crosser_006_out_data;                                                       // crosser_006:out_data -> rsp_mux:sink0_data
	wire          crosser_006_out_ready;                                                      // rsp_mux:sink0_ready -> crosser_006:out_ready
	wire    [9:0] crosser_006_out_channel;                                                    // crosser_006:out_channel -> rsp_mux:sink0_channel
	wire          crosser_006_out_startofpacket;                                              // crosser_006:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                // crosser_006:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> crosser_007:in_valid
	wire  [101:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> crosser_007:in_data
	wire          rsp_demux_001_src0_ready;                                                   // crosser_007:in_ready -> rsp_demux_001:src0_ready
	wire    [9:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                      // crosser_007:out_valid -> rsp_mux:sink1_valid
	wire  [101:0] crosser_007_out_data;                                                       // crosser_007:out_data -> rsp_mux:sink1_data
	wire          crosser_007_out_ready;                                                      // rsp_mux:sink1_ready -> crosser_007:out_ready
	wire    [9:0] crosser_007_out_channel;                                                    // crosser_007:out_channel -> rsp_mux:sink1_channel
	wire          crosser_007_out_startofpacket;                                              // crosser_007:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                // crosser_007:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> crosser_008:in_valid
	wire  [101:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> crosser_008:in_data
	wire          rsp_demux_003_src0_ready;                                                   // crosser_008:in_ready -> rsp_demux_003:src0_ready
	wire    [9:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> crosser_008:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                      // crosser_008:out_valid -> rsp_mux:sink3_valid
	wire  [101:0] crosser_008_out_data;                                                       // crosser_008:out_data -> rsp_mux:sink3_data
	wire          crosser_008_out_ready;                                                      // rsp_mux:sink3_ready -> crosser_008:out_ready
	wire    [9:0] crosser_008_out_channel;                                                    // crosser_008:out_channel -> rsp_mux:sink3_channel
	wire          crosser_008_out_startofpacket;                                              // crosser_008:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_008_out_endofpacket;                                                // crosser_008:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                   // rsp_demux_005:src0_valid -> crosser_009:in_valid
	wire  [101:0] rsp_demux_005_src0_data;                                                    // rsp_demux_005:src0_data -> crosser_009:in_data
	wire          rsp_demux_005_src0_ready;                                                   // crosser_009:in_ready -> rsp_demux_005:src0_ready
	wire    [9:0] rsp_demux_005_src0_channel;                                                 // rsp_demux_005:src0_channel -> crosser_009:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                           // rsp_demux_005:src0_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                             // rsp_demux_005:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                      // crosser_009:out_valid -> rsp_mux:sink5_valid
	wire  [101:0] crosser_009_out_data;                                                       // crosser_009:out_data -> rsp_mux:sink5_data
	wire          crosser_009_out_ready;                                                      // rsp_mux:sink5_ready -> crosser_009:out_ready
	wire    [9:0] crosser_009_out_channel;                                                    // crosser_009:out_channel -> rsp_mux:sink5_channel
	wire          crosser_009_out_startofpacket;                                              // crosser_009:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_009_out_endofpacket;                                                // crosser_009:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                   // rsp_demux_006:src0_valid -> crosser_010:in_valid
	wire  [101:0] rsp_demux_006_src0_data;                                                    // rsp_demux_006:src0_data -> crosser_010:in_data
	wire          rsp_demux_006_src0_ready;                                                   // crosser_010:in_ready -> rsp_demux_006:src0_ready
	wire    [9:0] rsp_demux_006_src0_channel;                                                 // rsp_demux_006:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                           // rsp_demux_006:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                             // rsp_demux_006:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                      // crosser_010:out_valid -> rsp_mux:sink6_valid
	wire  [101:0] crosser_010_out_data;                                                       // crosser_010:out_data -> rsp_mux:sink6_data
	wire          crosser_010_out_ready;                                                      // rsp_mux:sink6_ready -> crosser_010:out_ready
	wire    [9:0] crosser_010_out_channel;                                                    // crosser_010:out_channel -> rsp_mux:sink6_channel
	wire          crosser_010_out_startofpacket;                                              // crosser_010:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_010_out_endofpacket;                                                // crosser_010:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                   // rsp_demux_007:src0_valid -> crosser_011:in_valid
	wire  [101:0] rsp_demux_007_src0_data;                                                    // rsp_demux_007:src0_data -> crosser_011:in_data
	wire          rsp_demux_007_src0_ready;                                                   // crosser_011:in_ready -> rsp_demux_007:src0_ready
	wire    [9:0] rsp_demux_007_src0_channel;                                                 // rsp_demux_007:src0_channel -> crosser_011:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                           // rsp_demux_007:src0_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                             // rsp_demux_007:src0_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                      // crosser_011:out_valid -> rsp_mux:sink7_valid
	wire  [101:0] crosser_011_out_data;                                                       // crosser_011:out_data -> rsp_mux:sink7_data
	wire          crosser_011_out_ready;                                                      // rsp_mux:sink7_ready -> crosser_011:out_ready
	wire    [9:0] crosser_011_out_channel;                                                    // crosser_011:out_channel -> rsp_mux:sink7_channel
	wire          crosser_011_out_startofpacket;                                              // crosser_011:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_011_out_endofpacket;                                                // crosser_011:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire    [0:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_valid;                              // pipe_stage_host_ctrl_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [101:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_data;                               // pipe_stage_host_ctrl_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> pipe_stage_host_ctrl_m0_limiter:cmd_src_ready
	wire    [9:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                             // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [101:0] limiter_pipeline_source0_data;                                              // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                             // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [9:0] limiter_pipeline_source0_channel;                                           // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                     // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                       // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [101:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                          // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [9:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                         // limiter_pipeline_001:out_valid -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_valid
	wire  [101:0] limiter_pipeline_001_source0_data;                                          // limiter_pipeline_001:out_data -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                         // pipe_stage_host_ctrl_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [9:0] limiter_pipeline_001_source0_channel;                                       // limiter_pipeline_001:out_channel -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                 // limiter_pipeline_001:out_startofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                   // limiter_pipeline_001:out_endofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_endofpacket
	wire          temperature_0_s_agent_rdata_fifo_out_valid;                                 // temperature_0_s_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] temperature_0_s_agent_rdata_fifo_out_data;                                  // temperature_0_s_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          temperature_0_s_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter:in_0_ready -> temperature_0_s_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                              // avalon_st_adapter:out_0_valid -> temperature_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                               // avalon_st_adapter:out_0_data -> temperature_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                              // temperature_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                              // avalon_st_adapter:out_0_error -> temperature_0_s_agent:rdata_fifo_sink_error
	wire          acl_kernel_clk_ctrl_agent_rdata_fifo_out_valid;                             // acl_kernel_clk_ctrl_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] acl_kernel_clk_ctrl_agent_rdata_fifo_out_data;                              // acl_kernel_clk_ctrl_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          acl_kernel_clk_ctrl_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_001:in_0_ready -> acl_kernel_clk_ctrl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                          // avalon_st_adapter_001:out_0_valid -> acl_kernel_clk_ctrl_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                           // avalon_st_adapter_001:out_0_data -> acl_kernel_clk_ctrl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                          // acl_kernel_clk_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                          // avalon_st_adapter_001:out_0_error -> acl_kernel_clk_ctrl_agent:rdata_fifo_sink_error
	wire          kernel_interface_kernel_cntrl_agent_rdata_fifo_src_valid;                   // kernel_interface_kernel_cntrl_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] kernel_interface_kernel_cntrl_agent_rdata_fifo_src_data;                    // kernel_interface_kernel_cntrl_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          kernel_interface_kernel_cntrl_agent_rdata_fifo_src_ready;                   // avalon_st_adapter_002:in_0_ready -> kernel_interface_kernel_cntrl_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                          // avalon_st_adapter_002:out_0_valid -> kernel_interface_kernel_cntrl_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                           // avalon_st_adapter_002:out_0_data -> kernel_interface_kernel_cntrl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                          // kernel_interface_kernel_cntrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                          // avalon_st_adapter_002:out_0_error -> kernel_interface_kernel_cntrl_agent:rdata_fifo_sink_error
	wire          dma_0_csr_agent_rdata_fifo_out_valid;                                       // dma_0_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [65:0] dma_0_csr_agent_rdata_fifo_out_data;                                        // dma_0_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          dma_0_csr_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_003:in_0_ready -> dma_0_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                          // avalon_st_adapter_003:out_0_valid -> dma_0_csr_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_003_out_0_data;                                           // avalon_st_adapter_003:out_0_data -> dma_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                          // dma_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                          // avalon_st_adapter_003:out_0_error -> dma_0_csr_agent:rdata_fifo_sink_error
	wire          pcie_cra_agent_rdata_fifo_src_valid;                                        // pcie_Cra_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] pcie_cra_agent_rdata_fifo_src_data;                                         // pcie_Cra_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          pcie_cra_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_004:in_0_ready -> pcie_Cra_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                          // avalon_st_adapter_004:out_0_valid -> pcie_Cra_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                           // avalon_st_adapter_004:out_0_data -> pcie_Cra_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                          // pcie_Cra_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                          // avalon_st_adapter_004:out_0_error -> pcie_Cra_agent:rdata_fifo_sink_error
	wire          em_pc_0_em_csr_agent_rdata_fifo_out_valid;                                  // em_pc_0_em_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] em_pc_0_em_csr_agent_rdata_fifo_out_data;                                   // em_pc_0_em_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          em_pc_0_em_csr_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_005:in_0_ready -> em_pc_0_em_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                          // avalon_st_adapter_005:out_0_valid -> em_pc_0_em_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                           // avalon_st_adapter_005:out_0_data -> em_pc_0_em_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                          // em_pc_0_em_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                          // avalon_st_adapter_005:out_0_error -> em_pc_0_em_csr_agent:rdata_fifo_sink_error
	wire          em_pc_1_em_csr_agent_rdata_fifo_out_valid;                                  // em_pc_1_em_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] em_pc_1_em_csr_agent_rdata_fifo_out_data;                                   // em_pc_1_em_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          em_pc_1_em_csr_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_006:in_0_ready -> em_pc_1_em_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                          // avalon_st_adapter_006:out_0_valid -> em_pc_1_em_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                           // avalon_st_adapter_006:out_0_data -> em_pc_1_em_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                          // em_pc_1_em_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                          // avalon_st_adapter_006:out_0_error -> em_pc_1_em_csr_agent:rdata_fifo_sink_error
	wire          dma_0_s_nondma_agent_rdata_fifo_out_valid;                                  // dma_0_s_nondma_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [513:0] dma_0_s_nondma_agent_rdata_fifo_out_data;                                   // dma_0_s_nondma_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          dma_0_s_nondma_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_007:in_0_ready -> dma_0_s_nondma_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                          // avalon_st_adapter_007:out_0_valid -> dma_0_s_nondma_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_007_out_0_data;                                           // avalon_st_adapter_007:out_0_data -> dma_0_s_nondma_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                          // dma_0_s_nondma_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                          // avalon_st_adapter_007:out_0_error -> dma_0_s_nondma_agent:rdata_fifo_sink_error
	wire          uniphy_status_0_s_agent_rdata_fifo_src_valid;                               // uniphy_status_0_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] uniphy_status_0_s_agent_rdata_fifo_src_data;                                // uniphy_status_0_s_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          uniphy_status_0_s_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_008:in_0_ready -> uniphy_status_0_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                          // avalon_st_adapter_008:out_0_valid -> uniphy_status_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                           // avalon_st_adapter_008:out_0_data -> uniphy_status_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                          // uniphy_status_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                          // avalon_st_adapter_008:out_0_error -> uniphy_status_0_s_agent:rdata_fifo_sink_error
	wire          version_id_0_s_agent_rdata_fifo_src_valid;                                  // version_id_0_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] version_id_0_s_agent_rdata_fifo_src_data;                                   // version_id_0_s_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          version_id_0_s_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_009:in_0_ready -> version_id_0_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                          // avalon_st_adapter_009:out_0_valid -> version_id_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                           // avalon_st_adapter_009:out_0_data -> version_id_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                          // version_id_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                          // avalon_st_adapter_009:out_0_error -> version_id_0_s_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pipe_stage_host_ctrl_m0_translator (
		.clk                    (pcie_coreclkout_clk),                                                        //                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pipe_stage_host_ctrl_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_host_ctrl_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pipe_stage_host_ctrl_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pipe_stage_host_ctrl_m0_byteenable),                                         //                          .byteenable
		.av_read                (pipe_stage_host_ctrl_m0_read),                                               //                          .read
		.av_readdata            (pipe_stage_host_ctrl_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pipe_stage_host_ctrl_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pipe_stage_host_ctrl_m0_write),                                              //                          .write
		.av_writedata           (pipe_stage_host_ctrl_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (pipe_stage_host_ctrl_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) temperature_0_s_translator (
		.clk                    (temperature_pll_outclk0_clk),                         //                      clk.clk
		.reset                  (temperature_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (temperature_0_s_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (temperature_0_s_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (temperature_0_s_agent_m0_read),                       //                         .read
		.uav_write              (temperature_0_s_agent_m0_write),                      //                         .write
		.uav_waitrequest        (temperature_0_s_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (temperature_0_s_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (temperature_0_s_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (temperature_0_s_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (temperature_0_s_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (temperature_0_s_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (temperature_0_s_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (temperature_0_s_address),                             //      avalon_anti_slave_0.address
		.av_write               (temperature_0_s_write),                               //                         .write
		.av_read                (temperature_0_s_read),                                //                         .read
		.av_readdata            (temperature_0_s_readdata),                            //                         .readdata
		.av_writedata           (temperature_0_s_writedata),                           //                         .writedata
		.av_byteenable          (temperature_0_s_byteenable),                          //                         .byteenable
		.av_readdatavalid       (temperature_0_s_readdatavalid),                       //                         .readdatavalid
		.av_waitrequest         (temperature_0_s_waitrequest),                         //                         .waitrequest
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) acl_kernel_clk_ctrl_translator (
		.clk                    (config_clk_out_clk_clk),                           //                      clk.clk
		.reset                  (acl_kernel_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (acl_kernel_clk_ctrl_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (acl_kernel_clk_ctrl_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (acl_kernel_clk_ctrl_agent_m0_read),                //                         .read
		.uav_write              (acl_kernel_clk_ctrl_agent_m0_write),               //                         .write
		.uav_waitrequest        (acl_kernel_clk_ctrl_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (acl_kernel_clk_ctrl_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (acl_kernel_clk_ctrl_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (acl_kernel_clk_ctrl_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (acl_kernel_clk_ctrl_agent_m0_writedata),           //                         .writedata
		.uav_lock               (acl_kernel_clk_ctrl_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (acl_kernel_clk_ctrl_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (acl_kernel_clk_ctrl_address),                      //      avalon_anti_slave_0.address
		.av_write               (acl_kernel_clk_ctrl_write),                        //                         .write
		.av_read                (acl_kernel_clk_ctrl_read),                         //                         .read
		.av_readdata            (acl_kernel_clk_ctrl_readdata),                     //                         .readdata
		.av_writedata           (acl_kernel_clk_ctrl_writedata),                    //                         .writedata
		.av_burstcount          (acl_kernel_clk_ctrl_burstcount),                   //                         .burstcount
		.av_byteenable          (acl_kernel_clk_ctrl_byteenable),                   //                         .byteenable
		.av_readdatavalid       (acl_kernel_clk_ctrl_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (acl_kernel_clk_ctrl_waitrequest),                  //                         .waitrequest
		.av_debugaccess         (acl_kernel_clk_ctrl_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) kernel_interface_kernel_cntrl_translator (
		.clk                    (pcie_coreclkout_clk),                                    //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (kernel_interface_kernel_cntrl_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (kernel_interface_kernel_cntrl_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (kernel_interface_kernel_cntrl_agent_m0_read),            //                         .read
		.uav_write              (kernel_interface_kernel_cntrl_agent_m0_write),           //                         .write
		.uav_waitrequest        (kernel_interface_kernel_cntrl_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (kernel_interface_kernel_cntrl_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (kernel_interface_kernel_cntrl_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (kernel_interface_kernel_cntrl_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (kernel_interface_kernel_cntrl_agent_m0_writedata),       //                         .writedata
		.uav_lock               (kernel_interface_kernel_cntrl_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (kernel_interface_kernel_cntrl_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (kernel_interface_kernel_cntrl_address),                  //      avalon_anti_slave_0.address
		.av_write               (kernel_interface_kernel_cntrl_write),                    //                         .write
		.av_read                (kernel_interface_kernel_cntrl_read),                     //                         .read
		.av_readdata            (kernel_interface_kernel_cntrl_readdata),                 //                         .readdata
		.av_writedata           (kernel_interface_kernel_cntrl_writedata),                //                         .writedata
		.av_burstcount          (kernel_interface_kernel_cntrl_burstcount),               //                         .burstcount
		.av_byteenable          (kernel_interface_kernel_cntrl_byteenable),               //                         .byteenable
		.av_readdatavalid       (kernel_interface_kernel_cntrl_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (kernel_interface_kernel_cntrl_waitrequest),              //                         .waitrequest
		.av_debugaccess         (kernel_interface_kernel_cntrl_debugaccess),              //                         .debugaccess
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_csr_translator (
		.clk                    (ddr3a_afi_clk_clk),                       //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_0_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (dma_0_csr_agent_m0_read),                 //                         .read
		.uav_write              (dma_0_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (dma_0_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (dma_0_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (dma_0_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (dma_0_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (dma_0_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (dma_0_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (dma_0_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (dma_0_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (dma_0_csr_write),                         //                         .write
		.av_read                (dma_0_csr_read),                          //                         .read
		.av_readdata            (dma_0_csr_readdata),                      //                         .readdata
		.av_writedata           (dma_0_csr_writedata),                     //                         .writedata
		.av_burstcount          (dma_0_csr_burstcount),                    //                         .burstcount
		.av_byteenable          (dma_0_csr_byteenable),                    //                         .byteenable
		.av_readdatavalid       (dma_0_csr_readdatavalid),                 //                         .readdatavalid
		.av_waitrequest         (dma_0_csr_waitrequest),                   //                         .waitrequest
		.av_debugaccess         (dma_0_csr_debugaccess),                   //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pcie_cra_translator (
		.clk                    (pcie_coreclkout_clk),                                   //                      clk.clk
		.reset                  (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pcie_cra_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (pcie_cra_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (pcie_cra_agent_m0_read),                                //                         .read
		.uav_write              (pcie_cra_agent_m0_write),                               //                         .write
		.uav_waitrequest        (pcie_cra_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (pcie_cra_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (pcie_cra_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (pcie_cra_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (pcie_cra_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (pcie_cra_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (pcie_cra_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (pcie_Cra_address),                                      //      avalon_anti_slave_0.address
		.av_write               (pcie_Cra_write),                                        //                         .write
		.av_read                (pcie_Cra_read),                                         //                         .read
		.av_readdata            (pcie_Cra_readdata),                                     //                         .readdata
		.av_writedata           (pcie_Cra_writedata),                                    //                         .writedata
		.av_byteenable          (pcie_Cra_byteenable),                                   //                         .byteenable
		.av_waitrequest         (pcie_Cra_waitrequest),                                  //                         .waitrequest
		.av_chipselect          (pcie_Cra_chipselect),                                   //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) em_pc_0_em_csr_translator (
		.clk                    (ddr3a_afi_clk_clk),                                           //                      clk.clk
		.reset                  (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (em_pc_0_em_csr_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (em_pc_0_em_csr_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (em_pc_0_em_csr_agent_m0_read),                                //                         .read
		.uav_write              (em_pc_0_em_csr_agent_m0_write),                               //                         .write
		.uav_waitrequest        (em_pc_0_em_csr_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (em_pc_0_em_csr_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (em_pc_0_em_csr_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (em_pc_0_em_csr_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (em_pc_0_em_csr_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (em_pc_0_em_csr_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (em_pc_0_em_csr_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (em_pc_0_em_csr_address),                                      //      avalon_anti_slave_0.address
		.av_write               (em_pc_0_em_csr_write),                                        //                         .write
		.av_read                (em_pc_0_em_csr_read),                                         //                         .read
		.av_readdata            (em_pc_0_em_csr_readdata),                                     //                         .readdata
		.av_writedata           (em_pc_0_em_csr_writedata),                                    //                         .writedata
		.av_burstcount          (em_pc_0_em_csr_burstcount),                                   //                         .burstcount
		.av_byteenable          (em_pc_0_em_csr_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (em_pc_0_em_csr_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (em_pc_0_em_csr_waitrequest),                                  //                         .waitrequest
		.av_debugaccess         (em_pc_0_em_csr_debugaccess),                                  //                         .debugaccess
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) em_pc_1_em_csr_translator (
		.clk                    (ddr3b_afi_clk_clk),                                           //                      clk.clk
		.reset                  (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (em_pc_1_em_csr_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (em_pc_1_em_csr_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (em_pc_1_em_csr_agent_m0_read),                                //                         .read
		.uav_write              (em_pc_1_em_csr_agent_m0_write),                               //                         .write
		.uav_waitrequest        (em_pc_1_em_csr_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (em_pc_1_em_csr_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (em_pc_1_em_csr_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (em_pc_1_em_csr_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (em_pc_1_em_csr_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (em_pc_1_em_csr_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (em_pc_1_em_csr_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (em_pc_1_em_csr_address),                                      //      avalon_anti_slave_0.address
		.av_write               (em_pc_1_em_csr_write),                                        //                         .write
		.av_read                (em_pc_1_em_csr_read),                                         //                         .read
		.av_readdata            (em_pc_1_em_csr_readdata),                                     //                         .readdata
		.av_writedata           (em_pc_1_em_csr_writedata),                                    //                         .writedata
		.av_burstcount          (em_pc_1_em_csr_burstcount),                                   //                         .burstcount
		.av_byteenable          (em_pc_1_em_csr_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (em_pc_1_em_csr_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (em_pc_1_em_csr_waitrequest),                                  //                         .waitrequest
		.av_debugaccess         (em_pc_1_em_csr_debugaccess),                                  //                         .debugaccess
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_s_nondma_translator (
		.clk                    (ddr3a_afi_clk_clk),                       //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_0_s_nondma_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_s_nondma_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (dma_0_s_nondma_agent_m0_read),            //                         .read
		.uav_write              (dma_0_s_nondma_agent_m0_write),           //                         .write
		.uav_waitrequest        (dma_0_s_nondma_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (dma_0_s_nondma_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (dma_0_s_nondma_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (dma_0_s_nondma_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (dma_0_s_nondma_agent_m0_writedata),       //                         .writedata
		.uav_lock               (dma_0_s_nondma_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (dma_0_s_nondma_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (dma_0_s_nondma_address),                  //      avalon_anti_slave_0.address
		.av_write               (dma_0_s_nondma_write),                    //                         .write
		.av_read                (dma_0_s_nondma_read),                     //                         .read
		.av_readdata            (dma_0_s_nondma_readdata),                 //                         .readdata
		.av_writedata           (dma_0_s_nondma_writedata),                //                         .writedata
		.av_burstcount          (dma_0_s_nondma_burstcount),               //                         .burstcount
		.av_byteenable          (dma_0_s_nondma_byteenable),               //                         .byteenable
		.av_readdatavalid       (dma_0_s_nondma_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (dma_0_s_nondma_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uniphy_status_0_s_translator (
		.clk                    (pcie_coreclkout_clk),                                   //                      clk.clk
		.reset                  (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uniphy_status_0_s_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (uniphy_status_0_s_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (uniphy_status_0_s_agent_m0_read),                       //                         .read
		.uav_write              (uniphy_status_0_s_agent_m0_write),                      //                         .write
		.uav_waitrequest        (uniphy_status_0_s_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (uniphy_status_0_s_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (uniphy_status_0_s_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (uniphy_status_0_s_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (uniphy_status_0_s_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (uniphy_status_0_s_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (uniphy_status_0_s_agent_m0_debugaccess),                //                         .debugaccess
		.av_read                (uniphy_status_0_s_read),                                //      avalon_anti_slave_0.read
		.av_readdata            (uniphy_status_0_s_readdata),                            //                         .readdata
		.av_address             (),                                                      //              (terminated)
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) version_id_0_s_translator (
		.clk                    (pcie_coreclkout_clk),                                   //                      clk.clk
		.reset                  (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (version_id_0_s_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (version_id_0_s_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (version_id_0_s_agent_m0_read),                          //                         .read
		.uav_write              (version_id_0_s_agent_m0_write),                         //                         .write
		.uav_waitrequest        (version_id_0_s_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (version_id_0_s_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (version_id_0_s_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (version_id_0_s_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (version_id_0_s_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (version_id_0_s_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (version_id_0_s_agent_m0_debugaccess),                   //                         .debugaccess
		.av_read                (version_id_0_s_read),                                   //      avalon_anti_slave_0.read
		.av_readdata            (version_id_0_s_readdata),                               //                         .readdata
		.av_address             (),                                                      //              (terminated)
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (80),
		.PKT_QOS_L                 (80),
		.PKT_DATA_SIDEBAND_H       (78),
		.PKT_DATA_SIDEBAND_L       (78),
		.PKT_ADDR_SIDEBAND_H       (77),
		.PKT_ADDR_SIDEBAND_L       (77),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pipe_stage_host_ctrl_m0_agent (
		.clk                   (pcie_coreclkout_clk),                                                        //       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pipe_stage_host_ctrl_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pipe_stage_host_ctrl_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pipe_stage_host_ctrl_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) temperature_0_s_agent (
		.clk                     (temperature_pll_outclk0_clk),                         //             clk.clk
		.reset                   (temperature_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (temperature_0_s_agent_m0_address),                    //              m0.address
		.m0_burstcount           (temperature_0_s_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (temperature_0_s_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (temperature_0_s_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (temperature_0_s_agent_m0_lock),                       //                .lock
		.m0_readdata             (temperature_0_s_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (temperature_0_s_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (temperature_0_s_agent_m0_read),                       //                .read
		.m0_waitrequest          (temperature_0_s_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (temperature_0_s_agent_m0_writedata),                  //                .writedata
		.m0_write                (temperature_0_s_agent_m0_write),                      //                .write
		.rp_endofpacket          (temperature_0_s_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (temperature_0_s_agent_rp_ready),                      //                .ready
		.rp_valid                (temperature_0_s_agent_rp_valid),                      //                .valid
		.rp_data                 (temperature_0_s_agent_rp_data),                       //                .data
		.rp_startofpacket        (temperature_0_s_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                 //                .channel
		.rf_sink_ready           (temperature_0_s_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (temperature_0_s_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (temperature_0_s_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (temperature_0_s_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (temperature_0_s_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (temperature_0_s_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (temperature_0_s_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (temperature_0_s_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (temperature_0_s_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (temperature_0_s_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (temperature_0_s_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (temperature_0_s_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (temperature_0_s_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) temperature_0_s_agent_rsp_fifo (
		.clk               (temperature_pll_outclk0_clk),                         //       clk.clk
		.reset             (temperature_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (temperature_0_s_agent_rf_source_data),                //        in.data
		.in_valid          (temperature_0_s_agent_rf_source_valid),               //          .valid
		.in_ready          (temperature_0_s_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (temperature_0_s_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (temperature_0_s_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (temperature_0_s_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (temperature_0_s_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (temperature_0_s_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (temperature_0_s_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (temperature_0_s_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) temperature_0_s_agent_rdata_fifo (
		.clk               (temperature_pll_outclk0_clk),                         //       clk.clk
		.reset             (temperature_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (temperature_0_s_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (temperature_0_s_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (temperature_0_s_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (temperature_0_s_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (temperature_0_s_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (temperature_0_s_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) acl_kernel_clk_ctrl_agent (
		.clk                     (config_clk_out_clk_clk),                               //             clk.clk
		.reset                   (acl_kernel_clk_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (acl_kernel_clk_ctrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (acl_kernel_clk_ctrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (acl_kernel_clk_ctrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (acl_kernel_clk_ctrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (acl_kernel_clk_ctrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (acl_kernel_clk_ctrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (acl_kernel_clk_ctrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (acl_kernel_clk_ctrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (acl_kernel_clk_ctrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (acl_kernel_clk_ctrl_agent_m0_writedata),               //                .writedata
		.m0_write                (acl_kernel_clk_ctrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (acl_kernel_clk_ctrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (acl_kernel_clk_ctrl_agent_rp_ready),                   //                .ready
		.rp_valid                (acl_kernel_clk_ctrl_agent_rp_valid),                   //                .valid
		.rp_data                 (acl_kernel_clk_ctrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (acl_kernel_clk_ctrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (acl_kernel_clk_ctrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (acl_kernel_clk_ctrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (acl_kernel_clk_ctrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (acl_kernel_clk_ctrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (acl_kernel_clk_ctrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (acl_kernel_clk_ctrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (acl_kernel_clk_ctrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (acl_kernel_clk_ctrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (acl_kernel_clk_ctrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (acl_kernel_clk_ctrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (acl_kernel_clk_ctrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (acl_kernel_clk_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (acl_kernel_clk_ctrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acl_kernel_clk_ctrl_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                               //       clk.clk
		.reset             (acl_kernel_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (acl_kernel_clk_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (acl_kernel_clk_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (acl_kernel_clk_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (acl_kernel_clk_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (acl_kernel_clk_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (acl_kernel_clk_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (acl_kernel_clk_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (acl_kernel_clk_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (acl_kernel_clk_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (acl_kernel_clk_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acl_kernel_clk_ctrl_agent_rdata_fifo (
		.clk               (config_clk_out_clk_clk),                           //       clk.clk
		.reset             (acl_kernel_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (acl_kernel_clk_ctrl_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (acl_kernel_clk_ctrl_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (acl_kernel_clk_ctrl_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (acl_kernel_clk_ctrl_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (acl_kernel_clk_ctrl_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (acl_kernel_clk_ctrl_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) kernel_interface_kernel_cntrl_agent (
		.clk                     (pcie_coreclkout_clk),                                            //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (kernel_interface_kernel_cntrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (kernel_interface_kernel_cntrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (kernel_interface_kernel_cntrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (kernel_interface_kernel_cntrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (kernel_interface_kernel_cntrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (kernel_interface_kernel_cntrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (kernel_interface_kernel_cntrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (kernel_interface_kernel_cntrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (kernel_interface_kernel_cntrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (kernel_interface_kernel_cntrl_agent_m0_writedata),               //                .writedata
		.m0_write                (kernel_interface_kernel_cntrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (kernel_interface_kernel_cntrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (kernel_interface_kernel_cntrl_agent_rp_ready),                   //                .ready
		.rp_valid                (kernel_interface_kernel_cntrl_agent_rp_valid),                   //                .valid
		.rp_data                 (kernel_interface_kernel_cntrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (kernel_interface_kernel_cntrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (kernel_interface_kernel_cntrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (kernel_interface_kernel_cntrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (kernel_interface_kernel_cntrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (kernel_interface_kernel_cntrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (kernel_interface_kernel_cntrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) kernel_interface_kernel_cntrl_agent_rsp_fifo (
		.clk               (pcie_coreclkout_clk),                                            //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (kernel_interface_kernel_cntrl_agent_rf_source_data),             //        in.data
		.in_valid          (kernel_interface_kernel_cntrl_agent_rf_source_valid),            //          .valid
		.in_ready          (kernel_interface_kernel_cntrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (kernel_interface_kernel_cntrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (kernel_interface_kernel_cntrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (kernel_interface_kernel_cntrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (137),
		.PKT_ORI_BURST_SIZE_L      (135),
		.PKT_RESPONSE_STATUS_H     (134),
		.PKT_RESPONSE_STATUS_L     (133),
		.PKT_BURST_SIZE_H          (110),
		.PKT_BURST_SIZE_L          (108),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (115),
		.PKT_PROTECTION_H          (128),
		.PKT_PROTECTION_L          (126),
		.PKT_BURSTWRAP_H           (107),
		.PKT_BURSTWRAP_L           (107),
		.PKT_BYTE_CNT_H            (106),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (120),
		.PKT_SRC_ID_L              (117),
		.PKT_DEST_ID_H             (124),
		.PKT_DEST_ID_L             (121),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_csr_agent (
		.clk                     (ddr3a_afi_clk_clk),                             //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (dma_0_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_csr_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_0_csr_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_0_csr_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_0_csr_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_csr_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_csr_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_0_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),             //                .error
		.rdata_fifo_src_ready    (dma_0_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_csr_agent_rsp_fifo (
		.clk               (ddr3a_afi_clk_clk),                          //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (dma_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_csr_agent_rdata_fifo (
		.clk               (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dma_0_csr_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (dma_0_csr_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (dma_0_csr_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (dma_0_csr_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (dma_0_csr_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (dma_0_csr_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pcie_cra_agent (
		.clk                     (pcie_coreclkout_clk),                                   //             clk.clk
		.reset                   (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pcie_cra_agent_m0_address),                             //              m0.address
		.m0_burstcount           (pcie_cra_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (pcie_cra_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (pcie_cra_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (pcie_cra_agent_m0_lock),                                //                .lock
		.m0_readdata             (pcie_cra_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (pcie_cra_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (pcie_cra_agent_m0_read),                                //                .read
		.m0_waitrequest          (pcie_cra_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (pcie_cra_agent_m0_writedata),                           //                .writedata
		.m0_write                (pcie_cra_agent_m0_write),                               //                .write
		.rp_endofpacket          (pcie_cra_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (pcie_cra_agent_rp_ready),                               //                .ready
		.rp_valid                (pcie_cra_agent_rp_valid),                               //                .valid
		.rp_data                 (pcie_cra_agent_rp_data),                                //                .data
		.rp_startofpacket        (pcie_cra_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                               //                .channel
		.rf_sink_ready           (pcie_cra_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (pcie_cra_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (pcie_cra_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (pcie_cra_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (pcie_cra_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (pcie_cra_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (pcie_cra_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (pcie_cra_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (pcie_cra_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (pcie_cra_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (pcie_cra_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_cra_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (pcie_cra_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pcie_cra_agent_rsp_fifo (
		.clk               (pcie_coreclkout_clk),                                   //       clk.clk
		.reset             (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pcie_cra_agent_rf_source_data),                         //        in.data
		.in_valid          (pcie_cra_agent_rf_source_valid),                        //          .valid
		.in_ready          (pcie_cra_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (pcie_cra_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (pcie_cra_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (pcie_cra_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (pcie_cra_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (pcie_cra_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (pcie_cra_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (pcie_cra_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) em_pc_0_em_csr_agent (
		.clk                     (ddr3a_afi_clk_clk),                                           //             clk.clk
		.reset                   (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (em_pc_0_em_csr_agent_m0_address),                             //              m0.address
		.m0_burstcount           (em_pc_0_em_csr_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (em_pc_0_em_csr_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (em_pc_0_em_csr_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (em_pc_0_em_csr_agent_m0_lock),                                //                .lock
		.m0_readdata             (em_pc_0_em_csr_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (em_pc_0_em_csr_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (em_pc_0_em_csr_agent_m0_read),                                //                .read
		.m0_waitrequest          (em_pc_0_em_csr_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (em_pc_0_em_csr_agent_m0_writedata),                           //                .writedata
		.m0_write                (em_pc_0_em_csr_agent_m0_write),                               //                .write
		.rp_endofpacket          (em_pc_0_em_csr_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (em_pc_0_em_csr_agent_rp_ready),                               //                .ready
		.rp_valid                (em_pc_0_em_csr_agent_rp_valid),                               //                .valid
		.rp_data                 (em_pc_0_em_csr_agent_rp_data),                                //                .data
		.rp_startofpacket        (em_pc_0_em_csr_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                     //                .channel
		.rf_sink_ready           (em_pc_0_em_csr_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (em_pc_0_em_csr_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (em_pc_0_em_csr_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (em_pc_0_em_csr_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (em_pc_0_em_csr_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (em_pc_0_em_csr_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (em_pc_0_em_csr_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (em_pc_0_em_csr_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (em_pc_0_em_csr_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (em_pc_0_em_csr_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (em_pc_0_em_csr_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (em_pc_0_em_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (em_pc_0_em_csr_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) em_pc_0_em_csr_agent_rsp_fifo (
		.clk               (ddr3a_afi_clk_clk),                                           //       clk.clk
		.reset             (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (em_pc_0_em_csr_agent_rf_source_data),                         //        in.data
		.in_valid          (em_pc_0_em_csr_agent_rf_source_valid),                        //          .valid
		.in_ready          (em_pc_0_em_csr_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (em_pc_0_em_csr_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (em_pc_0_em_csr_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (em_pc_0_em_csr_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (em_pc_0_em_csr_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (em_pc_0_em_csr_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (em_pc_0_em_csr_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (em_pc_0_em_csr_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) em_pc_0_em_csr_agent_rdata_fifo (
		.clk               (ddr3a_afi_clk_clk),                                           //       clk.clk
		.reset             (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (em_pc_0_em_csr_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (em_pc_0_em_csr_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (em_pc_0_em_csr_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (em_pc_0_em_csr_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (em_pc_0_em_csr_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (em_pc_0_em_csr_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) em_pc_1_em_csr_agent (
		.clk                     (ddr3b_afi_clk_clk),                                           //             clk.clk
		.reset                   (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (em_pc_1_em_csr_agent_m0_address),                             //              m0.address
		.m0_burstcount           (em_pc_1_em_csr_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (em_pc_1_em_csr_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (em_pc_1_em_csr_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (em_pc_1_em_csr_agent_m0_lock),                                //                .lock
		.m0_readdata             (em_pc_1_em_csr_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (em_pc_1_em_csr_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (em_pc_1_em_csr_agent_m0_read),                                //                .read
		.m0_waitrequest          (em_pc_1_em_csr_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (em_pc_1_em_csr_agent_m0_writedata),                           //                .writedata
		.m0_write                (em_pc_1_em_csr_agent_m0_write),                               //                .write
		.rp_endofpacket          (em_pc_1_em_csr_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (em_pc_1_em_csr_agent_rp_ready),                               //                .ready
		.rp_valid                (em_pc_1_em_csr_agent_rp_valid),                               //                .valid
		.rp_data                 (em_pc_1_em_csr_agent_rp_data),                                //                .data
		.rp_startofpacket        (em_pc_1_em_csr_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                     //                .channel
		.rf_sink_ready           (em_pc_1_em_csr_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (em_pc_1_em_csr_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (em_pc_1_em_csr_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (em_pc_1_em_csr_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (em_pc_1_em_csr_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (em_pc_1_em_csr_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (em_pc_1_em_csr_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (em_pc_1_em_csr_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (em_pc_1_em_csr_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (em_pc_1_em_csr_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (em_pc_1_em_csr_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (em_pc_1_em_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (em_pc_1_em_csr_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) em_pc_1_em_csr_agent_rsp_fifo (
		.clk               (ddr3b_afi_clk_clk),                                           //       clk.clk
		.reset             (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (em_pc_1_em_csr_agent_rf_source_data),                         //        in.data
		.in_valid          (em_pc_1_em_csr_agent_rf_source_valid),                        //          .valid
		.in_ready          (em_pc_1_em_csr_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (em_pc_1_em_csr_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (em_pc_1_em_csr_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (em_pc_1_em_csr_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (em_pc_1_em_csr_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (em_pc_1_em_csr_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (em_pc_1_em_csr_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (em_pc_1_em_csr_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) em_pc_1_em_csr_agent_rdata_fifo (
		.clk               (ddr3b_afi_clk_clk),                                           //       clk.clk
		.reset             (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (em_pc_1_em_csr_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (em_pc_1_em_csr_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (em_pc_1_em_csr_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (em_pc_1_em_csr_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (em_pc_1_em_csr_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (em_pc_1_em_csr_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (641),
		.PKT_ORI_BURST_SIZE_L      (639),
		.PKT_RESPONSE_STATUS_H     (638),
		.PKT_RESPONSE_STATUS_L     (637),
		.PKT_BURST_SIZE_H          (614),
		.PKT_BURST_SIZE_L          (612),
		.PKT_TRANS_LOCK            (598),
		.PKT_BEGIN_BURST           (619),
		.PKT_PROTECTION_H          (632),
		.PKT_PROTECTION_L          (630),
		.PKT_BURSTWRAP_H           (611),
		.PKT_BURSTWRAP_L           (611),
		.PKT_BYTE_CNT_H            (610),
		.PKT_BYTE_CNT_L            (600),
		.PKT_ADDR_H                (593),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (594),
		.PKT_TRANS_POSTED          (595),
		.PKT_TRANS_WRITE           (596),
		.PKT_TRANS_READ            (597),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (624),
		.PKT_SRC_ID_L              (621),
		.PKT_DEST_ID_H             (628),
		.PKT_DEST_ID_L             (625),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (642),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_s_nondma_agent (
		.clk                     (ddr3a_afi_clk_clk),                                  //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (dma_0_s_nondma_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_s_nondma_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_s_nondma_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_s_nondma_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_s_nondma_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_s_nondma_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_s_nondma_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_s_nondma_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_s_nondma_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_s_nondma_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_s_nondma_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_s_nondma_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_s_nondma_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_s_nondma_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_s_nondma_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_s_nondma_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_s_nondma_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_0_s_nondma_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_0_s_nondma_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_0_s_nondma_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_s_nondma_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_s_nondma_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_0_s_nondma_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_s_nondma_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_s_nondma_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_s_nondma_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_s_nondma_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_s_nondma_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_s_nondma_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_s_nondma_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_s_nondma_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_s_nondma_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (dma_0_s_nondma_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_s_nondma_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_s_nondma_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (643),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_s_nondma_agent_rsp_fifo (
		.clk               (ddr3a_afi_clk_clk),                               //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_0_s_nondma_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_s_nondma_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_s_nondma_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_s_nondma_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_s_nondma_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_s_nondma_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_s_nondma_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_s_nondma_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_s_nondma_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_s_nondma_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (32),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_s_nondma_agent_rdata_fifo (
		.clk               (ddr3a_afi_clk_clk),                         //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (dma_0_s_nondma_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_0_s_nondma_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_0_s_nondma_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_0_s_nondma_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_0_s_nondma_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_0_s_nondma_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uniphy_status_0_s_agent (
		.clk                     (pcie_coreclkout_clk),                                   //             clk.clk
		.reset                   (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uniphy_status_0_s_agent_m0_address),                    //              m0.address
		.m0_burstcount           (uniphy_status_0_s_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (uniphy_status_0_s_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (uniphy_status_0_s_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (uniphy_status_0_s_agent_m0_lock),                       //                .lock
		.m0_readdata             (uniphy_status_0_s_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (uniphy_status_0_s_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (uniphy_status_0_s_agent_m0_read),                       //                .read
		.m0_waitrequest          (uniphy_status_0_s_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (uniphy_status_0_s_agent_m0_writedata),                  //                .writedata
		.m0_write                (uniphy_status_0_s_agent_m0_write),                      //                .write
		.rp_endofpacket          (uniphy_status_0_s_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (uniphy_status_0_s_agent_rp_ready),                      //                .ready
		.rp_valid                (uniphy_status_0_s_agent_rp_valid),                      //                .valid
		.rp_data                 (uniphy_status_0_s_agent_rp_data),                       //                .data
		.rp_startofpacket        (uniphy_status_0_s_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                               //                .channel
		.rf_sink_ready           (uniphy_status_0_s_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (uniphy_status_0_s_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (uniphy_status_0_s_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (uniphy_status_0_s_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (uniphy_status_0_s_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (uniphy_status_0_s_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (uniphy_status_0_s_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (uniphy_status_0_s_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (uniphy_status_0_s_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (uniphy_status_0_s_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (uniphy_status_0_s_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uniphy_status_0_s_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (uniphy_status_0_s_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uniphy_status_0_s_agent_rsp_fifo (
		.clk               (pcie_coreclkout_clk),                                   //       clk.clk
		.reset             (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uniphy_status_0_s_agent_rf_source_data),                //        in.data
		.in_valid          (uniphy_status_0_s_agent_rf_source_valid),               //          .valid
		.in_ready          (uniphy_status_0_s_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (uniphy_status_0_s_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (uniphy_status_0_s_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (uniphy_status_0_s_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (uniphy_status_0_s_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (uniphy_status_0_s_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (uniphy_status_0_s_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (uniphy_status_0_s_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) version_id_0_s_agent (
		.clk                     (pcie_coreclkout_clk),                                   //             clk.clk
		.reset                   (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (version_id_0_s_agent_m0_address),                       //              m0.address
		.m0_burstcount           (version_id_0_s_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (version_id_0_s_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (version_id_0_s_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (version_id_0_s_agent_m0_lock),                          //                .lock
		.m0_readdata             (version_id_0_s_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (version_id_0_s_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (version_id_0_s_agent_m0_read),                          //                .read
		.m0_waitrequest          (version_id_0_s_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (version_id_0_s_agent_m0_writedata),                     //                .writedata
		.m0_write                (version_id_0_s_agent_m0_write),                         //                .write
		.rp_endofpacket          (version_id_0_s_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (version_id_0_s_agent_rp_ready),                         //                .ready
		.rp_valid                (version_id_0_s_agent_rp_valid),                         //                .valid
		.rp_data                 (version_id_0_s_agent_rp_data),                          //                .data
		.rp_startofpacket        (version_id_0_s_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                               //                .channel
		.rf_sink_ready           (version_id_0_s_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (version_id_0_s_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (version_id_0_s_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (version_id_0_s_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (version_id_0_s_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (version_id_0_s_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (version_id_0_s_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (version_id_0_s_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (version_id_0_s_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (version_id_0_s_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (version_id_0_s_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (version_id_0_s_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (version_id_0_s_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) version_id_0_s_agent_rsp_fifo (
		.clk               (pcie_coreclkout_clk),                                   //       clk.clk
		.reset             (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (version_id_0_s_agent_rf_source_data),                   //        in.data
		.in_valid          (version_id_0_s_agent_rf_source_valid),                  //          .valid
		.in_ready          (version_id_0_s_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (version_id_0_s_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (version_id_0_s_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (version_id_0_s_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (version_id_0_s_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (version_id_0_s_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (version_id_0_s_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (version_id_0_s_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	system_acl_iface_mm_interconnect_2_router router (
		.sink_ready         (pipe_stage_host_ctrl_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (pipe_stage_host_ctrl_m0_agent_cp_valid),                 //          .valid
		.sink_data          (pipe_stage_host_ctrl_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (pcie_coreclkout_clk),                                    //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (temperature_0_s_agent_rp_ready),                      //      sink.ready
		.sink_valid         (temperature_0_s_agent_rp_valid),                      //          .valid
		.sink_data          (temperature_0_s_agent_rp_data),                       //          .data
		.sink_startofpacket (temperature_0_s_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (temperature_0_s_agent_rp_endofpacket),                //          .endofpacket
		.clk                (temperature_pll_outclk0_clk),                         //       clk.clk
		.reset              (temperature_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_002 (
		.sink_ready         (acl_kernel_clk_ctrl_agent_rp_ready),               //      sink.ready
		.sink_valid         (acl_kernel_clk_ctrl_agent_rp_valid),               //          .valid
		.sink_data          (acl_kernel_clk_ctrl_agent_rp_data),                //          .data
		.sink_startofpacket (acl_kernel_clk_ctrl_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (acl_kernel_clk_ctrl_agent_rp_endofpacket),         //          .endofpacket
		.clk                (config_clk_out_clk_clk),                           //       clk.clk
		.reset              (acl_kernel_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_003 (
		.sink_ready         (kernel_interface_kernel_cntrl_agent_rp_ready),           //      sink.ready
		.sink_valid         (kernel_interface_kernel_cntrl_agent_rp_valid),           //          .valid
		.sink_data          (kernel_interface_kernel_cntrl_agent_rp_data),            //          .data
		.sink_startofpacket (kernel_interface_kernel_cntrl_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (kernel_interface_kernel_cntrl_agent_rp_endofpacket),     //          .endofpacket
		.clk                (pcie_coreclkout_clk),                                    //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_004 router_004 (
		.sink_ready         (dma_0_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (dma_0_csr_agent_rp_valid),                //          .valid
		.sink_data          (dma_0_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (dma_0_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (dma_0_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                    //       src.ready
		.src_valid          (router_004_src_valid),                    //          .valid
		.src_data           (router_004_src_data),                     //          .data
		.src_channel        (router_004_src_channel),                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_005 (
		.sink_ready         (pcie_cra_agent_rp_ready),                               //      sink.ready
		.sink_valid         (pcie_cra_agent_rp_valid),                               //          .valid
		.sink_data          (pcie_cra_agent_rp_data),                                //          .data
		.sink_startofpacket (pcie_cra_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pcie_cra_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_006 (
		.sink_ready         (em_pc_0_em_csr_agent_rp_ready),                               //      sink.ready
		.sink_valid         (em_pc_0_em_csr_agent_rp_valid),                               //          .valid
		.sink_data          (em_pc_0_em_csr_agent_rp_data),                                //          .data
		.sink_startofpacket (em_pc_0_em_csr_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (em_pc_0_em_csr_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                                           //       clk.clk
		.reset              (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                        //       src.ready
		.src_valid          (router_006_src_valid),                                        //          .valid
		.src_data           (router_006_src_data),                                         //          .data
		.src_channel        (router_006_src_channel),                                      //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                   //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_007 (
		.sink_ready         (em_pc_1_em_csr_agent_rp_ready),                               //      sink.ready
		.sink_valid         (em_pc_1_em_csr_agent_rp_valid),                               //          .valid
		.sink_data          (em_pc_1_em_csr_agent_rp_data),                                //          .data
		.sink_startofpacket (em_pc_1_em_csr_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (em_pc_1_em_csr_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (ddr3b_afi_clk_clk),                                           //       clk.clk
		.reset              (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                        //       src.ready
		.src_valid          (router_007_src_valid),                                        //          .valid
		.src_data           (router_007_src_data),                                         //          .data
		.src_channel        (router_007_src_channel),                                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                   //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_008 router_008 (
		.sink_ready         (dma_0_s_nondma_agent_rp_ready),           //      sink.ready
		.sink_valid         (dma_0_s_nondma_agent_rp_valid),           //          .valid
		.sink_data          (dma_0_s_nondma_agent_rp_data),            //          .data
		.sink_startofpacket (dma_0_s_nondma_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (dma_0_s_nondma_agent_rp_endofpacket),     //          .endofpacket
		.clk                (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                    //       src.ready
		.src_valid          (router_008_src_valid),                    //          .valid
		.src_data           (router_008_src_data),                     //          .data
		.src_channel        (router_008_src_channel),                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_009 (
		.sink_ready         (uniphy_status_0_s_agent_rp_ready),                      //      sink.ready
		.sink_valid         (uniphy_status_0_s_agent_rp_valid),                      //          .valid
		.sink_data          (uniphy_status_0_s_agent_rp_data),                       //          .data
		.sink_startofpacket (uniphy_status_0_s_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (uniphy_status_0_s_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_router_001 router_010 (
		.sink_ready         (version_id_0_s_agent_rp_ready),                         //      sink.ready
		.sink_valid         (version_id_0_s_agent_rp_valid),                         //          .valid
		.sink_data          (version_id_0_s_agent_rp_data),                          //          .data
		.sink_startofpacket (version_id_0_s_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (version_id_0_s_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                  //       src.ready
		.src_valid          (router_010_src_valid),                                  //          .valid
		.src_data           (router_010_src_data),                                   //          .data
		.src_channel        (router_010_src_channel),                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.MAX_OUTSTANDING_RESPONSES (24),
		.PIPELINED                 (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_host_ctrl_m0_limiter (
		.clk                    (pcie_coreclkout_clk),                                    //       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_src_valid),          //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                     //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                     //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                   //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                      //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),             //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),               //          .endofpacket
		.rsp_src_ready          (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket)     //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (pcie_coreclkout_clk),                                    //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                         //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                       //          .channel
		.sink_data          (limiter_pipeline_source0_data),                          //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                   //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //          .valid
		.src1_data          (cmd_demux_src1_data),                                    //          .data
		.src1_channel       (cmd_demux_src1_channel),                                 //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                             //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                   //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                   //          .valid
		.src2_data          (cmd_demux_src2_data),                                    //          .data
		.src2_channel       (cmd_demux_src2_channel),                                 //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                           //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                             //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                   //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                   //          .valid
		.src3_data          (cmd_demux_src3_data),                                    //          .data
		.src3_channel       (cmd_demux_src3_channel),                                 //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                           //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                             //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                   //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                   //          .valid
		.src4_data          (cmd_demux_src4_data),                                    //          .data
		.src4_channel       (cmd_demux_src4_channel),                                 //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                           //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                             //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                   //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                   //          .valid
		.src5_data          (cmd_demux_src5_data),                                    //          .data
		.src5_channel       (cmd_demux_src5_channel),                                 //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                           //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                             //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                   //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                   //          .valid
		.src6_data          (cmd_demux_src6_data),                                    //          .data
		.src6_channel       (cmd_demux_src6_channel),                                 //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                           //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                             //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                   //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                   //          .valid
		.src7_data          (cmd_demux_src7_data),                                    //          .data
		.src7_channel       (cmd_demux_src7_channel),                                 //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                           //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                             //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                   //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                   //          .valid
		.src8_data          (cmd_demux_src8_data),                                    //          .data
		.src8_channel       (cmd_demux_src8_channel),                                 //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                           //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                             //          .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                                   //      src9.ready
		.src9_valid         (cmd_demux_src9_valid),                                   //          .valid
		.src9_data          (cmd_demux_src9_data),                                    //          .data
		.src9_channel       (cmd_demux_src9_channel),                                 //          .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                           //          .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (temperature_pll_outclk0_clk),                         //       clk.clk
		.reset               (temperature_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                 //          .channel
		.sink0_data          (crosser_out_data),                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (config_clk_out_clk_clk),                           //       clk.clk
		.reset               (acl_kernel_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                            //          .valid
		.sink0_channel       (crosser_001_out_channel),                          //          .channel
		.sink0_data          (crosser_001_out_data),                             //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                       //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (pcie_coreclkout_clk),                                    //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //          .valid
		.src_data            (cmd_mux_002_src_data),                                   //          .data
		.src_channel         (cmd_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src2_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                   //          .valid
		.sink0_channel       (crosser_002_out_channel),                 //          .channel
		.sink0_data          (crosser_002_out_data),                    //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (pcie_coreclkout_clk),                                   //       clk.clk
		.reset               (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                 //          .valid
		.src_data            (cmd_mux_004_src_data),                                  //          .data
		.src_channel         (cmd_mux_004_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                //          .channel
		.sink0_data          (cmd_demux_src4_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                             //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (ddr3a_afi_clk_clk),                                           //       clk.clk
		.reset               (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                       //          .valid
		.src_data            (cmd_mux_005_src_data),                                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                       //          .valid
		.sink0_channel       (crosser_003_out_channel),                                     //          .channel
		.sink0_data          (crosser_003_out_data),                                        //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_006 (
		.clk                 (ddr3b_afi_clk_clk),                                           //       clk.clk
		.reset               (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                       //          .valid
		.src_data            (cmd_mux_006_src_data),                                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                       //          .valid
		.sink0_channel       (crosser_004_out_channel),                                     //          .channel
		.sink0_data          (crosser_004_out_data),                                        //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_007 (
		.clk                 (ddr3a_afi_clk_clk),                       //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                   //          .valid
		.sink0_channel       (crosser_005_out_channel),                 //          .channel
		.sink0_data          (crosser_005_out_data),                    //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_008 (
		.clk                 (pcie_coreclkout_clk),                                   //       clk.clk
		.reset               (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                 //          .valid
		.src_data            (cmd_mux_008_src_data),                                  //          .data
		.src_channel         (cmd_mux_008_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                //          .channel
		.sink0_data          (cmd_demux_src8_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                             //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_cmd_mux cmd_mux_009 (
		.clk                 (pcie_coreclkout_clk),                                   //       clk.clk
		.reset               (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                 //          .valid
		.src_data            (cmd_mux_009_src_data),                                  //          .data
		.src_channel         (cmd_mux_009_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                //          .channel
		.sink0_data          (cmd_demux_src9_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                             //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (temperature_pll_outclk0_clk),                         //       clk.clk
		.reset              (temperature_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_001 rsp_demux_001 (
		.clk                (config_clk_out_clk_clk),                           //       clk.clk
		.reset              (acl_kernel_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_002 rsp_demux_002 (
		.clk                (pcie_coreclkout_clk),                                    //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //      sink.ready
		.sink_channel       (router_003_src_channel),                                 //          .channel
		.sink_data          (router_003_src_data),                                    //          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_003 rsp_demux_003 (
		.clk                (ddr3a_afi_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (dma_0_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_0_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_0_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_0_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_0_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_002 rsp_demux_004 (
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                //          .channel
		.sink_data          (router_005_src_data),                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_003 rsp_demux_005 (
		.clk                (ddr3a_afi_clk_clk),                                           //       clk.clk
		.reset              (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                        //      sink.ready
		.sink_channel       (router_006_src_channel),                                      //          .channel
		.sink_data          (router_006_src_data),                                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_003 rsp_demux_006 (
		.clk                (ddr3b_afi_clk_clk),                                           //       clk.clk
		.reset              (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                        //      sink.ready
		.sink_channel       (router_007_src_channel),                                      //          .channel
		.sink_data          (router_007_src_data),                                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                               //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_003 rsp_demux_007 (
		.clk                (ddr3a_afi_clk_clk),                                  //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (dma_0_s_nondma_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_0_s_nondma_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_0_s_nondma_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_0_s_nondma_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_s_nondma_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_0_s_nondma_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_007_src0_data),                            //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_002 rsp_demux_008 (
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                  //      sink.ready
		.sink_channel       (router_009_src_channel),                                //          .channel
		.sink_data          (router_009_src_data),                                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_009_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_008_src0_data),                               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                         //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_demux_002 rsp_demux_009 (
		.clk                (pcie_coreclkout_clk),                                   //       clk.clk
		.reset              (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                  //      sink.ready
		.sink_channel       (router_010_src_channel),                                //          .channel
		.sink_data          (router_010_src_data),                                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_010_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                         //          .endofpacket
	);

	system_acl_iface_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (pcie_coreclkout_clk),                                    //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_src_valid),                                      //          .valid
		.src_data            (rsp_mux_src_data),                                       //          .data
		.src_channel         (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                                  //          .valid
		.sink0_channel       (crosser_006_out_channel),                                //          .channel
		.sink0_data          (crosser_006_out_data),                                   //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket),                            //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                                  //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                                  //          .valid
		.sink1_channel       (crosser_007_out_channel),                                //          .channel
		.sink1_data          (crosser_007_out_data),                                   //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket),                            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                               //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                         //          .endofpacket
		.sink3_ready         (crosser_008_out_ready),                                  //     sink3.ready
		.sink3_valid         (crosser_008_out_valid),                                  //          .valid
		.sink3_channel       (crosser_008_out_channel),                                //          .channel
		.sink3_data          (crosser_008_out_data),                                   //          .data
		.sink3_startofpacket (crosser_008_out_startofpacket),                          //          .startofpacket
		.sink3_endofpacket   (crosser_008_out_endofpacket),                            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                               //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                         //          .endofpacket
		.sink5_ready         (crosser_009_out_ready),                                  //     sink5.ready
		.sink5_valid         (crosser_009_out_valid),                                  //          .valid
		.sink5_channel       (crosser_009_out_channel),                                //          .channel
		.sink5_data          (crosser_009_out_data),                                   //          .data
		.sink5_startofpacket (crosser_009_out_startofpacket),                          //          .startofpacket
		.sink5_endofpacket   (crosser_009_out_endofpacket),                            //          .endofpacket
		.sink6_ready         (crosser_010_out_ready),                                  //     sink6.ready
		.sink6_valid         (crosser_010_out_valid),                                  //          .valid
		.sink6_channel       (crosser_010_out_channel),                                //          .channel
		.sink6_data          (crosser_010_out_data),                                   //          .data
		.sink6_startofpacket (crosser_010_out_startofpacket),                          //          .startofpacket
		.sink6_endofpacket   (crosser_010_out_endofpacket),                            //          .endofpacket
		.sink7_ready         (crosser_011_out_ready),                                  //     sink7.ready
		.sink7_valid         (crosser_011_out_valid),                                  //          .valid
		.sink7_channel       (crosser_011_out_channel),                                //          .channel
		.sink7_data          (crosser_011_out_data),                                   //          .data
		.sink7_startofpacket (crosser_011_out_startofpacket),                          //          .startofpacket
		.sink7_endofpacket   (crosser_011_out_endofpacket),                            //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                               //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                               //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                             //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                       //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),                         //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                               //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                               //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                             //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                                //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                       //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                          //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (89),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (106),
		.OUT_PKT_BYTE_CNT_L            (96),
		.OUT_PKT_TRANS_COMPRESSED_READ (90),
		.OUT_PKT_BURST_SIZE_H          (110),
		.OUT_PKT_BURST_SIZE_L          (108),
		.OUT_PKT_RESPONSE_STATUS_H     (134),
		.OUT_PKT_RESPONSE_STATUS_L     (133),
		.OUT_PKT_TRANS_EXCLUSIVE       (95),
		.OUT_PKT_BURST_TYPE_H          (112),
		.OUT_PKT_BURST_TYPE_L          (111),
		.OUT_PKT_ORI_BURST_SIZE_L      (135),
		.OUT_PKT_ORI_BURST_SIZE_H      (137),
		.OUT_ST_DATA_W                 (138),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_0_csr_cmd_width_adapter (
		.clk                  (ddr3a_afi_clk_clk),                             //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                         //          .ready
		.in_data              (cmd_mux_003_src_data),                          //          .data
		.out_endofpacket      (dma_0_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (593),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (610),
		.OUT_PKT_BYTE_CNT_L            (600),
		.OUT_PKT_TRANS_COMPRESSED_READ (594),
		.OUT_PKT_BURST_SIZE_H          (614),
		.OUT_PKT_BURST_SIZE_L          (612),
		.OUT_PKT_RESPONSE_STATUS_H     (638),
		.OUT_PKT_RESPONSE_STATUS_L     (637),
		.OUT_PKT_TRANS_EXCLUSIVE       (599),
		.OUT_PKT_BURST_TYPE_H          (616),
		.OUT_PKT_BURST_TYPE_L          (615),
		.OUT_PKT_ORI_BURST_SIZE_L      (639),
		.OUT_PKT_ORI_BURST_SIZE_H      (641),
		.OUT_ST_DATA_W                 (642),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_0_s_nondma_cmd_width_adapter (
		.clk                  (ddr3a_afi_clk_clk),                                  //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                              //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                            //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                              //          .ready
		.in_data              (cmd_mux_007_src_data),                               //          .data
		.out_endofpacket      (dma_0_s_nondma_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_s_nondma_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_s_nondma_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_s_nondma_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_s_nondma_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_s_nondma_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (89),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (106),
		.IN_PKT_BYTE_CNT_L             (96),
		.IN_PKT_TRANS_COMPRESSED_READ  (90),
		.IN_PKT_TRANS_WRITE            (92),
		.IN_PKT_BURSTWRAP_H            (107),
		.IN_PKT_BURSTWRAP_L            (107),
		.IN_PKT_BURST_SIZE_H           (110),
		.IN_PKT_BURST_SIZE_L           (108),
		.IN_PKT_RESPONSE_STATUS_H      (134),
		.IN_PKT_RESPONSE_STATUS_L      (133),
		.IN_PKT_TRANS_EXCLUSIVE        (95),
		.IN_PKT_BURST_TYPE_H           (112),
		.IN_PKT_BURST_TYPE_L           (111),
		.IN_PKT_ORI_BURST_SIZE_L       (135),
		.IN_PKT_ORI_BURST_SIZE_H       (137),
		.IN_ST_DATA_W                  (138),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_0_csr_rsp_width_adapter (
		.clk                  (ddr3a_afi_clk_clk),                             //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_004_src_valid),                          //      sink.valid
		.in_channel           (router_004_src_channel),                        //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_004_src_ready),                          //          .ready
		.in_data              (router_004_src_data),                           //          .data
		.out_endofpacket      (dma_0_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (593),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (610),
		.IN_PKT_BYTE_CNT_L             (600),
		.IN_PKT_TRANS_COMPRESSED_READ  (594),
		.IN_PKT_TRANS_WRITE            (596),
		.IN_PKT_BURSTWRAP_H            (611),
		.IN_PKT_BURSTWRAP_L            (611),
		.IN_PKT_BURST_SIZE_H           (614),
		.IN_PKT_BURST_SIZE_L           (612),
		.IN_PKT_RESPONSE_STATUS_H      (638),
		.IN_PKT_RESPONSE_STATUS_L      (637),
		.IN_PKT_TRANS_EXCLUSIVE        (599),
		.IN_PKT_BURST_TYPE_H           (616),
		.IN_PKT_BURST_TYPE_L           (615),
		.IN_PKT_ORI_BURST_SIZE_L       (639),
		.IN_PKT_ORI_BURST_SIZE_H       (641),
		.IN_ST_DATA_W                  (642),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_0_s_nondma_rsp_width_adapter (
		.clk                  (ddr3a_afi_clk_clk),                                  //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_008_src_valid),                               //      sink.valid
		.in_channel           (router_008_src_channel),                             //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                         //          .endofpacket
		.in_ready             (router_008_src_ready),                               //          .ready
		.in_data              (router_008_src_data),                                //          .data
		.out_endofpacket      (dma_0_s_nondma_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_s_nondma_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_s_nondma_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_s_nondma_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_s_nondma_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_s_nondma_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pcie_coreclkout_clk),                                    //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (temperature_pll_outclk0_clk),                            //       out_clk.clk
		.out_reset         (temperature_0_clk_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_src0_data),                                    //              .data
		.out_ready         (crosser_out_ready),                                      //           out.ready
		.out_valid         (crosser_out_valid),                                      //              .valid
		.out_startofpacket (crosser_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_out_channel),                                    //              .channel
		.out_data          (crosser_out_data),                                       //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pcie_coreclkout_clk),                                    //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (config_clk_out_clk_clk),                                 //       out_clk.clk
		.out_reset         (acl_kernel_clk_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                 //              .channel
		.in_data           (cmd_demux_src1_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                  //           out.ready
		.out_valid         (crosser_001_out_valid),                                  //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                //              .channel
		.out_data          (crosser_001_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (pcie_coreclkout_clk),                                    //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ddr3a_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (dma_0_reset_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                 //              .channel
		.in_data           (cmd_demux_src3_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                  //           out.ready
		.out_valid         (crosser_002_out_valid),                                  //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                //              .channel
		.out_data          (crosser_002_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pcie_coreclkout_clk),                                         //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (ddr3a_afi_clk_clk),                                           //       out_clk.clk
		.out_reset         (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                      //              .channel
		.in_data           (cmd_demux_src5_data),                                         //              .data
		.out_ready         (crosser_003_out_ready),                                       //           out.ready
		.out_valid         (crosser_003_out_valid),                                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                     //              .channel
		.out_data          (crosser_003_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pcie_coreclkout_clk),                                         //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (ddr3b_afi_clk_clk),                                           //       out_clk.clk
		.out_reset         (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                      //              .channel
		.in_data           (cmd_demux_src6_data),                                         //              .data
		.out_ready         (crosser_004_out_ready),                                       //           out.ready
		.out_valid         (crosser_004_out_valid),                                       //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                     //              .channel
		.out_data          (crosser_004_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pcie_coreclkout_clk),                                    //        in_clk.clk
		.in_reset          (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ddr3a_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (dma_0_reset_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                                 //              .channel
		.in_data           (cmd_demux_src7_data),                                    //              .data
		.out_ready         (crosser_005_out_ready),                                  //           out.ready
		.out_valid         (crosser_005_out_valid),                                  //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                //              .channel
		.out_data          (crosser_005_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (temperature_pll_outclk0_clk),                            //        in_clk.clk
		.in_reset          (temperature_0_clk_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                    //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_src0_data),                                    //              .data
		.out_ready         (crosser_006_out_ready),                                  //           out.ready
		.out_valid         (crosser_006_out_valid),                                  //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                //              .channel
		.out_data          (crosser_006_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (config_clk_out_clk_clk),                                 //        in_clk.clk
		.in_reset          (acl_kernel_clk_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                    //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                             //              .channel
		.in_data           (rsp_demux_001_src0_data),                                //              .data
		.out_ready         (crosser_007_out_ready),                                  //           out.ready
		.out_valid         (crosser_007_out_valid),                                  //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                //              .channel
		.out_data          (crosser_007_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (ddr3a_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (dma_0_reset_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                    //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                             //              .channel
		.in_data           (rsp_demux_003_src0_data),                                //              .data
		.out_ready         (crosser_008_out_ready),                                  //           out.ready
		.out_valid         (crosser_008_out_valid),                                  //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                //              .channel
		.out_data          (crosser_008_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (ddr3a_afi_clk_clk),                                           //        in_clk.clk
		.in_reset          (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                         //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_005_src0_data),                                     //              .data
		.out_ready         (crosser_009_out_ready),                                       //           out.ready
		.out_valid         (crosser_009_out_valid),                                       //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                     //              .channel
		.out_data          (crosser_009_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (ddr3b_afi_clk_clk),                                           //        in_clk.clk
		.in_reset          (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                         //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_006_src0_data),                                     //              .data
		.out_ready         (crosser_010_out_ready),                                       //           out.ready
		.out_valid         (crosser_010_out_valid),                                       //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                     //              .channel
		.out_data          (crosser_010_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (102),
		.BITS_PER_SYMBOL     (102),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (ddr3a_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (dma_0_reset_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (pcie_coreclkout_clk),                                    //       out_clk.clk
		.out_reset         (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                             //              .channel
		.in_data           (rsp_demux_007_src0_data),                                //              .data
		.out_ready         (crosser_011_out_ready),                                  //           out.ready
		.out_valid         (crosser_011_out_valid),                                  //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                //              .channel
		.out_data          (crosser_011_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (pcie_coreclkout_clk),                                    //       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //     sink0.ready
		.in_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_src_valid),          //          .valid
		.in_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.in_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.in_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //          .data
		.in_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                         //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                         //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                   //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                          //          .data
		.out_channel       (limiter_pipeline_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0)                                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (pcie_coreclkout_clk),                                    //       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                      //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                      //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                              //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                //          .endofpacket
		.in_data           (rsp_mux_src_data),                                       //          .data
		.in_channel        (rsp_mux_src_channel),                                    //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                     //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                     //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),               //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                      //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0)                                                    // (terminated)
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (temperature_pll_outclk0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (temperature_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (temperature_0_s_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (temperature_0_s_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (temperature_0_s_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (acl_kernel_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (acl_kernel_clk_ctrl_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (acl_kernel_clk_ctrl_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (acl_kernel_clk_ctrl_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                 //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pcie_coreclkout_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (kernel_interface_kernel_cntrl_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter_003 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (ddr3a_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_0_csr_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (dma_0_csr_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (dma_0_csr_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)        //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pcie_coreclkout_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (pcie_Cra_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pcie_cra_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (pcie_cra_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (pcie_cra_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (ddr3a_afi_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (em_pc_0_em_csr_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (em_pc_0_em_csr_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (em_pc_0_em_csr_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (em_pc_0_em_csr_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (ddr3b_afi_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (em_pc_1_em_csr_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (em_pc_1_em_csr_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (em_pc_1_em_csr_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (em_pc_1_em_csr_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                            //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter_007 #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (ddr3a_afi_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (dma_0_s_nondma_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_0_s_nondma_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_0_s_nondma_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)          //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pcie_coreclkout_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uniphy_status_0_s_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (uniphy_status_0_s_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (uniphy_status_0_s_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                      //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pcie_coreclkout_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (uniphy_status_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (version_id_0_s_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (version_id_0_s_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (version_id_0_s_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

endmodule
